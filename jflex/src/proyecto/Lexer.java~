/* The following code was generated by JFlex 1.6.1 */

package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Geo/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\45\1\46\1\46\1\45\22\0\1\3\1\72\1\77"+
    "\2\0\1\51\1\71\1\100\1\44\1\47\1\67\1\66\1\61\1\70"+
    "\1\60\1\73\1\57\1\56\1\55\7\2\1\65\1\0\1\53\1\64"+
    "\1\52\1\0\1\50\4\1\1\1\7\1\1\27\2\1\1\75\1\1"+
    "\1\76\1\36\1\40\2\1\1\30\3\1\1\25\1\0\1\26\1\54"+
    "\1\43\1\0\1\16\1\4\1\22\1\10\1\14\1\15\1\21\1\23"+
    "\1\5\1\41\1\42\1\13\1\31\1\6\1\11\1\32\1\37\1\20"+
    "\1\17\1\7\1\12\1\33\1\35\1\34\1\24\1\1\1\62\1\74"+
    "\1\63\7\0\1\46\u1fa2\0\1\46\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\25\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\2\1\3\1\30\1\31\2\3\1\0\1\2\1\32"+
    "\7\3\1\33\3\3\1\33\2\3\1\34\10\3\1\35"+
    "\31\3\1\0\1\36\1\37\1\40\1\0\1\41\1\42"+
    "\1\4\1\43\1\44\1\45\1\46\1\47\1\50\1\0"+
    "\1\51\2\0\1\52\20\3\1\53\22\3\1\54\11\3"+
    "\1\0\1\54\1\33\10\3\1\54\1\3\1\55\1\56"+
    "\2\3\2\0\17\3\1\54\1\0\6\3\1\57\1\3"+
    "\1\0\1\54\12\3\1\33\5\3\1\60\10\3\1\61"+
    "\16\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\101\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\101\0\101\0\101\0\101\0\101\0\u0659"+
    "\0\101\0\u069a\0\101\0\101\0\101\0\u06db\0\101\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924"+
    "\0\101\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u069a\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0965\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0965\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0965\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f"+
    "\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u0659"+
    "\0\101\0\101\0\101\0\u1617\0\101\0\101\0\u1658\0\101"+
    "\0\101\0\101\0\101\0\101\0\u0965\0\u0924\0\u0924\0\u1699"+
    "\0\u16da\0\u09e7\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68"+
    "\0\u1aa9\0\u1aea\0\u09a6\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u0965\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u240e\0\u244f\0\u2490\0\u24d1\0\u09a6\0\u09a6\0\u2512\0\u2553"+
    "\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b"+
    "\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963"+
    "\0\u29a4\0\101\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a"+
    "\0\u2b6b\0\u09a6\0\u2bac\0\u2bed\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0"+
    "\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\101"+
    "\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\101\0\u2ffd\0\u303e"+
    "\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u0965\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d"+
    "\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\22\1\3\2\2\1\23\1\3"+
    "\1\24\1\25\1\26\1\3\1\27\1\30\1\3\1\31"+
    "\1\32\2\3\1\33\1\5\1\0\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\3\4\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\3\1\60\1\61\102\0\1\62\1\63"+
    "\1\0\21\62\2\0\15\62\11\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\65\1\4\1\0\21\65"+
    "\2\0\15\65\11\0\3\4\1\66\14\0\2\65\3\0"+
    "\1\62\1\63\1\0\1\67\1\70\2\62\1\71\2\62"+
    "\1\72\1\62\1\73\1\62\1\74\2\62\1\75\2\62"+
    "\2\0\15\62\11\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\1\62\1\63\1\0\11\62\1\76\7\62"+
    "\2\0\2\62\1\77\12\62\11\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\0\14\62"+
    "\1\100\2\62\1\101\1\62\2\0\15\62\11\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\0\5\62\1\102\2\62\1\103\10\62\2\0\15\62"+
    "\11\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\0\2\62\1\104\16\62\2\0\3\62"+
    "\1\105\11\62\11\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\1\62\1\63\1\0\1\62\1\106\1\107"+
    "\2\62\1\110\2\62\1\111\10\62\2\0\15\62\11\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\0\6\62\1\112\1\113\11\62\2\0\4\62"+
    "\1\114\1\115\7\62\11\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\0\1\62\1\116"+
    "\3\62\1\117\4\62\1\120\6\62\2\0\15\62\11\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\0\7\62\1\121\3\62\2\122\4\62\2\0"+
    "\15\62\11\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\0\1\62\1\123\1\62\1\124"+
    "\13\62\1\125\1\62\2\0\10\62\1\126\4\62\11\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\0\1\62\1\127\17\62\2\0\15\62\11\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\0\7\62\1\130\2\62\1\131\6\62\2\0"+
    "\15\62\11\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\0\10\62\1\132\10\62\2\0"+
    "\15\62\11\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\0\13\62\1\133\5\62\2\0"+
    "\15\62\11\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\0\12\62\1\134\1\62\1\135"+
    "\4\62\2\0\15\62\11\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\0\1\62\1\116"+
    "\3\62\1\136\1\137\5\62\1\140\4\62\2\0\15\62"+
    "\11\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\0\10\62\1\141\10\62\2\0\15\62"+
    "\11\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\0\10\62\1\142\1\62\1\143\4\62"+
    "\1\144\1\62\2\0\15\62\11\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\0\21\62"+
    "\2\0\6\62\1\145\6\62\11\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\0\17\62"+
    "\1\146\1\62\2\0\15\62\11\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\0\6\62"+
    "\1\147\12\62\2\0\15\62\11\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\24\150\2\0\15\150\1\0"+
    "\1\150\4\0\1\151\2\0\3\150\15\0\2\150\4\0"+
    "\1\66\52\0\3\66\105\0\1\152\100\0\1\153\15\0"+
    "\24\154\2\0\15\154\1\0\1\154\7\0\3\154\4\0"+
    "\1\155\2\0\1\156\5\0\2\154\4\0\1\157\52\0"+
    "\3\157\1\66\3\0\1\160\105\0\1\161\73\0\1\162"+
    "\100\0\1\163\110\0\1\164\5\0\1\62\1\63\1\0"+
    "\21\62\2\0\15\62\11\0\3\63\1\64\4\0\1\64"+
    "\7\0\1\62\1\165\2\0\45\166\2\0\30\166\1\167"+
    "\1\166\1\0\1\62\1\63\1\170\21\62\2\0\15\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\2\63\1\170\21\63\2\0\15\63\1\171"+
    "\1\170\7\0\3\63\15\0\2\63\3\0\1\172\2\0"+
    "\21\172\2\0\15\172\31\0\2\172\3\0\2\65\1\0"+
    "\21\65\2\0\15\65\11\0\3\65\15\0\2\65\3\0"+
    "\1\62\1\63\1\170\20\62\1\173\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\2\62\1\174\16\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\5\62\1\175"+
    "\13\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\5\62\1\176\13\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\7\62\1\177\11\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\3\62\1\200\13\62\1\201"+
    "\1\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\17\62\1\202\1\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\21\62\2\0\3\62\1\201\11\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\6\62\1\203\11\62\1\76"+
    "\2\0\15\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\10\62"+
    "\1\204\3\62\1\205\4\62\2\0\15\62\1\171\1\170"+
    "\7\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\170\21\62\2\0\6\62\1\206\6\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\1\62\1\63\1\170\11\62\1\207\7\62"+
    "\2\0\15\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\4\62"+
    "\1\210\14\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\13\62\1\211\1\62\1\212\3\62\2\0\15\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\1\62\1\63\1\170\21\62\2\0\15\62"+
    "\1\171\1\170\7\0\1\213\1\214\1\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\15\62"+
    "\1\215\1\216\2\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\11\62\1\217\3\62\1\220\3\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\7\62\1\221"+
    "\11\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\13\62\1\203\5\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\10\62\1\222\10\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\16\62\1\223\2\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\14\62\1\76"+
    "\4\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\7\62\1\113\11\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\11\62\1\224\7\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\21\62\2\0\2\62\1\220"+
    "\12\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\3\62\1\225"+
    "\15\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\10\62\1\226\1\62\1\126\6\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\5\62\1\227\13\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\14\62\1\230"+
    "\4\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\15\62\1\231\3\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\1\62\1\232\17\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\13\62\1\203\1\233\4\62"+
    "\2\0\15\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\14\62"+
    "\1\234\4\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\15\62\1\235\3\62\2\0\15\62\1\171\1\170"+
    "\7\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\170\1\62\1\204\17\62\2\0\15\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\1\62\1\63\1\170\21\62\2\0\12\62"+
    "\1\105\2\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\21\62"+
    "\2\0\6\62\1\236\6\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\1\237\20\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\1\62\1\240\17\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\17\62\1\241\1\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\12\62\1\242"+
    "\6\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\7\62\1\243\11\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\1\62\1\244\17\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\1\62\1\245\17\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\14\62\1\246"+
    "\4\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\21\62\2\0\2\62\1\247\12\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\24\154"+
    "\2\0\15\154\1\0\1\154\7\0\3\154\7\0\1\156"+
    "\5\0\2\154\4\0\1\157\52\0\3\157\1\66\23\0"+
    "\1\170\40\0\1\171\1\170\33\0\45\250\2\0\1\251"+
    "\31\250\1\0\1\62\1\63\1\170\3\62\1\203\15\62"+
    "\2\0\15\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\3\62"+
    "\1\252\15\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\6\62\1\253\12\62\2\0\15\62\1\171\1\170"+
    "\7\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\170\2\62\1\254\16\62\2\0\15\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\1\62\1\63\1\170\5\62\1\255\13\62"+
    "\2\0\15\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\14\62"+
    "\1\256\4\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\5\62\1\257\13\62\2\0\15\62\1\171\1\170"+
    "\7\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\170\12\62\1\117\6\62\2\0\15\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\1\62\1\63\1\170\10\62\1\76\10\62"+
    "\2\0\15\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\2\62"+
    "\1\76\16\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\10\62\1\260\10\62\2\0\15\62\1\171\1\170"+
    "\7\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\170\2\62\1\105\16\62\2\0\15\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\1\62\1\63\1\170\10\62\1\261\10\62"+
    "\2\0\15\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\10\62"+
    "\1\262\10\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\3\62\1\263\15\62\2\0\15\62\1\171\1\170"+
    "\7\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\170\17\62\1\264\1\62\2\0\15\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\2\63\1\170\21\63\2\0\15\63\1\171"+
    "\1\170\7\0\2\63\1\265\15\0\2\63\3\0\1\62"+
    "\1\63\1\170\21\62\2\0\15\62\1\171\1\170\7\0"+
    "\1\266\1\267\1\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\12\62\1\270\6\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\3\62\1\105"+
    "\15\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\271"+
    "\21\62\2\0\15\62\1\272\1\271\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\10\62\1\273\10\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\2\62\1\217\16\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\10\62\1\274\10\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\14\62\1\275"+
    "\4\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\6\62\1\276\12\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\21\62\2\0\3\62\1\277\11\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\6\62\1\300\12\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\3\62\1\236"+
    "\15\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\17\62\1\217\1\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\21\62\2\0\2\62\1\301\12\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\14\62\1\302\4\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\10\62\1\236"+
    "\10\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\21\62\2\0\1\62\1\303\13\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\7\62\1\304\11\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\21\62\2\0\4\62\1\305"+
    "\10\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\1\62\1\306"+
    "\17\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\21\62\2\0\3\62\1\307\11\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\21\62\2\0\13\62\1\105\1\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\7\62\1\203\11\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\3\62\1\310"+
    "\15\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\10\62\1\311\10\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\21\62\2\0\3\62\1\105\11\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\51\0\1\312\32\0\1\62\1\63\1\170\21\62\1\313"+
    "\1\0\15\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\1\244"+
    "\20\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\15\62\1\76\3\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\12\62\1\314\6\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\1\62\1\176\17\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\14\62\1\314"+
    "\4\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\12\62\1\315\6\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\2\62\1\316\16\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\14\62\1\317\4\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\10\62\1\320"+
    "\10\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\3\62\1\321\15\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\2\63"+
    "\1\170\21\63\2\0\15\63\1\171\1\170\7\0\2\63"+
    "\1\322\15\0\2\63\3\0\1\62\1\63\1\170\3\62"+
    "\1\323\15\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\5\0\1\271\40\0"+
    "\1\272\1\271\33\0\45\324\2\0\1\325\31\324\1\0"+
    "\1\62\1\63\1\170\14\62\1\116\4\62\2\0\15\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\3\0\1\62\1\63\1\170\21\62\2\0\3\62"+
    "\1\314\11\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\10\62"+
    "\1\326\10\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\12\62\1\327\6\62\2\0\15\62\1\171\1\170"+
    "\7\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\170\1\330\20\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\7\62\1\331\11\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\1\105\20\62"+
    "\2\0\15\62\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\20\62"+
    "\1\105\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\12\62\1\332\6\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\1\62\1\333\17\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\12\62\1\173\6\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\16\62\1\334"+
    "\2\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\5\62\1\335\13\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\16\62\1\336\2\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\12\62\1\337\6\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\30\0\1\340\53\0\1\62\1\63\1\170"+
    "\3\62\1\76\15\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\4\62\1\341\14\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\13\62\1\342\5\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\21\62\2\0"+
    "\14\62\1\343\1\171\1\170\7\0\3\63\1\64\4\0"+
    "\1\64\7\0\2\62\3\0\1\62\1\63\1\170\2\62"+
    "\1\344\16\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\13\62\1\220\5\62\2\0\15\62\1\171\1\170"+
    "\7\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\170\1\62\1\345\17\62\2\0\15\62"+
    "\1\171\1\170\7\0\3\63\1\64\4\0\1\64\7\0"+
    "\2\62\51\0\1\346\32\0\1\62\1\63\1\170\4\62"+
    "\1\105\14\62\2\0\15\62\1\171\1\170\7\0\3\63"+
    "\1\64\4\0\1\64\7\0\2\62\3\0\1\62\1\63"+
    "\1\170\3\62\1\347\15\62\2\0\15\62\1\171\1\170"+
    "\7\0\3\63\1\64\4\0\1\64\7\0\2\62\3\0"+
    "\1\62\1\63\1\170\20\62\1\350\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\4\62\1\351\14\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\14\62\1\352"+
    "\4\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\16\62\1\76\2\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\7\62\1\353\11\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\2\62\1\220\16\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\17\62\1\76"+
    "\1\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\4\62\1\354\14\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\1\62\1\355\17\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\1\62\1\356\6\62\1\357"+
    "\10\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\12\62\1\360\6\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\10\62\1\361\10\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\5\62\1\362\13\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\1\62\1\363"+
    "\17\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\13\62\1\364\5\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\10\62\1\365\10\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\2\62\1\256\16\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\10\62\1\220"+
    "\10\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\13\62\1\236\5\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\2\62\1\366\16\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\21\62\2\0\4\62\1\234"+
    "\10\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\3\62\1\367"+
    "\15\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\14\62\1\105\4\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\2\62\1\236\16\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\5\62\1\370\13\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\3\62\1\371"+
    "\15\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\14\62\1\220\4\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\15\62\1\357\3\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\3\62\1\372\15\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\2\62\1\373"+
    "\16\62\2\0\15\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\10\62\1\374\10\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\3\0\1\62"+
    "\1\63\1\170\12\62\1\375\6\62\2\0\15\62\1\171"+
    "\1\170\7\0\3\63\1\64\4\0\1\64\7\0\2\62"+
    "\3\0\1\62\1\63\1\170\13\62\1\357\5\62\2\0"+
    "\15\62\1\171\1\170\7\0\3\63\1\64\4\0\1\64"+
    "\7\0\2\62\3\0\1\62\1\63\1\170\21\62\2\0"+
    "\3\62\1\116\11\62\1\171\1\170\7\0\3\63\1\64"+
    "\4\0\1\64\7\0\2\62\3\0\1\62\1\63\1\170"+
    "\16\62\1\243\2\62\2\0\15\62\1\171\1\170\7\0"+
    "\3\63\1\64\4\0\1\64\7\0\2\62\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13715];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\25\1\5\11\1\1\1\11"+
    "\1\1\3\11\1\1\1\11\11\1\1\11\2\1\1\0"+
    "\63\1\1\0\3\11\1\0\2\11\1\1\5\11\1\1"+
    "\1\0\1\1\2\0\56\1\1\0\20\1\2\0\17\1"+
    "\1\11\1\0\10\1\1\0\13\1\1\11\5\1\1\11"+
    "\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return DIVISION;
            }
          case 50: break;
          case 2: 
            { lexeme=yytext(); return ERROR;
            }
          case 51: break;
          case 3: 
            { lexeme=yytext(); return VAR;
            }
          case 52: break;
          case 4: 
            { lexeme=yytext(); return INT;
            }
          case 53: break;
          case 5: 
            { /*Ignore*/
            }
          case 54: break;
          case 6: 
            { return PARENTESISI;
            }
          case 55: break;
          case 7: 
            { return PARENTESISD;
            }
          case 56: break;
          case 8: 
            { return DIRECTIVAS;
            }
          case 57: break;
          case 9: 
            { return MODULO;
            }
          case 58: break;
          case 10: 
            { lexeme=yytext(); return ANGLED;
            }
          case 59: break;
          case 11: 
            { lexeme=yytext(); return ANGLEI;
            }
          case 60: break;
          case 12: 
            { lexeme=yytext(); return EXPO;
            }
          case 61: break;
          case 13: 
            { return PUNTO;
            }
          case 62: break;
          case 14: 
            { return COMA;
            }
          case 63: break;
          case 15: 
            { return INICIOB;
            }
          case 64: break;
          case 16: 
            { return FINALB;
            }
          case 65: break;
          case 17: 
            { return ASIGNACION;
            }
          case 66: break;
          case 18: 
            { return DOSP;
            }
          case 67: break;
          case 19: 
            { return SUMA;
            }
          case 68: break;
          case 20: 
            { return MULTIPLICACION;
            }
          case 69: break;
          case 21: 
            { return RESTA;
            }
          case 70: break;
          case 22: 
            { return ASPERSON;
            }
          case 71: break;
          case 23: 
            { return NOT;
            }
          case 72: break;
          case 24: 
            { return COMILLAD;
            }
          case 73: break;
          case 25: 
            { return COMILLAS;
            }
          case 74: break;
          case 26: 
            { lexeme=yytext(); return FLOAT;
            }
          case 75: break;
          case 27: 
            { lexeme=yytext(); return PR;
            }
          case 76: break;
          case 28: 
            { lexeme=yytext(); return EVENTO;
            }
          case 77: break;
          case 29: 
            { lexeme=yytext(); return CONS;
            }
          case 78: break;
          case 30: 
            { lexeme=yytext(); return HTML;
            }
          case 79: break;
          case 31: 
            { return COMPARACION;
            }
          case 80: break;
          case 32: 
            { return SUMAM;
            }
          case 81: break;
          case 33: 
            { return MULTIPLICACIONM;
            }
          case 82: break;
          case 34: 
            { lexeme=yytext(); return COMENTARIO;
            }
          case 83: break;
          case 35: 
            { return RESTAM;
            }
          case 84: break;
          case 36: 
            { return AND;
            }
          case 85: break;
          case 37: 
            { return DIFERENTE;
            }
          case 86: break;
          case 38: 
            { return DIVISIONM;
            }
          case 87: break;
          case 39: 
            { return OR;
            }
          case 88: break;
          case 40: 
            { return PR;
            }
          case 89: break;
          case 41: 
            { lexeme=yytext(); return TEXTO;
            }
          case 90: break;
          case 42: 
            { lexeme=yytext(); return OPERA;
            }
          case 91: break;
          case 43: 
            { lexeme=yytext(); return LN2;
            }
          case 92: break;
          case 44: 
            { lexeme=yytext(); return FUNCION;
            }
          case 93: break;
          case 45: 
            { lexeme=yytext(); return LN10;
            }
          case 94: break;
          case 46: 
            { lexeme=yytext(); return LOG2;
            }
          case 95: break;
          case 47: 
            { lexeme=yytext(); return LOG10;
            }
          case 96: break;
          case 48: 
            { lexeme=yytext(); return OBJETO;
            }
          case 97: break;
          case 49: 
            { lexeme=yytext(); return LIB;
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
