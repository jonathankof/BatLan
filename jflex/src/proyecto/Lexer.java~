/* The following code was generated by JFlex 1.6.1 */

package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Geo/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\51\1\52\1\52\1\51\22\0\1\3\1\76\1\102"+
    "\2\0\1\55\1\75\1\103\1\50\1\53\1\73\1\72\1\65\1\74"+
    "\1\64\1\77\1\63\1\62\1\61\7\2\1\71\1\0\1\57\1\70"+
    "\1\56\1\0\1\54\1\1\1\42\2\1\1\1\1\41\2\1\1\40"+
    "\3\1\1\27\2\1\1\37\1\1\1\101\1\36\1\44\2\1\1\30"+
    "\3\1\1\25\1\0\1\26\1\60\1\47\1\0\1\16\1\4\1\22"+
    "\1\10\1\14\1\15\1\21\1\23\1\5\1\45\1\46\1\13\1\31"+
    "\1\6\1\11\1\32\1\43\1\20\1\17\1\7\1\12\1\33\1\35"+
    "\1\34\1\24\1\1\1\66\1\100\1\67\7\0\1\52\u1fa2\0\1\52"+
    "\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\27\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\2\1\30\1\31\2\3\1\0\1\2\1\32\7\3"+
    "\1\33\3\3\1\33\2\3\1\34\40\3\1\35\1\36"+
    "\2\3\1\0\1\37\1\40\1\41\1\0\1\42\1\43"+
    "\1\4\1\44\1\45\1\46\1\47\1\50\1\0\1\51"+
    "\2\0\1\52\20\3\1\53\21\3\1\54\12\3\1\0"+
    "\1\54\1\33\10\3\1\54\1\3\1\55\1\56\2\3"+
    "\2\0\17\3\1\54\1\0\6\3\1\57\1\3\1\0"+
    "\1\54\12\3\1\33\5\3\1\60\10\3\1\61\16\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\104\0\u0110\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\104\0\104\0\104\0\104"+
    "\0\104\0\u072c\0\104\0\u0770\0\104\0\104\0\104\0\u07b4"+
    "\0\104\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\104\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0770\0\u0b28"+
    "\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0a18\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0a18\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u0a18\0\u0a18"+
    "\0\u171c\0\u1760\0\u072c\0\104\0\104\0\104\0\u17a4\0\104"+
    "\0\104\0\u17e8\0\104\0\104\0\104\0\104\0\104\0\u09d4"+
    "\0\u09d4\0\u182c\0\u1870\0\u0aa0\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u0a5c\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u0a18\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u0a5c\0\u0a5c"+
    "\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c"+
    "\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c"+
    "\0\u2b90\0\u2bd4\0\u2c18\0\104\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28"+
    "\0\u2d6c\0\u2db0\0\u2df4\0\u0a5c\0\u2e38\0\u2e7c\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\104\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\104"+
    "\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498"+
    "\0\u0a18\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\22\1\3\2\2\1\23\1\3"+
    "\1\24\1\25\1\26\1\3\1\27\1\30\1\31\1\3"+
    "\1\32\2\3\1\33\1\34\2\3\1\35\1\5\1\0"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\3\4\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\3\1\61\1\62\105\0"+
    "\1\63\1\64\1\0\21\63\2\0\21\63\11\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\66\1\4"+
    "\1\0\21\66\2\0\21\66\11\0\3\4\1\67\14\0"+
    "\1\66\3\0\1\63\1\64\1\0\1\70\1\71\2\63"+
    "\1\72\2\63\1\73\1\63\1\74\1\63\1\75\2\63"+
    "\1\76\2\63\2\0\21\63\11\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\0\11\63"+
    "\1\77\7\63\2\0\2\63\1\100\16\63\11\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\0\14\63\1\101\2\63\1\102\1\63\2\0\21\63"+
    "\11\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\0\5\63\1\103\2\63\1\104\10\63"+
    "\2\0\21\63\11\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\0\2\63\1\105\16\63"+
    "\2\0\3\63\1\106\15\63\11\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\0\1\63"+
    "\1\107\1\110\2\63\1\111\2\63\1\112\10\63\2\0"+
    "\21\63\11\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\0\6\63\1\113\1\114\11\63"+
    "\2\0\4\63\1\115\1\116\13\63\11\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\0"+
    "\5\63\1\117\4\63\1\120\6\63\2\0\21\63\11\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\0\7\63\1\121\3\63\2\122\4\63\2\0"+
    "\21\63\11\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\0\1\63\1\123\1\63\1\124"+
    "\13\63\1\125\1\63\2\0\14\63\1\126\4\63\11\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\0\1\63\1\127\17\63\2\0\21\63\11\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\0\7\63\1\130\2\63\1\131\6\63\2\0"+
    "\21\63\11\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\0\10\63\1\132\10\63\2\0"+
    "\21\63\11\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\0\13\63\1\133\5\63\2\0"+
    "\21\63\11\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\0\12\63\1\134\1\63\1\135"+
    "\4\63\2\0\21\63\11\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\0\5\63\1\136"+
    "\1\137\5\63\1\140\4\63\2\0\21\63\11\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\0\10\63\1\141\10\63\2\0\21\63\11\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\0\10\63\1\142\1\63\1\143\4\63\1\144\1\63"+
    "\2\0\21\63\11\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\0\3\63\1\145\15\63"+
    "\2\0\6\63\1\146\12\63\11\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\0\21\63"+
    "\2\0\11\63\1\147\7\63\11\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\150\3\0\1\63\1\64\1\0\1\63"+
    "\1\147\17\63\2\0\21\63\11\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\0\17\63"+
    "\1\151\1\63\2\0\21\63\11\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\0\6\63"+
    "\1\152\12\63\2\0\21\63\11\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\24\153\2\0\21\153\1\0"+
    "\1\153\4\0\1\154\2\0\3\153\15\0\1\153\4\0"+
    "\1\67\56\0\3\67\110\0\1\155\103\0\1\156\14\0"+
    "\24\157\2\0\21\157\1\0\1\157\7\0\3\157\4\0"+
    "\1\160\2\0\1\161\5\0\1\157\4\0\1\162\56\0"+
    "\3\162\1\67\3\0\1\163\110\0\1\164\76\0\1\165"+
    "\103\0\1\166\113\0\1\167\3\0\51\170\2\0\27\170"+
    "\1\171\1\170\1\0\1\63\1\64\1\172\21\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\2\64\1\172\21\64\2\0\21\64"+
    "\1\173\1\172\7\0\3\64\15\0\1\64\3\0\1\174"+
    "\2\0\21\174\2\0\21\174\31\0\1\174\3\0\2\66"+
    "\1\0\21\66\2\0\21\66\11\0\3\66\15\0\1\66"+
    "\3\0\1\63\1\64\1\172\20\63\1\175\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\2\63\1\176\16\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\5\63"+
    "\1\177\13\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\5\63\1\200\13\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\7\63\1\201\11\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\3\63\1\202\13\63"+
    "\1\203\1\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\17\63\1\204\1\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\21\63\2\0\3\63\1\203\15\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\6\63\1\205\11\63"+
    "\1\77\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\10\63\1\206\3\63\1\207\4\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\21\63\2\0\6\63\1\210"+
    "\12\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\11\63\1\211"+
    "\7\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\4\63\1\212\14\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\13\63\1\213\1\63\1\214\3\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\21\63\2\0"+
    "\21\63\1\173\1\172\7\0\1\215\1\216\1\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\15\63\1\217\1\220\2\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\11\63\1\221\3\63\1\222\3\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\7\63"+
    "\1\223\11\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\13\63\1\205\5\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\10\63\1\224\10\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\16\63\1\225\2\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\14\63"+
    "\1\77\4\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\7\63\1\114\11\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\11\63\1\226\7\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\21\63\2\0\2\63"+
    "\1\222\16\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\3\63"+
    "\1\227\15\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\12\63\1\126\6\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\5\63\1\230\13\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\14\63\1\231\4\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\15\63"+
    "\1\232\3\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\1\63\1\233\17\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\13\63\1\205\1\234\4\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\14\63\1\235"+
    "\4\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\15\63\1\236\3\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\1\63\1\206\17\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\21\63\2\0\16\63\1\106"+
    "\2\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\21\63\2\0"+
    "\6\63\1\237\12\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\1\240\20\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\1\63\1\241\17\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\17\63\1\242\1\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\12\63\1\243\6\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\7\63"+
    "\1\244\11\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\1\63\1\245\17\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\10\63\1\246\10\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\1\63\1\247\17\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\14\63"+
    "\1\250\4\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\21\63\2\0\2\63\1\251\16\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\24\157\2\0\21\157\1\0\1\157\7\0\3\157\7\0"+
    "\1\161\5\0\1\157\4\0\1\162\56\0\3\162\1\67"+
    "\22\0\1\172\44\0\1\173\1\172\32\0\51\252\2\0"+
    "\1\253\30\252\1\0\1\63\1\64\1\172\3\63\1\205"+
    "\15\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\3\63\1\254\15\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\6\63\1\255\12\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\2\63\1\256\16\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\5\63\1\257"+
    "\13\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\14\63\1\260\4\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\5\63\1\261\13\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\12\63\1\117\6\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\10\63\1\77"+
    "\10\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\2\63\1\77\16\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\10\63\1\262\10\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\2\63\1\106\16\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\10\63\1\263"+
    "\10\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\10\63\1\264\10\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\3\63\1\265\15\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\17\63\1\266\1\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\2\64\1\172\21\64\2\0\21\64"+
    "\1\173\1\172\7\0\2\64\1\267\15\0\1\64\3\0"+
    "\1\63\1\64\1\172\21\63\2\0\21\63\1\173\1\172"+
    "\7\0\1\270\1\271\1\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\12\63\1\272\6\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\3\63"+
    "\1\106\15\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\273\21\63\2\0\21\63\1\274\1\273\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\10\63\1\275\10\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\2\63\1\221\16\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\10\63\1\276\10\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\14\63"+
    "\1\277\4\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\6\63\1\300\12\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\6\63\1\301\12\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\3\63\1\237\15\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\17\63"+
    "\1\221\1\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\21\63\2\0\2\63\1\302\16\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\14\63\1\303\4\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\10\63\1\237\10\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\21\63"+
    "\2\0\1\63\1\304\17\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\7\63\1\305\11\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\21\63\2\0\4\63\1\306\14\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\1\63\1\307\17\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\21\63"+
    "\2\0\3\63\1\310\15\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\21\63\2\0\17\63\1\106\1\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\7\63\1\205\11\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\21\63\2\0\3\63"+
    "\1\311\15\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\3\63"+
    "\1\312\15\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\10\63\1\313\10\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\21\63\2\0\3\63\1\106\15\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\55\0\1\314\31\0\1\63\1\64\1\172\21\63"+
    "\1\315\1\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\1\245\20\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\15\63\1\77\3\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\12\63\1\316\6\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\1\63\1\200\17\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\14\63"+
    "\1\316\4\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\12\63\1\317\6\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\2\63\1\320\16\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\14\63\1\321\4\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\10\63"+
    "\1\322\10\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\3\63\1\323\15\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\2\64\1\172\21\64\2\0\21\64\1\173\1\172\7\0"+
    "\2\64\1\324\15\0\1\64\3\0\1\63\1\64\1\172"+
    "\3\63\1\325\15\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\5\0\1\273"+
    "\44\0\1\274\1\273\32\0\51\326\2\0\1\327\30\326"+
    "\1\0\1\63\1\64\1\172\14\63\1\147\4\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\21\63\2\0"+
    "\3\63\1\316\15\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\10\63\1\330\10\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\12\63\1\331\6\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\7\63\1\332\11\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\1\106\20\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\20\63"+
    "\1\106\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\12\63\1\333\6\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\1\63\1\334\17\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\12\63\1\175\6\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\16\63\1\335"+
    "\2\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\5\63\1\336\13\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\21\63\2\0\13\63\1\337\5\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\16\63\1\340\2\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\12\63\1\341"+
    "\6\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\30\0\1\342\56\0\1\63"+
    "\1\64\1\172\3\63\1\77\15\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\4\63\1\343\14\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\13\63\1\344"+
    "\5\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\21\63\2\0\20\63\1\345\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\2\63\1\346\16\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\13\63\1\222\5\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\1\63\1\347\17\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\55\0\1\350\31\0\1\63\1\64"+
    "\1\172\4\63\1\106\14\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\3\63\1\351\15\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\4\63\1\352\14\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\14\63"+
    "\1\353\4\63\2\0\21\63\1\173\1\172\7\0\3\64"+
    "\1\65\4\0\1\65\7\0\1\63\3\0\1\63\1\64"+
    "\1\172\16\63\1\77\2\63\2\0\21\63\1\173\1\172"+
    "\7\0\3\64\1\65\4\0\1\65\7\0\1\63\3\0"+
    "\1\63\1\64\1\172\7\63\1\354\11\63\2\0\21\63"+
    "\1\173\1\172\7\0\3\64\1\65\4\0\1\65\7\0"+
    "\1\63\3\0\1\63\1\64\1\172\2\63\1\222\16\63"+
    "\2\0\21\63\1\173\1\172\7\0\3\64\1\65\4\0"+
    "\1\65\7\0\1\63\3\0\1\63\1\64\1\172\20\63"+
    "\1\355\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\17\63\1\77\1\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\4\63\1\356\14\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\1\63\1\357\17\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\1\63\1\360"+
    "\6\63\1\361\10\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\12\63\1\362\6\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\10\63\1\363\10\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\5\63\1\364"+
    "\13\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\1\63\1\365\17\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\10\63\1\366\10\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\2\63\1\260\16\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\10\63\1\222"+
    "\10\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\21\63\2\0\7\63\1\367\11\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\13\63\1\237\5\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\2\63\1\370\16\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\21\63\2\0"+
    "\4\63\1\235\14\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\3\63\1\371\15\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\14\63\1\106\4\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\2\63\1\237\16\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\5\63\1\372"+
    "\13\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\14\63\1\222\4\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\3\63\1\373\15\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\15\63\1\361\3\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\3\63\1\374"+
    "\15\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\2\63\1\375\16\63\2\0\21\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\10\63\1\376\10\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\3\0\1\63\1\64\1\172\12\63\1\377\6\63\2\0"+
    "\21\63\1\173\1\172\7\0\3\64\1\65\4\0\1\65"+
    "\7\0\1\63\3\0\1\63\1\64\1\172\13\63\1\361"+
    "\5\63\2\0\21\63\1\173\1\172\7\0\3\64\1\65"+
    "\4\0\1\65\7\0\1\63\3\0\1\63\1\64\1\172"+
    "\21\63\2\0\3\63\1\147\15\63\1\173\1\172\7\0"+
    "\3\64\1\65\4\0\1\65\7\0\1\63\3\0\1\63"+
    "\1\64\1\172\16\63\1\244\2\63\2\0\21\63\1\173"+
    "\1\172\7\0\3\64\1\65\4\0\1\65\7\0\1\63"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\27\1\5\11\1\1\1\11"+
    "\1\1\3\11\1\1\1\11\10\1\1\11\2\1\1\0"+
    "\65\1\1\0\3\11\1\0\2\11\1\1\5\11\1\0"+
    "\1\1\2\0\56\1\1\0\20\1\2\0\17\1\1\11"+
    "\1\0\10\1\1\0\13\1\1\11\5\1\1\11\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return DIVISION;
            }
          case 50: break;
          case 2: 
            { lexeme=yytext(); return ERROR;
            }
          case 51: break;
          case 3: 
            { lexeme=yytext(); return VAR;
            }
          case 52: break;
          case 4: 
            { lexeme=yytext(); return INT;
            }
          case 53: break;
          case 5: 
            { /*Ignore*/
            }
          case 54: break;
          case 6: 
            { return PARENTESISI;
            }
          case 55: break;
          case 7: 
            { return PARENTESISD;
            }
          case 56: break;
          case 8: 
            { return DIRECTIVAS;
            }
          case 57: break;
          case 9: 
            { return MODULO;
            }
          case 58: break;
          case 10: 
            { lexeme=yytext(); return ANGLED;
            }
          case 59: break;
          case 11: 
            { lexeme=yytext(); return ANGLEI;
            }
          case 60: break;
          case 12: 
            { lexeme=yytext(); return EXPO;
            }
          case 61: break;
          case 13: 
            { return PUNTO;
            }
          case 62: break;
          case 14: 
            { return COMA;
            }
          case 63: break;
          case 15: 
            { return INICIOB;
            }
          case 64: break;
          case 16: 
            { return FINALB;
            }
          case 65: break;
          case 17: 
            { return ASIGNACION;
            }
          case 66: break;
          case 18: 
            { return DOSP;
            }
          case 67: break;
          case 19: 
            { return SUMA;
            }
          case 68: break;
          case 20: 
            { return MULTIPLICACION;
            }
          case 69: break;
          case 21: 
            { return RESTA;
            }
          case 70: break;
          case 22: 
            { return ASPERSON;
            }
          case 71: break;
          case 23: 
            { return NOT;
            }
          case 72: break;
          case 24: 
            { return COMILLAD;
            }
          case 73: break;
          case 25: 
            { return COMILLAS;
            }
          case 74: break;
          case 26: 
            { lexeme=yytext(); return FLOAT;
            }
          case 75: break;
          case 27: 
            { lexeme=yytext(); return PR;
            }
          case 76: break;
          case 28: 
            { lexeme=yytext(); return EVENTO;
            }
          case 77: break;
          case 29: 
            { lexeme=yytext(); return CONS;
            }
          case 78: break;
          case 30: 
            { return PR;
            }
          case 79: break;
          case 31: 
            { lexeme=yytext(); return HTML;
            }
          case 80: break;
          case 32: 
            { return COMPARACION;
            }
          case 81: break;
          case 33: 
            { return SUMAM;
            }
          case 82: break;
          case 34: 
            { return MULTIPLICACIONM;
            }
          case 83: break;
          case 35: 
            { lexeme=yytext(); return COMENTARIO;
            }
          case 84: break;
          case 36: 
            { return RESTAM;
            }
          case 85: break;
          case 37: 
            { return AND;
            }
          case 86: break;
          case 38: 
            { return DIFERENTE;
            }
          case 87: break;
          case 39: 
            { return DIVISIONM;
            }
          case 88: break;
          case 40: 
            { return OR;
            }
          case 89: break;
          case 41: 
            { lexeme=yytext(); return TEXTO;
            }
          case 90: break;
          case 42: 
            { lexeme=yytext(); return OPERA;
            }
          case 91: break;
          case 43: 
            { lexeme=yytext(); return LN2;
            }
          case 92: break;
          case 44: 
            { lexeme=yytext(); return FUNCION;
            }
          case 93: break;
          case 45: 
            { lexeme=yytext(); return LN10;
            }
          case 94: break;
          case 46: 
            { lexeme=yytext(); return LOG2;
            }
          case 95: break;
          case 47: 
            { lexeme=yytext(); return LOG10;
            }
          case 96: break;
          case 48: 
            { lexeme=yytext(); return OBJETO;
            }
          case 97: break;
          case 49: 
            { lexeme=yytext(); return LIB;
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
