/* The following code was generated by JFlex 1.6.1 */

package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Ricardo/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\44\1\45\1\45\1\44\22\0\1\3\1\72\1\74"+
    "\2\0\1\50\1\71\1\75\1\43\1\46\1\66\1\65\1\60\1\67"+
    "\1\57\1\70\1\56\1\55\1\54\7\2\1\64\1\0\1\52\1\63"+
    "\1\51\1\0\1\47\1\17\1\4\1\24\1\11\1\15\1\16\1\23"+
    "\1\25\1\6\1\37\1\41\1\14\1\31\1\7\1\12\1\33\1\36"+
    "\1\22\1\21\1\10\1\13\1\34\1\32\1\35\1\26\1\1\1\27"+
    "\1\0\1\30\1\53\1\42\1\0\1\17\1\4\1\24\1\11\1\15"+
    "\1\16\1\23\1\25\1\6\1\37\1\41\1\14\1\31\1\7\1\12"+
    "\1\33\1\36\1\22\1\21\1\10\1\13\1\34\1\32\1\35\1\26"+
    "\1\1\1\61\1\73\1\62\7\0\1\45\252\0\2\5\115\0\1\20"+
    "\u1ea8\0\1\45\1\45\u0100\0\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\1\10\2"+
    "\1\1\11\2\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\2\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\1\1\27\1\30\1\2"+
    "\1\1\1\0\1\2\1\0\4\2\1\0\2\2\1\31"+
    "\1\0\1\31\3\2\1\31\2\2\1\32\1\0\10\2"+
    "\2\33\3\2\1\0\1\2\6\0\6\2\1\0\5\2"+
    "\1\0\12\2\1\0\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\0\1\47"+
    "\2\0\1\1\1\35\1\2\1\0\4\2\2\0\11\2"+
    "\2\0\2\2\1\50\6\2\1\0\3\2\7\0\5\2"+
    "\1\0\1\2\1\0\3\2\2\0\3\2\1\0\1\2"+
    "\1\51\1\2\1\0\3\2\1\35\1\0\1\51\1\35"+
    "\2\31\3\2\2\0\5\2\1\51\1\0\1\51\1\2"+
    "\1\52\1\53\2\2\2\0\3\2\6\0\1\51\4\2"+
    "\2\0\2\2\1\0\2\2\1\32\1\2\1\0\1\2"+
    "\1\0\1\2\2\35\1\0\1\2\2\0\3\2\2\0"+
    "\2\2\1\54\1\2\1\0\1\51\1\2\5\0\4\2"+
    "\1\0\2\2\1\0\1\2\2\0\1\2\2\35\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\1\0\1\2\1\55"+
    "\4\0\3\2\1\0\1\2\1\0\1\2\2\35\1\0"+
    "\1\2\1\0\1\56\1\2\1\56\1\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\2\57\1\0\1\2\1\0"+
    "\1\2\3\0\3\2\3\0\3\2\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\76\0\76\0\76\0\76\0\76\0\u05d0\0\76"+
    "\0\u060e\0\76\0\76\0\76\0\u064c\0\76\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\76\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\76\0\u0b62\0\u087a\0\u0ba0\0\u0bde"+
    "\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u087a\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\76\0\u087a"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u05d0\0\76\0\u177e\0\76\0\76\0\76"+
    "\0\76\0\76\0\u17bc\0\76\0\76\0\76\0\u083c\0\u083c"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u087a\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u087a\0\u2682\0\u26c0"+
    "\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u27f6\0\u2834\0\u2872"+
    "\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u087a"+
    "\0\u087a\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\76\0\u2f78"+
    "\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168"+
    "\0\u31a6\0\u31e4\0\76\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a"+
    "\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a"+
    "\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u087a\0\u367e\0\u36bc"+
    "\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e"+
    "\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e"+
    "\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e"+
    "\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\76\0\u3e00"+
    "\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0"+
    "\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\76"+
    "\0\u41e0\0\u087a\0\u421e\0\u425c\0\u429a\0\u42d8\0\u4316\0\u4354"+
    "\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u44c8\0\u40aa\0\u40e8"+
    "\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a\0\u46b8"+
    "\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a\0\u48a8"+
    "\0\u48e6\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\3\1\23\1\24\1\3\2\2"+
    "\1\25\1\26\1\27\1\30\2\3\1\31\1\2\2\3"+
    "\1\32\1\5\1\0\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\3\4\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\77\0\2\60\1\0\1\60\1\0\12\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\11\0\3\60\20\0"+
    "\1\61\1\4\1\0\1\61\1\0\12\61\1\0\6\61"+
    "\2\0\7\61\1\0\2\61\11\0\3\4\1\62\17\0"+
    "\2\60\1\0\1\63\1\64\1\65\2\60\1\66\2\60"+
    "\1\67\1\60\1\70\1\60\1\71\1\72\2\60\1\73"+
    "\2\60\2\0\7\60\1\0\2\60\11\0\3\60\35\0"+
    "\1\74\12\0\1\75\45\0\2\60\1\0\1\60\1\0"+
    "\10\60\1\76\1\60\1\0\6\60\2\0\1\77\6\60"+
    "\1\0\2\60\11\0\3\60\20\0\2\60\1\0\1\60"+
    "\1\0\12\60\1\0\1\60\1\100\2\60\1\101\1\60"+
    "\2\0\7\60\1\0\2\60\11\0\3\60\20\0\2\60"+
    "\1\0\1\60\1\0\4\60\1\102\2\60\1\103\2\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\11\0\3\60"+
    "\20\0\2\60\1\0\1\60\1\0\1\60\1\104\10\60"+
    "\1\0\6\60\2\0\2\60\1\105\4\60\1\0\2\60"+
    "\11\0\3\60\20\0\2\60\1\0\1\60\1\106\1\107"+
    "\1\110\2\60\1\111\2\60\1\112\2\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\11\0\3\60\20\0\2\60"+
    "\1\0\1\60\1\0\5\60\1\113\1\114\3\60\1\0"+
    "\6\60\2\0\3\60\1\115\1\116\2\60\1\0\2\60"+
    "\11\0\3\60\20\0\2\60\1\0\1\60\1\117\1\120"+
    "\3\60\1\121\4\60\1\122\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\11\0\3\60\20\0\2\60\1\0\1\60"+
    "\1\0\6\60\1\123\3\60\1\124\2\125\4\60\2\0"+
    "\7\60\1\0\2\60\11\0\3\60\24\0\2\126\1\0"+
    "\1\127\14\0\1\130\1\131\3\0\1\132\3\0\1\133"+
    "\40\0\2\60\1\0\1\60\1\126\1\134\1\60\1\135"+
    "\7\60\1\0\4\60\1\136\1\137\2\0\1\60\1\140"+
    "\3\60\1\141\1\60\1\0\2\60\11\0\3\60\20\0"+
    "\2\60\1\0\1\60\1\142\1\143\11\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\11\0\3\60\20\0\2\60"+
    "\1\0\1\60\1\0\6\60\1\144\2\60\1\145\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\11\0\3\60\20\0"+
    "\2\60\1\0\1\60\1\0\7\60\1\146\2\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\11\0\3\60\20\0"+
    "\2\60\1\0\1\60\1\0\11\60\1\147\1\150\1\151"+
    "\1\152\4\60\2\0\7\60\1\0\2\60\11\0\3\60"+
    "\20\0\2\60\1\0\1\60\1\0\7\60\1\153\1\60"+
    "\1\154\1\0\4\60\1\155\1\60\2\0\7\60\1\0"+
    "\2\60\11\0\3\60\20\0\2\60\1\0\1\60\1\117"+
    "\1\120\3\60\1\156\1\157\4\60\1\0\1\60\1\160"+
    "\4\60\2\0\7\60\1\0\2\60\11\0\3\60\20\0"+
    "\2\60\1\0\1\60\1\0\7\60\1\161\2\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\11\0\3\60\20\0"+
    "\2\60\1\0\1\60\1\0\5\60\1\162\4\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\11\0\3\60\20\0"+
    "\4\163\1\0\12\163\1\0\6\163\2\0\7\163\1\0"+
    "\2\163\1\0\1\163\4\0\1\164\2\0\3\163\21\0"+
    "\1\165\51\0\3\165\102\0\1\166\75\0\1\167\75\0"+
    "\1\170\75\0\1\171\75\0\1\172\4\0\1\173\76\0"+
    "\1\174\67\0\1\175\105\0\1\176\2\0\44\177\2\0"+
    "\26\177\1\200\1\177\1\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\0\6\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\61\1\0\1\61\1\0"+
    "\12\61\1\0\6\61\2\0\7\61\1\0\2\61\11\0"+
    "\3\61\20\0\1\203\1\204\1\0\1\203\1\0\12\203"+
    "\1\0\6\203\2\0\7\203\1\0\2\203\11\0\3\204"+
    "\1\203\17\0\2\60\1\201\1\60\1\0\12\60\1\0"+
    "\5\60\1\205\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\26\0\1\206\67\0\2\60\1\201\1\60"+
    "\1\0\1\60\1\207\10\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\4\60\1\210\5\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\20\0\2\60\1\201\1\60\1\0\4\60\1\211\5\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\6\60"+
    "\1\212\3\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\27\0\1\213\14\0\1\214"+
    "\51\0\2\60\1\201\1\60\1\0\2\60\1\215\7\60"+
    "\1\0\4\60\1\216\1\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\0\4\60\1\217\1\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\52\0\1\214"+
    "\43\0\2\60\1\201\1\60\1\0\12\60\1\0\6\60"+
    "\2\0\2\60\1\216\4\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\5\60"+
    "\1\220\4\60\1\0\5\60\1\76\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\7\60\1\221\2\60\1\0\1\60\1\222"+
    "\4\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\20\0\2\60\1\201\1\60\1\0\12\60\1\0"+
    "\6\60\2\0\1\60\1\223\5\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\10\60\1\224\1\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\3\60\1\225\6\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\37\0"+
    "\2\226\1\0\1\227\53\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\226\1\230\1\60\1\231\3\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\12\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\1\232\1\233\1\60"+
    "\20\0\2\60\1\201\1\60\1\0\12\60\1\0\2\60"+
    "\1\234\1\235\2\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\10\60\1\236\1\60\1\0\2\60\1\237\3\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\6\60\1\240\3\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\20\0\2\60\1\201\1\60\1\0\12\60\1\241"+
    "\1\220\5\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\7\60"+
    "\1\242\2\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\0\3\60\1\243\2\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\12\60\1\0\1\60\1\76\4\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\20\0\2\60\1\201\1\60\1\0\6\60\1\114\3\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\10\60"+
    "\1\244\1\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\50\0\1\245\45\0\2\60"+
    "\1\201\1\60\1\0\12\60\1\0\6\60\2\0\1\237"+
    "\6\60\1\0\2\60\1\202\1\201\7\0\3\60\27\0"+
    "\1\246\102\0\1\247\1\0\1\133\70\0\1\250\103\0"+
    "\2\251\61\0\2\252\111\0\1\253\54\0\2\60\1\201"+
    "\1\60\1\0\2\60\1\254\7\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\7\60\1\255\1\60\1\141"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\4\60"+
    "\1\256\5\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\251\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\252\1\257\11\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\12\60\1\0\1\60\1\260\4\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\42\0"+
    "\1\261\53\0\2\60\1\201\1\60\1\0\12\60\1\0"+
    "\2\60\1\262\3\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\263"+
    "\1\264\11\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\241\1\220\1\265\4\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\12\60\1\0\1\60\1\266\4\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\20\0\2\60\1\201\1\60\1\267\1\221\11\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\42\0\1\270\53\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\0\2\60\1\271\3\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\12\60\1\0\6\60\2\0\6\60\1\105"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\11\60\1\272\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\6\60\1\273\3\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\20\0\2\60\1\201\1\60\1\274\1\275\11\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\12\60"+
    "\1\0\6\60\2\0\1\60\1\276\5\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\277"+
    "\1\0\12\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\300\1\301\11\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\12\60\1\0\4\60\1\302\1\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\12\60\1\0\6\60\2\0"+
    "\1\303\6\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\21\0\1\304\51\0\3\304\17\0\44\173\2\0\30\173"+
    "\3\0\1\201\37\0\1\202\1\201\31\0\44\305\2\0"+
    "\1\306\27\305\1\0\2\203\1\0\1\203\1\0\12\203"+
    "\1\0\6\203\2\0\7\203\1\0\2\203\11\0\4\203"+
    "\17\0\1\203\1\307\1\0\1\203\1\0\12\203\1\0"+
    "\6\203\2\0\7\203\1\0\2\203\11\0\3\307\1\203"+
    "\17\0\2\60\1\201\1\60\1\0\2\60\1\220\7\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\27\0\1\310\66\0\2\60\1\201\1\60"+
    "\1\0\2\60\1\311\7\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\5\60\1\312\4\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\20\0\2\60\1\201\1\60\1\0\1\60\1\313\10\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\4\60"+
    "\1\314\5\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\41\0\1\315\65\0\1\316"+
    "\64\0\2\60\1\201\1\60\1\0\12\60\1\0\1\60"+
    "\1\317\4\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\4\60"+
    "\1\320\5\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\11\60\1\121\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\7\60\1\76\2\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\1\60\1\76\10\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\20\0\2\60\1\201\1\60\1\0\7\60\1\321"+
    "\2\60\1\0\6\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\1\60\1\105\10\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\7\60\1\322\2\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\7\60\1\323\2\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\27\0\1\324\112\0\1\325\51\0\2\60\1\201"+
    "\1\60\1\0\2\60\1\326\7\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\12\60\1\0\4\60\1\327"+
    "\1\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\20\0\2\60\1\201\1\60\1\0\12\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\2\60\1\330\20\0\2\60\1\201\1\60\1\0\12\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\1\331\1\332\1\60\20\0\2\60\1\201\1\60"+
    "\1\0\11\60\1\333\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\2\60\1\105\7\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\334\1\60\1\0\12\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\335\1\334\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\7\60\1\336\2\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\34\0\1\74\61\0\2\60\1\201\1\60\1\0"+
    "\1\60\1\236\10\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\7\60\1\337\2\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\12\60\1\0\1\60\1\340"+
    "\4\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\22\0\1\245\37\0\1\341\1\245\44\0\1\342"+
    "\115\0\1\343\55\0\1\344\72\0\1\345\75\0\1\346"+
    "\75\0\1\347\66\0\2\60\1\201\1\60\1\0\5\60"+
    "\1\350\4\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\0\6\60\2\0\2\60\1\351\4\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\5\60\1\352\4\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\20\0\2\60\1\201\1\60\1\0\2\60\1\353\7\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\2\60"+
    "\1\276\7\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\44\0\1\354\51\0\2\60"+
    "\1\201\1\60\1\0\12\60\1\0\4\60\1\236\1\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\50\0\1\355\45\0\2\60\1\201\1\60\1\0\12\60"+
    "\1\0\6\60\2\0\1\356\6\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\0\1\60\1\357\4\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\7\60\1\276\2\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\26\0"+
    "\1\74\120\0\1\360\44\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\0\6\60\2\0\1\60\1\361\5\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\12\60\1\0\6\60\2\0\2\60\1\362"+
    "\4\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\12\60\1\0\6\60\2\0"+
    "\7\60\1\363\1\105\1\60\1\202\1\201\7\0\3\60"+
    "\33\0\1\241\62\0\2\60\1\201\1\60\1\0\6\60"+
    "\1\220\3\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\6\60\1\364\3\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\53\0\1\365"+
    "\42\0\2\60\1\201\1\60\1\0\12\60\1\0\6\60"+
    "\2\0\3\60\1\366\3\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\367\1\370"+
    "\11\60\1\0\6\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\0\6\60\2\0\2\60\1\105\4\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\21\0\1\371\51\0"+
    "\3\371\65\0\1\347\30\0\1\203\1\372\1\0\1\203"+
    "\1\0\12\203\1\0\6\203\2\0\7\203\1\0\2\203"+
    "\11\0\3\372\1\203\45\0\1\373\47\0\2\60\1\201"+
    "\1\60\1\0\12\60\1\0\6\60\1\373\1\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\275\1\0\12\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\12\60\1\0\2\60\1\76\3\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\20\0\2\60\1\201\1\60\1\0\11\60\1\374\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\24\0\2\375\111\0\1\376\54\0\2\60\1\201"+
    "\1\60\1\375\1\211\11\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\12\60\1\0\1\60\1\374\4\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\20\0\2\60\1\201\1\60\1\0\11\60\1\377\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\20\0\2\60\1\201\1\60\1\0\1\60\1\u0100"+
    "\10\60\1\0\6\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\0\1\60\1\u0101\4\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\34\0\1\u0102\70\0"+
    "\1\u0103\66\0\2\60\1\201\1\60\1\0\7\60\1\u0104"+
    "\2\60\1\0\6\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\2\60\1\u0105\7\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\12\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\2\60\1\u0106\20\0\2\60"+
    "\1\201\1\60\1\0\2\60\1\u0107\7\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\22\0\1\334\37\0\1\335\1\334\31\0\44\u0108\2\0"+
    "\1\u0109\27\u0108\1\0\2\60\1\201\1\60\1\0\12\60"+
    "\1\0\1\60\1\120\4\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\0\6\60\2\0\2\60\1\374\4\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\7\60\1\u010a\2\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\17\0\44\u0108\2\0\30\u0108\17\0\1\u010b\62\0\1\u010c"+
    "\105\0\1\u010d\76\0\1\u010e\104\0\1\u010f\52\0\2\60"+
    "\1\201\1\60\1\0\11\60\1\u0110\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\u0111\1\0\12\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\6\60\1\u0112\3\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\20\0\2\60\1\201\1\60\1\0\12\60\1\0"+
    "\3\60\1\u0113\2\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\27\0\1\363\71\0\1\363\72\0"+
    "\2\60\1\201\1\105\1\0\12\60\1\0\6\60\2\0"+
    "\7\60\1\0\2\60\1\202\1\201\7\0\3\60\20\0"+
    "\2\60\1\201\1\60\1\0\12\60\1\0\5\60\1\105"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\36\0\1\u0114\57\0\2\60\1\201\1\60\1\0\11\60"+
    "\1\u0115\1\0\6\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\4\60\1\u0116\5\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\u0117\1\u0118\11\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\36\0\1\u0119"+
    "\57\0\2\60\1\201\1\60\1\0\11\60\1\205\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\43\0\1\u011a\52\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\0\3\60\1\u011b\2\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\21\0\1\u011c\51\0"+
    "\3\u011c\20\0\1\203\1\u011d\1\0\1\203\1\0\12\203"+
    "\1\0\6\203\2\0\7\203\1\0\2\203\11\0\3\u011d"+
    "\1\203\46\0\1\74\46\0\2\60\1\201\1\60\1\0"+
    "\2\60\1\76\7\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\26\0\1\u011e\76\0"+
    "\1\74\66\0\2\60\1\201\1\60\1\0\3\60\1\u011f"+
    "\6\60\1\0\6\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\u0120\1\u0121\5\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\0\6\60\2\0\7\60\1\0\1\60"+
    "\1\u0122\1\202\1\201\7\0\3\60\26\0\1\u0123\106\0"+
    "\2\245\55\0\2\60\1\201\1\60\1\0\1\60\1\u0124"+
    "\10\60\1\0\6\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\245\1\237\5\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\u0125\1\u0126\11\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\65\0\1\u0127\30\0"+
    "\2\60\1\201\1\60\1\0\3\60\1\105\6\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\27\0\1\u0128\113\0\1\u0129\60\0\1\u012a\115\0"+
    "\1\u012b\71\0\1\74\51\0\2\60\1\201\1\60\1\0"+
    "\2\60\1\u012c\7\60\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\20\0\2\60\1\201"+
    "\1\60\1\0\12\60\1\0\5\60\1\u012d\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\3\60\1\u012e\6\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\20\0\2\60\1\201\1\60\1\0\12\60\1\0\4\60"+
    "\1\76\1\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\41\0\1\u012f\54\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\0\1\60\1\u0130\4\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\1\60\1\237\10\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\43\0\1\74\52\0\2\60\1\201\1\60\1\0\12\60"+
    "\1\0\3\60\1\76\2\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\27\0\1\241\101\0\1\u0131"+
    "\62\0\2\60\1\201\1\60\1\0\6\60\1\u0132\3\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\21\0\1\u0133\51\0\3\u0133\20\0\1\203"+
    "\1\u0134\1\0\1\203\1\0\12\203\1\0\6\203\2\0"+
    "\7\203\1\0\2\203\11\0\3\u0134\1\203\41\0\1\74"+
    "\53\0\2\60\1\201\1\60\1\u0135\1\u0136\11\60\1\347"+
    "\1\276\5\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\24\0\2\u0137\6\0\1\u0138\61\0\2\60"+
    "\1\201\1\60\1\u0137\1\u0139\6\60\1\u013a\2\60\1\0"+
    "\6\60\2\0\7\60\1\0\2\60\1\202\1\201\7\0"+
    "\3\60\20\0\2\60\1\201\1\60\1\0\11\60\1\u013b"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\34\0\1\u013c\61\0\2\60\1\201\1\60"+
    "\1\0\7\60\1\u013d\2\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\31\0\1\u013e"+
    "\64\0\2\60\1\201\1\60\1\0\4\60\1\u013f\5\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\24\0\2\u0140\107\0\2\u0141\71\0\1\u0142"+
    "\75\0\1\u0143\61\0\2\60\1\201\1\60\1\u0140\1\u0144"+
    "\11\60\1\0\6\60\2\0\7\60\1\0\2\60\1\202"+
    "\1\201\7\0\3\60\20\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\u0141\1\u0145\5\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\7\60\1\u0146\2\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\26\0\1\315"+
    "\67\0\2\60\1\201\1\60\1\0\1\60\1\317\10\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\34\0\1\245\61\0\2\60\1\201\1\60"+
    "\1\0\7\60\1\237\2\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\21\0\1\u0147"+
    "\51\0\3\u0147\20\0\1\203\1\u0148\1\0\1\203\1\0"+
    "\12\203\1\0\6\203\2\0\7\203\1\0\2\203\11\0"+
    "\3\u0148\1\203\25\0\1\u0149\67\0\2\60\1\201\1\60"+
    "\1\0\1\60\1\u014a\10\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\53\0\1\u014b"+
    "\42\0\2\60\1\201\1\60\1\0\12\60\1\0\6\60"+
    "\2\0\3\60\1\266\3\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\2\60"+
    "\1\u014c\7\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\41\0\1\363\54\0\2\60"+
    "\1\201\1\60\1\0\12\60\1\0\1\60\1\105\4\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\26\0\1\347\67\0\2\60\1\201\1\60\1\0\1\60"+
    "\1\276\10\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\31\0\1\u014d\73\0\1\u014e"+
    "\107\0\1\245\75\0\1\u014f\54\0\2\60\1\201\1\60"+
    "\1\0\4\60\1\u0150\5\60\1\0\6\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\2\60\1\u0151\7\60\1\0\6\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\20\0\2\60\1\201\1\60\1\0\12\60\1\0\1\60"+
    "\1\237\4\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\42\0\1\u0138\53\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\0\2\60\1\u013a\3\60\2\0\7\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\34\0\1\347"+
    "\61\0\2\60\1\201\1\60\1\0\2\60\1\u0152\7\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\26\0\1\u0153\103\0\1\u0154\102\0\1\u0155"+
    "\54\0\2\60\1\201\1\60\1\0\1\60\1\u0156\10\60"+
    "\1\0\6\60\2\0\7\60\1\0\2\60\1\202\1\201"+
    "\7\0\3\60\20\0\2\60\1\201\1\60\1\0\7\60"+
    "\1\u0157\2\60\1\0\6\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\11\60\1\u0158\1\0\6\60\2\0\7\60\1\0"+
    "\2\60\1\202\1\201\7\0\3\60\37\0\2\u0138\107\0"+
    "\1\117\54\0\1\u0159\64\0\2\60\1\201\1\60\1\0"+
    "\12\60\1\u0138\1\u013a\5\60\2\0\7\60\1\0\2\60"+
    "\1\202\1\201\7\0\3\60\20\0\2\60\1\201\1\60"+
    "\1\0\12\60\1\0\6\60\2\0\2\60\1\120\4\60"+
    "\1\0\2\60\1\202\1\201\7\0\3\60\20\0\2\60"+
    "\1\201\1\60\1\0\12\60\1\0\3\60\1\273\2\60"+
    "\2\0\7\60\1\0\2\60\1\202\1\201\7\0\3\60"+
    "\41\0\1\u015a\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18724];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\24\1\5\11\1\1\1\11"+
    "\1\1\3\11\1\1\1\11\10\1\1\11\2\1\1\0"+
    "\1\1\1\0\4\1\1\0\2\1\1\11\1\0\10\1"+
    "\1\0\10\1\1\11\4\1\1\0\1\1\6\0\6\1"+
    "\1\0\5\1\1\0\12\1\1\0\1\11\1\1\5\11"+
    "\1\1\3\11\1\0\1\1\2\0\3\1\1\0\4\1"+
    "\2\0\11\1\2\0\11\1\1\0\3\1\7\0\5\1"+
    "\1\0\1\1\1\0\3\1\2\0\3\1\1\0\3\1"+
    "\1\0\4\1\1\0\7\1\2\0\6\1\1\0\6\1"+
    "\2\0\3\1\6\0\1\11\4\1\2\0\2\1\1\0"+
    "\2\1\1\11\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\2\0\3\1\2\0\4\1\1\0\2\1\5\0"+
    "\4\1\1\0\2\1\1\0\1\1\2\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\4\0\3\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\11\3\1\1\0\1\1\1\0\1\1\4\0"+
    "\5\1\1\0\1\1\1\0\1\1\3\0\3\1\3\0"+
    "\3\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 48: break;
          case 2: 
            { lexeme=yytext(); return VAR;
            }
          case 49: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 50: break;
          case 4: 
            { /*Ignore*/
            }
          case 51: break;
          case 5: 
            { return PARENTESISI;
            }
          case 52: break;
          case 6: 
            { return PARENTESISD;
            }
          case 53: break;
          case 7: 
            { return DIRECTIVAS;
            }
          case 54: break;
          case 8: 
            { return MODULO;
            }
          case 55: break;
          case 9: 
            { lexeme=yytext(); return ANGLED;
            }
          case 56: break;
          case 10: 
            { lexeme=yytext(); return ANGLEI;
            }
          case 57: break;
          case 11: 
            { lexeme=yytext(); return EXPO;
            }
          case 58: break;
          case 12: 
            { return PUNTO;
            }
          case 59: break;
          case 13: 
            { return COMA;
            }
          case 60: break;
          case 14: 
            { return INICIOB;
            }
          case 61: break;
          case 15: 
            { return FINALB;
            }
          case 62: break;
          case 16: 
            { lexeme=yytext(); return ASIGNACION;
            }
          case 63: break;
          case 17: 
            { return SUMA;
            }
          case 64: break;
          case 18: 
            { return MULTIPLICACION;
            }
          case 65: break;
          case 19: 
            { return RESTA;
            }
          case 66: break;
          case 20: 
            { return DIVISION;
            }
          case 67: break;
          case 21: 
            { return ASPERSON;
            }
          case 68: break;
          case 22: 
            { return NOT;
            }
          case 69: break;
          case 23: 
            { return COMILLAD;
            }
          case 70: break;
          case 24: 
            { return COMILLAS;
            }
          case 71: break;
          case 25: 
            { lexeme=yytext(); return PR;
            }
          case 72: break;
          case 26: 
            { lexeme=yytext(); return EVENTO;
            }
          case 73: break;
          case 27: 
            { lexeme=yytext(); return CONS;
            }
          case 74: break;
          case 28: 
            { lexeme=yytext(); return HTML;
            }
          case 75: break;
          case 29: 
            { lexeme=yytext(); return FLOAT;
            }
          case 76: break;
          case 30: 
            { return COMPARACION;
            }
          case 77: break;
          case 31: 
            { return SUMAM;
            }
          case 78: break;
          case 32: 
            { return MULTIPLICACIONM;
            }
          case 79: break;
          case 33: 
            { return RESTAM;
            }
          case 80: break;
          case 34: 
            { return DIVISIONM;
            }
          case 81: break;
          case 35: 
            { lexeme=yytext(); return COMENTARIO;
            }
          case 82: break;
          case 36: 
            { return AND;
            }
          case 83: break;
          case 37: 
            { return DIFERENTE;
            }
          case 84: break;
          case 38: 
            { return OR;
            }
          case 85: break;
          case 39: 
            { lexeme=yytext(); return TEXTO;
            }
          case 86: break;
          case 40: 
            { lexeme=yytext(); return LN2;
            }
          case 87: break;
          case 41: 
            { lexeme=yytext(); return FUNCION;
            }
          case 88: break;
          case 42: 
            { lexeme=yytext(); return LN10;
            }
          case 89: break;
          case 43: 
            { lexeme=yytext(); return LOG2;
            }
          case 90: break;
          case 44: 
            { lexeme=yytext(); return LOG10;
            }
          case 91: break;
          case 45: 
            { lexeme=yytext(); return OBJETO;
            }
          case 92: break;
          case 46: 
            { lexeme=yytext(); return LIB;
            }
          case 93: break;
          case 47: 
            { lexeme=yytext(); return DOUBLE;
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
