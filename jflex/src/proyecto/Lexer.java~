/* The following code was generated by JFlex 1.6.1 */

<<<<<<< HEAD
package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Administardor/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\47\1\50\1\50\1\47\22\0\1\3\1\70\1\75"+
    "\2\0\1\53\1\67\1\76\1\46\1\51\1\65\1\64\1\57\1\66"+
    "\1\56\1\71\12\2\1\63\1\0\1\55\1\62\1\54\1\0\1\52"+
    "\1\1\1\34\3\1\1\31\2\1\1\30\3\1\1\35\2\1\1\27"+
    "\1\1\1\74\1\32\3\1\1\36\3\1\1\25\1\0\1\26\1\72"+
    "\1\45\1\0\1\16\1\4\1\22\1\10\1\14\1\15\1\21\1\23"+
    "\1\5\1\43\1\44\1\13\1\37\1\6\1\11\1\33\1\1\1\20"+
    "\1\17\1\7\1\12\1\40\1\42\1\41\1\24\1\1\1\60\1\73"+
    "\1\61\7\0\1\50\u1fa2\0\1\50\1\50\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\26\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\2"+
    "\1\27\1\2\1\30\1\31\2\3\1\0\1\2\1\32"+
    "\7\3\1\33\3\3\1\33\2\3\1\34\20\3\1\35"+
    "\14\3\1\0\1\36\1\37\1\40\1\0\1\41\1\42"+
    "\1\4\1\43\1\44\1\45\1\46\1\47\1\0\1\50"+
    "\2\0\1\51\45\3\1\0\1\52\1\33\12\3\2\0"+
    "\15\3\1\52\1\0\6\3\1\0\1\52\11\3\1\33"+
    "\4\3\1\53\6\3\1\54\15\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\77\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\77\0\77\0\77\0\77\0\77"+
    "\0\u0666\0\u06a5\0\77\0\77\0\77\0\u06e4\0\77\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\77\0\u089d\0\u08dc"+
    "\0\77\0\u091b\0\u095a\0\u0999\0\u09d8\0\u06a5\0\u0a17\0\u0a56"+
    "\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u091b\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u091b\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u091b\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371"+
    "\0\u13b0\0\u13ef\0\u0666\0\77\0\77\0\77\0\u142e\0\77"+
    "\0\77\0\u146d\0\77\0\77\0\77\0\77\0\77\0\u08dc"+
    "\0\u08dc\0\u14ac\0\u14eb\0\u0999\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"+
    "\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\77\0\u24ea\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26a3\0\u26e2"+
    "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\77\0\u2919\0\u2958\0\u2997\0\u29d6\0\77\0\u2a15\0\u2a54"+
    "\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u091b\0\u2b8f\0\u2bce\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05"+
    "\0\u2e44\0\u2e83";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\22\1\3\2\2\1\23\1\3"+
    "\1\24\1\25\1\26\1\3\1\27\1\3\1\30\1\31"+
    "\1\3\1\32\1\33\2\3\1\34\1\5\1\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\3\1\60\1\61\100\0\1\62\1\63"+
    "\1\0\21\62\2\0\17\62\10\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\65\1\4\1\0\21\65\2\0"+
    "\17\65\10\0\1\66\15\0\1\65\3\0\1\62\1\63"+
    "\1\0\1\67\1\70\2\62\1\71\2\62\1\72\1\62"+
    "\1\73\1\62\1\74\2\62\1\75\2\62\2\0\17\62"+
    "\10\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\0\11\62\1\76\7\62\2\0\10\62\1\77"+
    "\6\62\10\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\0\14\62\1\100\2\62\1\101\1\62"+
    "\2\0\17\62\10\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\0\5\62\1\102\2\62\1\103"+
    "\10\62\2\0\17\62\10\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\0\2\62\1\104\16\62"+
    "\2\0\4\62\1\105\12\62\10\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\0\1\62\1\106"+
    "\6\62\1\107\10\62\2\0\17\62\10\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\0\6\62"+
    "\1\110\1\111\11\62\2\0\11\62\1\112\1\113\4\62"+
    "\10\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\0\5\62\1\114\4\62\1\115\6\62\2\0"+
    "\17\62\10\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\0\7\62\1\116\3\62\2\117\4\62"+
    "\2\0\17\62\10\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\0\1\62\1\120\15\62\1\121"+
    "\1\62\2\0\17\62\10\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\0\1\62\1\122\17\62"+
    "\2\0\17\62\10\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\0\7\62\1\123\2\62\1\124"+
    "\6\62\2\0\17\62\10\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\0\10\62\1\125\10\62"+
    "\2\0\17\62\10\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\0\21\62\2\0\1\62\1\76"+
    "\15\62\10\0\1\64\4\0\1\64\10\0\1\126\3\0"+
    "\1\62\1\63\1\0\1\62\1\76\17\62\2\0\17\62"+
    "\10\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\0\3\62\1\127\15\62\2\0\13\62\1\130"+
    "\3\62\10\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\0\6\62\1\131\5\62\1\132\4\62"+
    "\2\0\17\62\10\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\0\13\62\1\133\5\62\2\0"+
    "\17\62\10\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\0\12\62\1\134\1\62\1\135\4\62"+
    "\2\0\17\62\10\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\0\10\62\1\136\10\62\2\0"+
    "\17\62\10\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\0\10\62\1\137\1\62\1\140\4\62"+
    "\1\141\1\62\2\0\17\62\10\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\0\6\62\1\142"+
    "\12\62\2\0\17\62\10\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\24\143\2\0\17\143\1\0\1\143\4\0"+
    "\1\144\17\0\1\143\4\0\1\66\156\0\1\145\76\0"+
    "\1\146\15\0\24\147\2\0\17\147\1\0\1\147\12\0"+
    "\1\150\2\0\1\151\6\0\1\147\4\0\1\152\53\0"+
    "\1\66\3\0\1\153\103\0\1\154\71\0\1\155\76\0"+
    "\1\156\107\0\1\157\3\0\47\160\2\0\24\160\1\161"+
    "\1\160\1\0\1\62\1\63\1\162\21\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\2\63\1\162\21\63\2\0\17\63\1\163\1\162"+
    "\24\0\1\63\3\0\1\164\2\0\21\164\2\0\17\164"+
    "\26\0\1\164\3\0\2\65\1\0\21\65\2\0\17\65"+
    "\26\0\1\65\3\0\1\62\1\63\1\162\20\62\1\165"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\2\62\1\166"+
    "\16\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\5\62"+
    "\1\167\13\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\5\62\1\170\13\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\7\62\1\171\11\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\3\62\1\172\13\62\1\173\1\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\17\62\1\174\1\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\21\62\2\0"+
    "\4\62\1\173\12\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\6\62"+
    "\1\175\11\62\1\76\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\10\62\1\176\3\62\1\177\4\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\21\62\2\0\13\62\1\200"+
    "\3\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\11\62\1\201\7\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\4\62\1\202"+
    "\14\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\13\62"+
    "\1\203\1\62\1\204\3\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\11\62\1\205\3\62\1\206\3\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\7\62\1\207\11\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\13\62\1\175"+
    "\5\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\10\62"+
    "\1\210\10\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\16\62\1\211\2\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\14\62\1\76\4\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\7\62\1\111\11\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\11\62\1\212\7\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\21\62\2\0\10\62\1\206"+
    "\6\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\3\62\1\213\15\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\5\62\1\214"+
    "\13\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\15\62"+
    "\1\215\3\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\1\62\1\216\17\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\13\62\1\175\1\217\4\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\14\62\1\175\4\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\10\62\1\220\10\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\1\62\1\221\17\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\1\222\20\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\1\62\1\223"+
    "\17\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\15\62"+
    "\1\224\3\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\1\62\1\176\17\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\21\62\2\0\14\62\1\105\2\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\17\62\1\225\1\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\12\62\1\226\6\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\7\62\1\227\11\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\1\62\1\230\17\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\21\62\2\0"+
    "\10\62\1\231\6\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\24\147\2\0\17\147\1\0"+
    "\1\147\15\0\1\151\6\0\1\147\4\0\1\152\53\0"+
    "\1\66\23\0\1\162\42\0\1\163\1\162\27\0\47\232"+
    "\2\0\1\233\25\232\1\0\1\62\1\63\1\162\3\62"+
    "\1\175\15\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\3\62\1\234\15\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\6\62\1\235\12\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\2\62\1\236\16\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\5\62\1\237\13\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\14\62\1\240\4\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\5\62\1\241\13\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\12\62\1\114"+
    "\6\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\10\62"+
    "\1\76\10\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\2\62\1\76\16\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\10\62\1\242\10\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\2\62\1\105\16\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\10\62\1\243\10\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\10\62\1\244\10\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\3\62\1\245\15\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\17\62\1\246"+
    "\1\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\3\62"+
    "\1\105\15\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\247"+
    "\21\62\2\0\17\62\1\250\1\247\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\10\62"+
    "\1\114\10\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\2\62\1\205\16\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\10\62\1\251\10\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\14\62\1\252\4\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\6\62\1\253\12\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\6\62\1\254\12\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\17\62\1\205\1\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\21\62\2\0"+
    "\10\62\1\255\6\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\14\62"+
    "\1\256\4\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\21\62\2\0\4\62\1\257\12\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\3\62\1\260\15\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\7\62\1\261\11\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\21\62\2\0\11\62\1\262\5\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\21\62\2\0\7\62\1\263"+
    "\7\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\1\62\1\264\17\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\21\62\2\0"+
    "\4\62\1\265\12\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\21\62"+
    "\2\0\15\62\1\105\1\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\7\62\1\175\11\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\21\62\2\0\4\62\1\105\12\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\53\0\1\266"+
    "\26\0\1\62\1\63\1\162\21\62\1\267\1\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\1\230\20\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\15\62\1\76\3\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\12\62\1\270\6\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\1\62\1\170"+
    "\17\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\14\62"+
    "\1\270\4\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\12\62\1\271\6\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\2\62\1\272\16\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\14\62\1\273\4\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\10\62\1\274\10\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\3\62\1\275\15\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\5\0\1\247\42\0\1\250\1\247\27\0\47\276"+
    "\2\0\1\277\25\276\1\0\1\62\1\63\1\162\21\62"+
    "\2\0\4\62\1\270\12\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\10\62\1\300\10\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\12\62\1\301\6\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\7\62\1\302\11\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\1\105\20\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\20\62\1\105\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\21\62\2\0\5\62\1\303\11\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\16\62\1\304\2\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\1\62\1\305\17\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\12\62\1\165"+
    "\6\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\12\62"+
    "\1\306\6\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\16\62\1\307\2\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\5\62\1\310\13\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\30\0\1\311"+
    "\51\0\1\62\1\63\1\162\3\62\1\76\15\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\4\62\1\312\14\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\13\62\1\313"+
    "\5\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\21\62"+
    "\2\0\16\62\1\314\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\2\62"+
    "\1\315\16\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\13\62\1\206\5\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\53\0\1\316\26\0"+
    "\1\62\1\63\1\162\4\62\1\105\14\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\3\62\1\317\15\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\4\62\1\320\14\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\20\62\1\321"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\17\62\1\76"+
    "\1\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\16\62"+
    "\1\76\2\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\14\62\1\322\4\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\7\62\1\323\11\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\2\62\1\206\16\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\1\62\1\324\17\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\10\62\1\325\10\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\12\62\1\326\6\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\10\62\1\327"+
    "\10\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\1\62"+
    "\1\330\17\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\10\62\1\331\10\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\21\62\2\0\3\62\1\332\13\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\2\62\1\240\16\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\10\62\1\206\10\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\2\62\1\333\16\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\3\62\1\334\15\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\14\62\1\105"+
    "\4\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\5\62"+
    "\1\335\13\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\14\62\1\206\4\62\2\0\17\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\3\62\1\336\15\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\3\0\1\62"+
    "\1\63\1\162\15\62\1\325\3\62\2\0\17\62\1\163"+
    "\1\162\6\0\1\64\4\0\1\64\10\0\1\62\3\0"+
    "\1\62\1\63\1\162\3\62\1\337\15\62\2\0\17\62"+
    "\1\163\1\162\6\0\1\64\4\0\1\64\10\0\1\62"+
    "\3\0\1\62\1\63\1\162\2\62\1\340\16\62\2\0"+
    "\17\62\1\163\1\162\6\0\1\64\4\0\1\64\10\0"+
    "\1\62\3\0\1\62\1\63\1\162\10\62\1\341\10\62"+
    "\2\0\17\62\1\163\1\162\6\0\1\64\4\0\1\64"+
    "\10\0\1\62\3\0\1\62\1\63\1\162\12\62\1\342"+
    "\6\62\2\0\17\62\1\163\1\162\6\0\1\64\4\0"+
    "\1\64\10\0\1\62\3\0\1\62\1\63\1\162\13\62"+
    "\1\325\5\62\2\0\17\62\1\163\1\162\6\0\1\64"+
    "\4\0\1\64\10\0\1\62\3\0\1\62\1\63\1\162"+
    "\21\62\2\0\4\62\1\76\12\62\1\163\1\162\6\0"+
    "\1\64\4\0\1\64\10\0\1\62\3\0\1\62\1\63"+
    "\1\162\16\62\1\227\2\62\2\0\17\62\1\163\1\162"+
    "\6\0\1\64\4\0\1\64\10\0\1\62\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11970];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\26\1\5\11\2\1\3\11"+
    "\1\1\1\11\6\1\1\11\2\1\1\11\2\1\1\0"+
    "\56\1\1\0\3\11\1\0\2\11\1\1\5\11\1\0"+
    "\1\1\2\0\46\1\1\0\14\1\2\0\15\1\1\11"+
    "\1\0\6\1\1\0\12\1\1\11\4\1\1\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return DIVISION;
            }
          case 45: break;
          case 2: 
            { lexeme=yytext(); return ERROR;
            }
          case 46: break;
          case 3: 
            { lexeme=yytext(); return VAR;
            }
          case 47: break;
          case 4: 
            { lexeme=yytext(); return INT;
            }
          case 48: break;
          case 5: 
            { /*Ignore*/
            }
          case 49: break;
          case 6: 
            { return PARENTESISI;
            }
          case 50: break;
          case 7: 
            { return PARENTESISD;
            }
          case 51: break;
          case 8: 
            { return DIRECTIVAS;
            }
          case 52: break;
          case 9: 
            { return MODULO;
            }
          case 53: break;
          case 10: 
            { return ANGLED;
            }
          case 54: break;
          case 11: 
            { return ANGLEI;
            }
          case 55: break;
          case 12: 
            { return PUNTO;
            }
          case 56: break;
          case 13: 
            { return COMA;
            }
          case 57: break;
          case 14: 
            { return INICIOB;
            }
          case 58: break;
          case 15: 
            { return FINALB;
            }
          case 59: break;
          case 16: 
            { return ASIGNACION;
            }
          case 60: break;
          case 17: 
            { return DOSP;
            }
          case 61: break;
          case 18: 
            { return SUMA;
            }
          case 62: break;
          case 19: 
            { return MULTIPLICACION;
            }
          case 63: break;
          case 20: 
            { return RESTA;
            }
          case 64: break;
          case 21: 
            { return ASPERSON;
            }
          case 65: break;
          case 22: 
            { return NOT;
            }
          case 66: break;
          case 23: 
            { return POW;
            }
          case 67: break;
          case 24: 
            { return COMILLAD;
            }
          case 68: break;
          case 25: 
            { return COMILLAS;
            }
          case 69: break;
          case 26: 
            { lexeme=yytext(); return FLOAT;
            }
          case 70: break;
          case 27: 
            { lexeme=yytext(); return PR;
            }
          case 71: break;
          case 28: 
            { lexeme=yytext(); return EVENTO;
            }
          case 72: break;
          case 29: 
            { return PR;
            }
          case 73: break;
          case 30: 
            { lexeme=yytext(); return HTML;
            }
          case 74: break;
          case 31: 
            { return COMPARACION;
            }
          case 75: break;
          case 32: 
            { return SUMAM;
            }
          case 76: break;
          case 33: 
            { return MULTIPLICACIONM;
            }
          case 77: break;
          case 34: 
            { lexeme=yytext(); return COMENTARIO;
            }
          case 78: break;
          case 35: 
            { return RESTAM;
            }
          case 79: break;
          case 36: 
            { return AND;
            }
          case 80: break;
          case 37: 
            { return DIFERENTE;
            }
          case 81: break;
          case 38: 
            { return DIVISIONM;
            }
          case 82: break;
          case 39: 
            { return OR;
            }
          case 83: break;
          case 40: 
            { lexeme=yytext(); return TEXTO;
            }
          case 84: break;
          case 41: 
            { lexeme=yytext(); return OPERA;
            }
          case 85: break;
          case 42: 
            { lexeme=yytext(); return FUNCION;
            }
          case 86: break;
          case 43: 
            { lexeme=yytext(); return OBJETO;
            }
          case 87: break;
          case 44: 
            { lexeme=yytext(); return LIB;
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
