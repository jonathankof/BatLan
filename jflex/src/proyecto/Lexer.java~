/* The following code was generated by JFlex 1.6.1 */

package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Administardor/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\44\1\45\1\45\1\44\22\0\1\3\1\70\1\72"+
    "\2\0\1\50\1\67\1\73\1\43\1\46\1\4\1\65\1\60\1\66"+
    "\1\57\1\5\1\56\1\55\1\54\7\2\1\64\1\0\1\52\1\63"+
    "\1\51\1\0\1\47\1\21\1\6\1\26\1\13\1\17\1\20\1\25"+
    "\1\27\1\10\1\37\1\41\1\16\1\31\1\11\1\14\1\33\1\36"+
    "\1\24\1\23\1\12\1\15\1\34\1\32\1\35\1\30\1\1\1\74"+
    "\1\0\1\75\1\53\1\42\1\0\1\21\1\6\1\26\1\13\1\17"+
    "\1\20\1\25\1\27\1\10\1\37\1\41\1\16\1\31\1\11\1\14"+
    "\1\33\1\36\1\24\1\23\1\12\1\15\1\34\1\32\1\35\1\30"+
    "\1\1\1\61\1\71\1\62\7\0\1\45\252\0\2\7\115\0\1\22"+
    "\u1ea8\0\1\45\1\45\u0100\0\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\1\10\2\1\1\11\2\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\2\22\1\23\1\24\1\25\1\26\1\1\1\27\1\30"+
    "\2\0\2\2\2\1\1\0\1\31\1\32\1\33\1\34"+
    "\1\2\1\0\4\2\1\0\2\2\1\31\1\0\1\31"+
    "\3\2\1\31\2\2\1\35\1\0\10\2\2\36\3\2"+
    "\1\0\1\2\6\0\6\2\1\0\5\2\1\0\12\2"+
    "\2\0\1\37\1\1\1\40\1\1\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\3\0\1\47\3\0\1\1\2\0"+
    "\2\33\1\2\1\0\4\2\2\0\11\2\2\0\2\2"+
    "\1\50\6\2\1\0\3\2\7\0\5\2\1\0\1\2"+
    "\1\0\3\2\2\0\3\2\1\0\1\2\1\51\1\2"+
    "\1\0\3\2\1\0\1\40\1\1\1\31\4\0\1\51"+
    "\1\52\1\1\1\0\1\31\1\33\2\31\3\2\2\0"+
    "\5\2\1\51\1\0\1\51\1\2\1\53\1\54\2\2"+
    "\2\0\3\2\6\0\1\51\4\2\2\0\2\2\1\0"+
    "\2\2\1\35\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\40\1\1\2\0\1\47\1\0\1\31\1\0\3\33"+
    "\2\0\1\2\3\0\1\2\1\55\1\2\2\0\4\2"+
    "\2\0\2\2\1\56\1\2\3\0\1\51\2\2\5\0"+
    "\4\2\2\35\1\0\2\2\1\0\1\2\2\0\1\2"+
    "\1\31\1\40\1\31\1\0\1\31\1\1\1\31\1\33"+
    "\1\31\2\0\1\51\1\52\1\0\2\2\1\0\2\2"+
    "\1\0\1\2\1\0\1\2\1\57\1\60\4\0\3\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\37\1\40\1\1"+
    "\3\0\1\47\3\33\1\51\1\0\1\2\1\0\1\61"+
    "\1\2\1\61\1\2\1\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\62\2\31\1\0\1\2\1\0\1\2\3\0"+
    "\2\2\1\0\1\47\1\33\1\2\3\0\3\2\1\0"+
    "\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\u064c\0\76\0\u068a\0\76\0\76\0\76\0\u06c8"+
    "\0\76\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\76"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u068a\0\u09ee"+
    "\0\76\0\u0a2c\0\76\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\76\0\u0c98\0\u08f6\0\u0cd6"+
    "\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u08f6\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\76"+
    "\0\u08f6\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u064c\0\u18b4\0\76\0\u18f2\0\u1930"+
    "\0\u196e\0\76\0\76\0\76\0\76\0\76\0\76\0\u083c"+
    "\0\u19ac\0\u19ea\0\u083c\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u09ee"+
    "\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2"+
    "\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2"+
    "\0\u08f6\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264"+
    "\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u08f6\0\u296a\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u2bd6\0\76\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a"+
    "\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a"+
    "\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a"+
    "\0\u08f6\0\u08f6\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e"+
    "\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\76"+
    "\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640"+
    "\0\u367e\0\u36bc\0\u36fa\0\76\0\u3738\0\u3776\0\u37b4\0\u37f2"+
    "\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u2b5a\0\u3928\0\u2b5a\0\u3966"+
    "\0\u39a4\0\u39e2\0\u2d0c\0\u3a20\0\u3a5e\0\u2d88\0\u3a9c\0\u2dc6"+
    "\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u08f6\0\u3bd2\0\u3c10\0\u3c4e"+
    "\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e"+
    "\0\u08f6\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3eba\0\u3f74\0\u3fb2"+
    "\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2"+
    "\0\u41e0\0\u08b8\0\u0934\0\u421e\0\u425c\0\u429a\0\u42d8\0\u4316"+
    "\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u44c8\0\u4506"+
    "\0\u39a4\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u45fe\0\u2d88"+
    "\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c"+
    "\0\u486a\0\u48a8\0\76\0\u08f6\0\u48e6\0\u4924\0\u4962\0\u49a0"+
    "\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u440e"+
    "\0\u2d88\0\u4b90\0\u448a\0\u4bce\0\u4506\0\u4c0c\0\u4506\0\u4c4a"+
    "\0\u45c0\0\u4c88\0\u2d88\0\u4cc6\0\u4d04\0\u4d42\0\76\0\u4d80"+
    "\0\u08f6\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4\0\u4f32"+
    "\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068\0\u4b90\0\u50a6\0\u50e4"+
    "\0\u5122\0\u5160\0\u519e\0\u51dc\0\u521a\0\u5258\0\u5296\0\u52d4"+
    "\0\u5312\0\u50a6\0\u50a6\0\u50e4\0\u5350\0\u538e\0\u53cc\0\u540a"+
    "\0\u5448\0\u5486\0\u54c4\0\u5502\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\3\1\25\1\26"+
    "\1\3\1\27\1\30\1\31\1\32\2\3\1\33\1\2"+
    "\2\3\1\34\1\5\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\3\4\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\2\2\4\35\1\61\1\35\1\62\70\35\2\63\1\35"+
    "\1\61\1\35\1\64\1\35\12\63\1\35\15\63\1\35"+
    "\2\63\11\35\3\63\20\35\1\65\1\4\1\35\1\61"+
    "\1\35\1\66\1\35\12\65\1\35\15\65\1\35\2\65"+
    "\11\35\3\4\1\67\22\35\1\61\1\70\1\62\54\35"+
    "\1\71\16\35\1\61\1\72\1\62\54\35\1\73\13\35"+
    "\2\63\1\35\1\61\1\35\1\74\1\75\1\76\2\63"+
    "\1\77\2\63\1\100\1\63\1\101\1\63\1\102\1\103"+
    "\2\63\1\104\11\63\1\35\2\63\11\35\3\63\23\35"+
    "\1\61\1\35\1\62\11\35\1\105\10\35\1\106\45\35"+
    "\2\63\1\35\1\61\1\35\1\64\1\35\10\63\1\107"+
    "\1\63\1\35\6\63\1\110\6\63\1\35\2\63\11\35"+
    "\3\63\20\35\2\63\1\35\1\61\1\35\1\64\1\35"+
    "\12\63\1\35\1\63\1\111\2\63\1\112\10\63\1\35"+
    "\2\63\11\35\3\63\20\35\2\63\1\35\1\61\1\35"+
    "\1\64\1\35\4\63\1\113\2\63\1\114\2\63\1\35"+
    "\15\63\1\35\2\63\11\35\3\63\20\35\2\63\1\35"+
    "\1\61\1\35\1\64\1\35\1\63\1\115\10\63\1\35"+
    "\10\63\1\116\4\63\1\35\2\63\11\35\3\63\20\35"+
    "\2\63\1\35\1\61\1\35\1\64\1\117\1\120\1\121"+
    "\2\63\1\122\2\63\1\123\2\63\1\35\15\63\1\35"+
    "\2\63\11\35\3\63\20\35\2\63\1\35\1\61\1\35"+
    "\1\64\1\35\5\63\1\124\1\125\3\63\1\35\11\63"+
    "\1\126\1\127\2\63\1\35\2\63\11\35\3\63\20\35"+
    "\2\63\1\35\1\61\1\35\1\64\1\130\1\131\3\63"+
    "\1\132\4\63\1\133\1\35\15\63\1\35\2\63\11\35"+
    "\3\63\20\35\2\63\1\35\1\61\1\35\1\64\1\35"+
    "\6\63\1\134\3\63\1\135\2\136\13\63\1\35\2\63"+
    "\11\35\3\63\23\35\1\61\1\35\1\62\2\137\1\35"+
    "\1\140\14\35\1\141\1\142\1\35\1\143\3\35\1\144"+
    "\40\35\2\63\1\35\1\61\1\35\1\64\1\137\1\145"+
    "\1\63\1\146\7\63\1\35\4\63\1\147\1\150\1\63"+
    "\1\151\3\63\1\152\1\63\1\35\2\63\11\35\3\63"+
    "\20\35\2\63\1\35\1\61\1\35\1\64\1\153\1\154"+
    "\11\63\1\35\15\63\1\35\2\63\11\35\3\63\20\35"+
    "\2\63\1\35\1\61\1\35\1\64\1\35\6\63\1\155"+
    "\2\63\1\156\1\35\15\63\1\35\2\63\11\35\3\63"+
    "\20\35\2\63\1\35\1\61\1\35\1\64\1\35\7\63"+
    "\1\157\2\63\1\35\15\63\1\35\2\63\11\35\3\63"+
    "\20\35\2\63\1\35\1\61\1\35\1\64\1\35\11\63"+
    "\1\160\1\161\1\162\1\163\13\63\1\35\2\63\11\35"+
    "\3\63\20\35\2\63\1\35\1\61\1\35\1\64\1\35"+
    "\7\63\1\164\1\63\1\165\1\35\4\63\1\166\10\63"+
    "\1\35\2\63\11\35\3\63\20\35\2\63\1\35\1\61"+
    "\1\35\1\64\1\130\1\131\3\63\1\167\1\170\4\63"+
    "\1\35\1\63\1\171\13\63\1\35\2\63\11\35\3\63"+
    "\20\35\2\63\1\35\1\61\1\35\1\64\1\35\7\63"+
    "\1\172\2\63\1\35\15\63\1\35\2\63\11\35\3\63"+
    "\20\35\2\63\1\35\1\61\1\35\1\64\1\35\5\63"+
    "\1\173\4\63\1\35\15\63\1\35\2\63\11\35\3\63"+
    "\20\35\3\174\1\61\1\35\1\175\1\35\12\174\1\35"+
    "\15\174\1\35\2\174\1\35\1\174\4\35\1\176\2\35"+
    "\3\174\20\35\1\177\1\200\1\35\1\61\1\35\1\201"+
    "\1\35\12\177\1\35\15\177\1\35\2\177\11\35\3\200"+
    "\1\177\22\35\1\61\1\35\1\62\54\35\1\202\16\35"+
    "\1\61\1\35\1\62\54\35\1\203\16\35\1\61\1\35"+
    "\1\62\54\35\1\204\16\35\1\61\1\35\1\62\60\35"+
    "\1\205\12\35\1\61\1\35\1\62\54\35\1\206\16\35"+
    "\1\61\1\35\1\62\62\35\1\207\4\35\4\210\1\211"+
    "\1\210\1\212\35\210\2\35\24\210\1\213\3\210\4\35"+
    "\1\61\1\70\1\62\73\35\1\61\1\35\1\62\2\75"+
    "\66\35\2\63\1\214\1\61\1\35\1\64\1\35\12\63"+
    "\1\35\15\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\75\1\76\11\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\65\1\35"+
    "\1\61\1\35\1\66\1\35\12\65\1\35\15\65\1\35"+
    "\2\65\11\35\3\65\20\35\2\65\1\35\1\61\1\35"+
    "\1\66\1\75\1\217\11\65\1\35\15\65\1\35\2\65"+
    "\11\35\3\65\17\35\6\220\1\221\67\220\4\72\1\222"+
    "\1\72\1\223\35\72\2\35\30\72\1\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\75\1\76\11\63\1\35\5\63"+
    "\1\224\7\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\5\35\1\61\1\35\1\62\2\35\1\225"+
    "\65\35\2\63\1\214\1\61\1\35\1\64\1\35\1\63"+
    "\1\226\10\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\4\63\1\227\5\63\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\4\63"+
    "\1\230\5\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\6\63\1\231\3\63\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\5\35\1\61\1\35\1\62\3\35\1\232\14\35\1\233"+
    "\47\35\2\63\1\214\1\61\1\35\1\64\1\35\2\63"+
    "\1\234\7\63\1\35\4\63\1\235\10\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\12\63\1\35\4\63"+
    "\1\236\10\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\5\35\1\61\1\35\1\62\24\35\1\233"+
    "\43\35\2\63\1\214\1\61\1\35\1\64\1\35\12\63"+
    "\1\35\10\63\1\235\4\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\5\63\1\237\4\63\1\35\5\63"+
    "\1\107\7\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\7\63\1\240\2\63\1\35\1\63\1\241\13\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\12\63"+
    "\1\35\7\63\1\242\5\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\10\63\1\243\1\63\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\3\63"+
    "\1\244\6\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\5\35\1\61\1\35\1\62"+
    "\13\35\2\245\1\35\1\246\51\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\12\63\1\245\1\247\1\63\1\250"+
    "\12\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\2\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\12\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\1\251\1\252\1\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\12\63\1\35\2\63\1\253"+
    "\1\254\11\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\10\63\1\255\1\63\1\35\2\63\1\256\12\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\6\63"+
    "\1\257\3\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\12\63\1\260\1\237\14\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\7\63\1\261"+
    "\2\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\3\63\1\262\11\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\12\63\1\35"+
    "\1\63\1\107\13\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\6\63\1\125\3\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\10\63\1\263"+
    "\1\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\5\35\1\61\1\35\1\62\22\35"+
    "\1\264\45\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\12\63\1\35\6\63\1\256\6\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\5\35\1\61\1\35"+
    "\1\62\3\35\1\265\67\35\1\61\1\35\1\62\10\35"+
    "\1\266\1\35\1\144\60\35\1\61\1\35\1\62\5\35"+
    "\1\267\65\35\1\61\1\35\1\62\13\35\2\270\56\35"+
    "\1\61\1\35\1\62\2\271\71\35\1\61\1\35\1\62"+
    "\15\35\1\272\52\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\2\63\1\273\7\63\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\7\63\1\274\1\63"+
    "\1\152\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\4\63\1\275\5\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\12\63\1\270"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\2\35\2\63\1\214\1\61\1\35\1\64\1\271"+
    "\1\276\11\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\12\63\1\35\1\63\1\277\13\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\5\35\1\61\1\35\1\62\16\35\1\300\51\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\12\63\1\35\2\63"+
    "\1\301\12\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\302\1\303\11\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\12\63\1\260\1\237\1\304"+
    "\13\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\2\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\12\63\1\35\1\63\1\305\13\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\306\1\240\11\63\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\5\35\1\61\1\35\1\62\16\35\1\307\51\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\12\63\1\35\2\63"+
    "\1\310\12\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\12\63\1\35\14\63\1\116\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\11\63\1\311\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\6\63"+
    "\1\312\3\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\313\1\314\11\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\12\63\1\35"+
    "\7\63\1\315\5\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\316\1\35\12\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\317\1\320\11\63\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\12\63"+
    "\1\35\4\63\1\321\10\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\12\63\1\35\6\63\1\322\6\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\3\174\1\61\1\35\1\175\1\75\1\323\11\174"+
    "\1\35\15\174\1\35\2\174\1\35\1\174\4\35\1\176"+
    "\2\35\3\174\20\35\2\177\1\35\1\61\1\35\1\201"+
    "\1\35\12\177\1\35\15\177\1\35\2\177\11\35\4\177"+
    "\17\35\1\177\1\324\1\35\1\61\1\35\1\201\1\35"+
    "\12\177\1\35\15\177\1\35\2\177\11\35\3\324\1\177"+
    "\17\35\2\177\1\35\1\61\1\35\1\201\1\75\1\325"+
    "\11\177\1\35\15\177\1\35\2\177\11\35\4\177\16\35"+
    "\4\210\1\211\1\326\1\212\35\210\2\35\24\210\1\213"+
    "\7\210\1\211\1\210\1\212\2\327\33\210\2\35\24\210"+
    "\1\213\3\210\3\35\1\214\1\61\1\35\1\62\34\35"+
    "\1\215\1\214\31\35\4\330\1\331\1\330\1\332\35\330"+
    "\2\35\1\333\27\330\2\35\1\216\1\35\1\61\1\35"+
    "\1\62\45\35\3\216\16\35\1\334\1\35\2\65\1\35"+
    "\1\61\1\35\1\66\1\35\1\65\1\335\10\65\1\35"+
    "\15\65\1\35\2\65\11\35\3\65\17\35\6\220\1\221"+
    "\2\336\65\220\4\72\1\222\1\337\1\223\35\72\2\35"+
    "\34\72\1\222\1\72\1\223\2\340\33\72\2\35\30\72"+
    "\1\35\2\63\1\214\1\61\1\35\1\64\1\35\2\63"+
    "\1\237\7\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\5\35\1\61\1\35\1\62"+
    "\3\35\1\341\64\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\2\63\1\342\7\63\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\5\63\1\343\4\63"+
    "\1\35\15\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\1\63\1\344\10\63\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\4\63\1\345\5\63"+
    "\1\35\15\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\5\35\1\61\1\35\1\62\15\35\1\346"+
    "\55\35\1\61\1\35\1\62\5\35\1\347\62\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\12\63\1\35\1\63"+
    "\1\350\13\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\4\63\1\351\5\63\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\11\63\1\132\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\2\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\7\63\1\107\2\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\1\63\1\107\10\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\2\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\7\63\1\352\2\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\1\63\1\116\10\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\2\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\7\63\1\353\2\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\7\63\1\354\2\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\5\35\1\61\1\35\1\62\3\35\1\355\67\35"+
    "\1\61\1\35\1\62\20\35\1\356\47\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\2\63\1\357\7\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\2\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\12\63\1\35\4\63\1\360\10\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\12\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\2\63\1\361\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\12\63"+
    "\1\35\15\63\1\35\2\63\1\215\1\214\7\35\1\362"+
    "\1\363\1\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\11\63\1\364\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\2\63\1\116"+
    "\7\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\365\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\15\63\1\35\2\63\1\366"+
    "\1\365\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\7\63\1\367\2\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\5\35\1\61\1\35\1\62\10\35\1\105\57\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\1\63\1\255"+
    "\10\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\7\63\1\370\2\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\12\63\1\35"+
    "\1\63\1\371\13\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\4\35\1\264\1\61\1\35\1\62"+
    "\34\35\1\372\1\264\35\35\1\61\1\35\1\62\6\35"+
    "\1\373\64\35\1\61\1\35\1\62\24\35\1\374\46\35"+
    "\1\61\1\35\1\62\6\35\1\375\64\35\1\61\1\35"+
    "\1\62\3\35\1\376\67\35\1\61\1\35\1\62\3\35"+
    "\1\377\67\35\1\61\1\35\1\62\3\35\1\u0100\64\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\5\63\1\u0101"+
    "\4\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\10\63\1\u0102\4\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\5\63\1\u0103"+
    "\4\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\2\63\1\u0104\7\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\2\63\1\315"+
    "\7\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\5\35\1\61\1\35\1\62\20\35"+
    "\1\u0105\47\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\12\63\1\35\4\63\1\255\10\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\5\35\1\61\1\35"+
    "\1\62\22\35\1\u0106\45\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\6\63\1\u0107\6\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\12\63\1\35"+
    "\1\63\1\u0108\13\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\7\63\1\315\2\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\5\35"+
    "\1\61\1\35\1\62\2\35\1\105\70\35\1\61\1\35"+
    "\1\62\23\35\1\u0109\44\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\7\63\1\u010a\5\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\12\63\1\35"+
    "\10\63\1\u010b\4\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\15\63\1\u010c\1\116\1\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\5\35\1\61"+
    "\1\35\1\62\7\35\1\260\60\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\6\63\1\237\3\63\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\75\1\76"+
    "\5\63\1\u010d\3\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\5\35\1\61\1\35"+
    "\1\62\25\35\1\u010e\42\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\11\63\1\u010f\3\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\u0110\1\u0111\11\63"+
    "\1\35\15\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\12\63\1\35\10\63\1\116\4\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\3\174"+
    "\1\61\1\35\1\175\1\35\1\174\1\u0112\10\174\1\35"+
    "\15\174\1\35\2\174\1\35\1\174\4\35\1\176\2\35"+
    "\3\174\20\35\1\177\1\u0113\1\35\1\61\1\35\1\201"+
    "\1\35\12\177\1\35\15\177\1\35\2\177\11\35\3\u0113"+
    "\1\177\17\35\2\177\1\35\1\61\1\35\1\201\1\35"+
    "\1\177\1\u0114\10\177\1\35\15\177\1\35\2\177\11\35"+
    "\4\177\16\35\6\u0115\1\u0116\35\u0115\2\220\24\u0115\1\u0117"+
    "\3\u0115\4\210\1\211\1\210\1\212\2\210\1\u0118\32\210"+
    "\2\35\24\210\1\213\3\210\4\35\1\61\1\35\1\62"+
    "\37\35\1\u0100\33\35\1\61\1\70\1\62\37\35\1\u0100"+
    "\33\35\1\61\1\35\1\62\2\75\35\35\1\u0100\30\35"+
    "\2\65\1\35\1\61\1\35\1\66\1\35\2\65\1\u0119"+
    "\7\65\1\35\15\65\1\35\2\65\11\35\3\65\17\35"+
    "\6\220\1\221\2\220\1\u011a\64\220\6\u011b\1\u011c\35\u011b"+
    "\2\220\30\u011b\4\72\1\222\1\72\1\223\2\72\1\u011d"+
    "\32\72\2\35\30\72\4\u011e\1\u011f\72\u011e\2\u0120\1\u0121"+
    "\1\u011f\1\u011e\1\u0120\1\u011e\12\u0120\1\u011e\15\u0120\1\u011e"+
    "\2\u0120\1\u0122\1\u0121\7\u011e\3\u0120\15\u011e\1\u0123\1\u011e"+
    "\1\35\2\63\1\214\1\61\1\35\1\u0124\1\35\12\63"+
    "\1\35\15\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\12\63\1\35\2\63\1\u0125\12\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\11\63\1\u0126\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\5\35\1\61\1\35\1\62\2\u0127\71\35\1\61"+
    "\1\35\1\62\15\35\1\u0128\52\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\u0127\1\u0129\11\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\12\63\1\35"+
    "\1\63\1\u0126\13\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\11\63\1\u012a\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\1\63\1\u012b\10\63"+
    "\1\35\15\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\12\63\1\35\1\63\1\u012c\13\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\5\35\1\61"+
    "\1\35\1\62\10\35\1\u012d\62\35\1\61\1\35\1\62"+
    "\3\35\1\u012e\64\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\7\63\1\u012f\2\63\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\2\63\1\u0130\7\63"+
    "\1\35\15\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\12\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\2\63\1\u0131\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\2\63\1\u0132\7\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\4\35\1\365\1\61\1\35\1\62\34\35\1\366"+
    "\1\365\31\35\4\u0133\1\u0134\1\u0133\1\u0135\35\u0133\2\35"+
    "\1\u0136\27\u0133\1\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\12\63\1\35\1\63\1\131\13\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\12\63\1\35\10\63"+
    "\1\u0137\4\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\7\63\1\u0138\2\63\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\1\35\4\u0133"+
    "\1\u0134\1\u0133\1\u0135\35\u0133\2\35\30\u0133\4\35\1\61"+
    "\1\35\1\62\12\35\1\u0139\60\35\1\61\1\35\1\u013a"+
    "\73\35\1\61\1\35\1\62\7\35\1\u013b\63\35\1\61"+
    "\1\35\1\62\10\35\1\u013c\62\35\1\61\1\35\1\62"+
    "\17\35\1\u013d\50\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\11\63\1\u013e\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\u013f\1\35\12\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\6\63\1\u0140"+
    "\3\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\3\63\1\u0141\11\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\5\35"+
    "\1\61\1\35\1\62\3\35\1\u010c\67\35\1\61\1\35"+
    "\1\u0142\70\35\2\63\1\214\1\61\1\35\1\u0143\1\35"+
    "\12\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\5\63\1\116\7\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\5\35"+
    "\1\61\1\35\1\62\12\35\1\u0144\55\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\11\63\1\u0145\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\4\63"+
    "\1\u0146\5\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\u0147\1\u0148\11\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\5\35"+
    "\1\61\1\35\1\62\12\35\1\u0149\55\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\11\63\1\224\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\5\35\1\61\1\35\1\62\17\35\1\u014a\50\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\12\63\1\35\3\63"+
    "\1\u014b\11\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\3\174\1\61\1\35\1\175\1\35"+
    "\2\174\1\u014c\7\174\1\35\15\174\1\35\2\174\1\35"+
    "\1\174\4\35\1\176\2\35\3\174\20\35\1\177\1\u014d"+
    "\1\35\1\61\1\35\1\201\1\35\12\177\1\35\15\177"+
    "\1\35\2\177\11\35\3\u014d\1\177\17\35\2\177\1\35"+
    "\1\61\1\35\1\201\1\35\2\177\1\u014e\7\177\1\35"+
    "\15\177\1\35\2\177\11\35\4\177\16\35\6\u0115\1\u0116"+
    "\2\u014f\33\u0115\2\220\24\u0115\1\u0117\3\u0115\4\210\1\211"+
    "\1\210\1\212\3\210\1\u0150\31\210\2\35\24\210\1\213"+
    "\3\210\1\u011e\2\u0151\1\u011e\1\u011f\1\u011e\1\u0151\1\u011e"+
    "\12\u0151\1\u011e\15\u0151\1\u011e\2\u0151\11\u011e\3\u0151\17\u011e"+
    "\6\220\1\221\3\220\1\u0152\63\220\6\u011b\1\u011c\2\u0153"+
    "\33\u011b\2\220\30\u011b\4\72\1\222\1\72\1\223\3\72"+
    "\1\u0154\31\72\2\35\30\72\4\u011e\1\u011f\1\u0152\73\u011e"+
    "\1\u0121\1\u011f\36\u011e\1\u0122\1\u0121\31\u011e\4\u0155\1\u0156"+
    "\37\u0155\2\u011e\1\u0157\27\u0155\2\u011e\1\u0123\1\u011e\1\u011f"+
    "\47\u011e\3\u0123\16\u011e\1\u0158\1\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\75\1\76\5\63\1\237\3\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\2\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\2\63\1\107\7\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\5\35\1\61\1\35"+
    "\1\62\2\35\1\u0159\70\35\1\61\1\35\1\62\3\35"+
    "\1\105\64\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\1\63\1\u015a\10\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\3\63\1\u015b\6\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\2\35\2\63\1\214\1\61\1\35\1\64\1\35"+
    "\12\63\1\u015c\1\u015d\14\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\12\63\1\35\15\63\1\35\1\63"+
    "\1\u015e\1\215\1\214\7\35\3\63\15\35\1\216\5\35"+
    "\1\61\1\35\1\62\2\35\1\u015f\70\35\1\61\1\35"+
    "\1\62\13\35\2\264\53\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\1\63\1\u0160\10\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\12\63\1\264"+
    "\1\256\14\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\u0161\1\u0162\11\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\5\35\1\61\1\35"+
    "\1\62\37\35\1\u0163\33\35\1\61\1\70\1\62\37\35"+
    "\1\u0163\33\35\1\61\1\35\1\62\2\75\35\35\1\u0163"+
    "\30\35\2\63\1\214\1\61\1\35\1\64\1\35\2\63"+
    "\1\u0164\7\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\3\63\1\116\6\63\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\5\35\1\61\1\35\1\62\3\35\1\u0165\67\35\1\61"+
    "\1\35\1\62\2\75\17\35\1\u0166\51\35\1\61\1\35"+
    "\1\62\4\35\1\u0167\66\35\1\61\1\35\1\62\22\35"+
    "\1\u0168\50\35\1\61\1\35\1\62\20\35\1\105\47\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\2\63\1\u0169"+
    "\7\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\75\1\76\11\63\1\35\5\63\1\u016a\7\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\3\63"+
    "\1\u016b\6\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\12\63\1\35\4\63\1\107\10\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\5\35\1\61\1\35\1\62\15\35\1\u016c\52\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\12\63\1\35\1\63"+
    "\1\u016d\13\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\1\63\1\256\10\63\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\5\35\1\61"+
    "\1\35\1\62\17\35\1\105\50\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\12\63\1\35\3\63\1\107\11\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\5\35\1\61\1\35\1\62\3\35\1\260\67\35\1\61"+
    "\1\35\1\62\7\35\1\u016e\60\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\6\63\1\u016f\3\63\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\1\35\1\u011e\3\u0170\1\u011f\1\u011e\1\u0170\1\u011e\12\u0170"+
    "\1\u011e\15\u0170\1\u011e\2\u0170\1\u011e\1\u0170\4\u011e\1\u0171"+
    "\2\u011e\3\u0170\17\u011e\1\35\1\177\1\u0172\1\35\1\61"+
    "\1\35\1\201\1\35\12\177\1\35\15\177\1\35\2\177"+
    "\11\35\3\u0172\1\177\16\35\1\u011e\2\u0173\1\u011e\1\u011f"+
    "\1\u011e\1\u0173\1\u011e\12\u0173\1\u011e\15\u0173\1\u011e\2\u0173"+
    "\11\u011e\4\u0173\16\u011e\6\u0115\1\u0116\2\u0115\1\u0174\32\u0115"+
    "\2\220\24\u0115\1\u0117\3\u0115\4\u0175\1\u0176\37\u0175\2\u011e"+
    "\24\u0175\1\u0177\3\u0175\76\0\6\u011b\1\u011c\2\u011b\1\u0178"+
    "\32\u011b\2\220\30\u011b\4\u0179\1\u017a\37\u0179\2\u011e\30\u0179"+
    "\4\u011e\1\u011f\41\u011e\1\u017b\33\u011e\1\u011f\1\u0152\40\u011e"+
    "\1\u017b\27\u011e\4\35\1\61\1\35\1\62\16\35\1\105"+
    "\51\35\2\63\1\214\1\61\1\35\1\64\1\35\12\63"+
    "\1\35\2\63\1\107\12\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\u017c\1\u017d\11\63\1\u0100\1\315\14\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\5\35\1\61\1\35\1\62\2\u017e\6\35\1\u017f\57\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\u017e\1\u0180\6\63"+
    "\1\u0181\2\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\2\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\11\63\1\u0182\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\5\35"+
    "\1\61\1\35\1\62\10\35\1\u0183\57\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\7\63\1\u0184\2\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\5\35\1\61\1\35\1\62\5\35\1\u0185\62\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\4\63\1\u0186"+
    "\5\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\5\35\1\61\1\35\1\62\2\u0187"+
    "\71\35\1\61\1\35\1\62\13\35\2\u0188\56\35\1\61"+
    "\1\35\1\62\10\35\1\u0189\62\35\1\61\1\35\1\62"+
    "\10\35\1\u018a\57\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\u0187\1\u018b\11\63\1\35\15\63\1\35\2\63\1\215"+
    "\1\214\7\35\3\63\15\35\1\216\2\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\12\63\1\u0188\1\u018c\14\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\2\63\1\214\1\61\1\35\1\64\1\35\7\63"+
    "\1\u018d\2\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\5\35\1\61\1\35\1\62"+
    "\2\35\1\346\65\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\1\63\1\350\10\63\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\5\35\1\61"+
    "\1\35\1\62\10\35\1\264\57\35\2\63\1\214\1\61"+
    "\1\35\1\64\1\35\7\63\1\256\2\63\1\35\15\63"+
    "\1\35\2\63\1\215\1\214\7\35\3\63\15\35\1\216"+
    "\2\35\1\177\1\u018e\1\35\1\61\1\35\1\201\1\35"+
    "\12\177\1\35\15\177\1\35\2\177\11\35\3\u018e\1\177"+
    "\16\35\6\u0115\1\u0116\3\u0115\1\u018f\31\u0115\2\220\24\u0115"+
    "\1\u0117\3\u0115\4\u0175\1\u0176\1\u018f\36\u0175\2\u011e\24\u0175"+
    "\1\u0177\3\u0175\6\u011b\1\u011c\3\u011b\1\u0190\31\u011b\2\220"+
    "\30\u011b\4\u0179\1\u017a\1\u0190\36\u0179\2\u011e\30\u0179\4\35"+
    "\1\61\1\35\1\62\2\35\1\u0191\65\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\1\63\1\u0192\10\63\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\5\35\1\61\1\35\1\62\25\35\1\u0193\42\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\12\63\1\35"+
    "\11\63\1\305\3\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\2\63\1\u0194\7\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\5\35"+
    "\1\61\1\35\1\62\15\35\1\u010c\52\35\2\63\1\214"+
    "\1\61\1\35\1\64\1\35\12\63\1\35\1\63\1\116"+
    "\13\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\5\35\1\61\1\35\1\62\2\35\1\u0100\65\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\1\63\1\315"+
    "\10\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\5\35\1\61\1\35\1\62\5\35"+
    "\1\u0195\65\35\1\61\1\35\1\62\3\35\1\u0196\67\35"+
    "\1\61\1\35\1\62\15\35\1\264\55\35\1\61\1\35"+
    "\1\62\15\35\1\u0197\52\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\4\63\1\u0198\5\63\1\35\15\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\2\35"+
    "\2\63\1\214\1\61\1\35\1\64\1\35\2\63\1\u0199"+
    "\7\63\1\35\15\63\1\35\2\63\1\215\1\214\7\35"+
    "\3\63\15\35\1\216\2\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\35\1\63\1\256\13\63\1\35"+
    "\2\63\1\215\1\214\7\35\3\63\15\35\1\216\1\35"+
    "\44\u019a\2\0\24\u019a\1\u019b\3\u019a\44\u019c\2\0\30\u019c"+
    "\4\35\1\61\1\35\1\62\16\35\1\u017f\51\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\12\63\1\35\2\63"+
    "\1\u0181\12\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\5\35\1\61\1\35\1\62\10\35\1\u0100"+
    "\57\35\2\63\1\214\1\61\1\35\1\64\1\35\2\63"+
    "\1\u019d\7\63\1\35\15\63\1\35\2\63\1\215\1\214"+
    "\7\35\3\63\15\35\1\216\5\35\1\61\1\35\1\62"+
    "\2\35\1\u019e\70\35\1\61\1\35\1\62\10\35\1\u019f"+
    "\62\35\1\61\1\35\1\62\15\35\1\u01a0\52\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\1\63\1\u01a1\10\63"+
    "\1\35\15\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\7\63\1\u01a2\2\63\1\35\15\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\11\63\1\u01a3\1\35"+
    "\15\63\1\35\2\63\1\215\1\214\7\35\3\63\15\35"+
    "\1\216\5\35\1\61\1\35\1\62\13\35\2\u017f\56\35"+
    "\1\61\1\35\1\62\24\35\1\130\46\35\1\61\1\35"+
    "\1\62\5\35\1\u01a4\62\35\2\63\1\214\1\61\1\35"+
    "\1\64\1\35\12\63\1\u017f\1\u0181\14\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\2\35\2\63"+
    "\1\214\1\61\1\35\1\64\1\35\12\63\1\35\10\63"+
    "\1\131\4\63\1\35\2\63\1\215\1\214\7\35\3\63"+
    "\15\35\1\216\2\35\2\63\1\214\1\61\1\35\1\64"+
    "\1\35\12\63\1\35\3\63\1\312\11\63\1\35\2\63"+
    "\1\215\1\214\7\35\3\63\15\35\1\216\5\35\1\61"+
    "\1\35\1\62\15\35\1\u01a5\51\35";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21824];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\33\1\1\0\23\1\2\0\4\1\1\0\5\1"+
    "\1\0\4\1\1\0\3\1\1\0\10\1\1\0\15\1"+
    "\1\0\1\1\6\0\6\1\1\0\5\1\1\0\12\1"+
    "\2\0\12\1\3\0\1\1\3\0\1\1\2\0\3\1"+
    "\1\0\4\1\2\0\11\1\2\0\11\1\1\0\3\1"+
    "\7\0\5\1\1\0\1\1\1\0\3\1\2\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\4\0\3\1"+
    "\1\0\7\1\2\0\6\1\1\0\6\1\2\0\3\1"+
    "\6\0\5\1\2\0\2\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\2\0\1\1\1\0\1\1"+
    "\1\0\3\1\2\0\1\1\3\0\3\1\2\0\4\1"+
    "\2\0\4\1\3\0\3\1\5\0\6\1\1\0\2\1"+
    "\1\0\1\1\2\0\4\1\1\0\2\1\1\11\2\1"+
    "\2\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\3\1\4\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\3\0\5\1\1\0\1\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\4\0\6\1\1\0\1\1"+
    "\1\0\1\1\3\0\2\1\1\0\3\1\3\0\3\1"+
    "\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int numero;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { numero=yyline; lexeme=yytext(); return ERROR;
            }
          case 51: break;
          case 2: 
            { numero=yyline; lexeme=yytext(); return VAR;
            }
          case 52: break;
          case 3: 
            { numero=yyline; lexeme=yytext(); return INT;
            }
          case 53: break;
          case 4: 
            { /*Ignore*/
            }
          case 54: break;
          case 5: 
            { numero=yyline; return MULTIPLICACION;
            }
          case 55: break;
          case 6: 
            { numero=yyline; return DIVISION;
            }
          case 56: break;
          case 7: 
            { numero=yyline; return PARENTESISI;
            }
          case 57: break;
          case 8: 
            { numero=yyline; return PARENTESISD;
            }
          case 58: break;
          case 9: 
            { numero=yyline; return DIRECTIVAS;
            }
          case 59: break;
          case 10: 
            { numero=yyline; return MODULO;
            }
          case 60: break;
          case 11: 
            { numero=yyline; lexeme=yytext(); return ANGLED;
            }
          case 61: break;
          case 12: 
            { numero=yyline; lexeme=yytext(); return ANGLEI;
            }
          case 62: break;
          case 13: 
            { numero=yyline; lexeme=yytext(); return EXPO;
            }
          case 63: break;
          case 14: 
            { numero=yyline; return PUNTO;
            }
          case 64: break;
          case 15: 
            { numero=yyline; return COMA;
            }
          case 65: break;
          case 16: 
            { numero=yyline; return INICIOB;
            }
          case 66: break;
          case 17: 
            { numero=yyline; return FINALB;
            }
          case 67: break;
          case 18: 
            { numero=yyline; lexeme=yytext(); return ASIGNACION;
            }
          case 68: break;
          case 19: 
            { numero=yyline; numero=yyline; return SUMA;
            }
          case 69: break;
          case 20: 
            { numero=yyline; return RESTA;
            }
          case 70: break;
          case 21: 
            { numero=yyline; return ASPERSON;
            }
          case 71: break;
          case 22: 
            { numero=yyline; return NOT;
            }
          case 72: break;
          case 23: 
            { numero=yyline; return COMILLAD;
            }
          case 73: break;
          case 24: 
            { numero=yyline; return COMILLAS;
            }
          case 74: break;
          case 25: 
            { numero=yyline; lexeme=yytext(); return PR;
            }
          case 75: break;
          case 26: 
            { numero=yyline; return MULTIPLICACIONM;
            }
          case 76: break;
          case 27: 
            { numero=yyline; lexeme=yytext(); return COMENTARIO;
            }
          case 77: break;
          case 28: 
            { numero=yyline; return DIVISIONM;
            }
          case 78: break;
          case 29: 
            { numero=yyline; lexeme=yytext(); return EVENTO;
            }
          case 79: break;
          case 30: 
            { numero=yyline; lexeme=yytext(); return CONS;
            }
          case 80: break;
          case 31: 
            { numero=yyline; lexeme=yytext(); return HTML;
            }
          case 81: break;
          case 32: 
            { numero=yyline; lexeme=yytext(); return FLOAT;
            }
          case 82: break;
          case 33: 
            { numero=yyline; return COMPARACION;
            }
          case 83: break;
          case 34: 
            { numero=yyline; return SUMAM;
            }
          case 84: break;
          case 35: 
            { numero=yyline; return RESTAM;
            }
          case 85: break;
          case 36: 
            { numero=yyline; return AND;
            }
          case 86: break;
          case 37: 
            { numero=yyline; return DIFERENTE;
            }
          case 87: break;
          case 38: 
            { numero=yyline; return OR;
            }
          case 88: break;
          case 39: 
            { numero=yyline; lexeme=yytext(); return TEXTO;
            }
          case 89: break;
          case 40: 
            { numero=yyline; lexeme=yytext(); return LN2;
            }
          case 90: break;
          case 41: 
            { numero=yyline; lexeme=yytext(); return FUNCION;
            }
          case 91: break;
          case 42: 
            { numero=yyline; lexeme=yytext(); return ARREGLO;
            }
          case 92: break;
          case 43: 
            { numero=yyline; lexeme=yytext(); return LN10;
            }
          case 93: break;
          case 44: 
            { numero=yyline; lexeme=yytext(); return LOG2;
            }
          case 94: break;
          case 45: 
            { numero=yyline;lexeme=yytext(); return PR;
            }
          case 95: break;
          case 46: 
            { numero=yyline; lexeme=yytext(); return LOG10;
            }
          case 96: break;
          case 47: 
            { numero=yyline; lexeme=yytext(); return OBJETO;
            }
          case 97: break;
          case 48: 
            { lexeme=yytext(); return PR;
            }
          case 98: break;
          case 49: 
            { numero=yyline; lexeme=yytext(); return LIB;
            }
          case 99: break;
          case 50: 
            { numero=yyline; lexeme=yytext(); return DOUBLE;
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
