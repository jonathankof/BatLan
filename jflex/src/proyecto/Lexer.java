/* The following code was generated by JFlex 1.6.1 */

package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Administardor/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\43\1\44\1\44\1\43\22\0\1\3\1\70\1\72"+
    "\1\76\1\0\1\47\1\67\1\4\1\42\1\45\1\64\1\63\1\56"+
    "\1\65\1\55\1\66\1\54\1\53\1\52\7\2\1\62\1\0\1\51"+
    "\1\61\1\50\1\0\1\46\1\20\1\5\1\25\1\12\1\16\1\17"+
    "\1\24\1\26\1\7\1\36\1\40\1\15\1\30\1\10\1\13\1\32"+
    "\1\35\1\23\1\22\1\11\1\14\1\33\1\31\1\34\1\27\1\1"+
    "\1\73\1\75\1\74\1\0\1\41\1\0\1\20\1\5\1\25\1\12"+
    "\1\16\1\17\1\24\1\26\1\7\1\36\1\40\1\15\1\30\1\10"+
    "\1\13\1\32\1\35\1\23\1\22\1\11\1\14\1\33\1\31\1\34"+
    "\1\27\1\1\1\57\1\71\1\60\7\0\1\44\252\0\2\6\115\0"+
    "\1\21\u1ea8\0\1\44\1\44\u0100\0\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\1\1"+
    "\10\2\1\1\11\2\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\1\1\27\2\1"+
    "\1\0\1\2\1\1\1\3\2\0\1\2\1\0\4\2"+
    "\1\0\2\2\1\30\1\0\1\30\3\2\1\30\2\2"+
    "\1\31\1\0\10\2\2\32\3\2\1\0\1\2\6\0"+
    "\6\2\1\0\5\2\1\0\12\2\1\0\1\33\1\1"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\2\0\1\45\1\46\1\1\4\0\2\1\1\47"+
    "\1\2\1\0\4\2\2\0\11\2\2\0\2\2\1\50"+
    "\6\2\1\0\3\2\7\0\5\2\1\0\1\2\1\0"+
    "\3\2\2\0\3\2\1\0\1\2\1\51\1\2\1\0"+
    "\3\2\1\34\1\1\1\51\2\0\1\52\3\2\2\0"+
    "\5\2\1\51\1\0\1\51\1\2\1\53\1\54\2\2"+
    "\2\0\3\2\6\0\1\51\4\2\2\0\2\2\1\0"+
    "\2\2\1\31\1\2\1\0\1\2\1\0\1\2\1\34"+
    "\1\1\1\55\1\56\1\0\4\2\2\0\2\2\1\57"+
    "\1\2\1\0\1\51\1\0\2\2\7\0\4\2\1\0"+
    "\2\2\1\0\1\2\2\0\1\2\1\34\3\0\2\2"+
    "\1\0\2\2\1\0\1\2\1\0\1\2\1\60\1\61"+
    "\1\60\4\0\3\2\1\0\1\2\1\0\1\2\1\34"+
    "\5\0\1\2\1\60\1\0\1\62\1\2\1\62\1\2"+
    "\1\0\1\2\1\0\1\2\4\0\3\2\1\63\1\55"+
    "\1\64\1\0\1\2\1\0\2\2\3\0\2\2\1\0"+
    "\1\2\3\0\3\2\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\77\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\u0627\0\u0666\0\77\0\77\0\77\0\u06a5\0\77\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc"+
    "\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0666\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\77\0\u0ccc\0\u0999\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0999\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u107d\0\77\0\u0999\0\u10bc\0\u10fb\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u0627"+
    "\0\77\0\u191a\0\u1959\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\u089d\0\u1998\0\u089d\0\u19d7\0\u095a"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\77\0\u1b90"+
    "\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88"+
    "\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"+
    "\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u0999\0\u20bb\0\u20fa\0\u2139"+
    "\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331"+
    "\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721"+
    "\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919"+
    "\0\u0999\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u1998"+
    "\0\u1a55\0\u2ad2\0\u2b11\0\77\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05"+
    "\0\u2e44\0\u2e83\0\u0999\0\u0999\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f"+
    "\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177"+
    "\0\u31b6\0\77\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330"+
    "\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\77\0\u34aa\0\u34e9"+
    "\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u2ad2\0\u3624\0\u0999\0\u3663"+
    "\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b"+
    "\0\u0999\0\u389a\0\u38d9\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5"+
    "\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd"+
    "\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5"+
    "\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd"+
    "\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u1a55"+
    "\0\u0999\0\77\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0"+
    "\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8"+
    "\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u0999\0\u4623\0\77\0\u4662"+
    "\0\u0999\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b"+
    "\0\u485a\0\u4899\0\u48d8\0\u4917\0\u4956\0\u446a\0\u4995\0\77"+
    "\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d"+
    "\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u4cc8\0\u4d07\0\u4d46\0\u4d85"+
    "\0\u4dc4\0\u4e03\0\u4e42\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\3\1\12\1\13\1\3\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\3\1\24\1\25\1\3"+
    "\1\26\1\27\1\30\1\31\2\3\1\32\1\2\2\3"+
    "\1\33\1\5\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\3\4\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\2\2"+
    "\1\60\1\61\55\34\1\62\22\34\2\63\2\34\1\63"+
    "\1\34\12\63\1\34\15\63\1\34\2\63\10\34\3\63"+
    "\1\62\22\34\1\64\1\65\2\34\1\64\1\34\12\64"+
    "\1\34\15\64\1\34\2\64\10\34\3\65\1\66\22\34"+
    "\1\67\3\34\1\67\1\34\12\67\1\34\15\67\1\34"+
    "\2\67\13\34\1\62\22\34\2\63\2\34\1\70\1\71"+
    "\1\72\2\63\1\73\2\63\1\74\1\63\1\75\1\63"+
    "\1\76\1\77\2\63\1\100\11\63\1\34\2\63\10\34"+
    "\3\63\1\62\40\34\1\101\10\34\1\102\24\34\1\62"+
    "\22\34\2\63\2\34\1\63\1\34\10\63\1\103\1\63"+
    "\1\34\6\63\1\104\6\63\1\34\2\63\10\34\3\63"+
    "\1\62\22\34\2\63\2\34\1\63\1\34\12\63\1\34"+
    "\1\63\1\105\2\63\1\106\10\63\1\34\2\63\10\34"+
    "\3\63\1\62\22\34\2\63\2\34\1\63\1\34\4\63"+
    "\1\107\2\63\1\110\2\63\1\34\15\63\1\34\2\63"+
    "\10\34\3\63\1\62\22\34\2\63\2\34\1\63\1\34"+
    "\1\63\1\111\10\63\1\34\10\63\1\112\4\63\1\34"+
    "\2\63\10\34\3\63\1\62\22\34\2\63\2\34\1\63"+
    "\1\113\1\114\1\115\2\63\1\116\2\63\1\117\2\63"+
    "\1\34\15\63\1\34\2\63\10\34\3\63\1\62\22\34"+
    "\2\63\2\34\1\63\1\34\5\63\1\120\1\121\3\63"+
    "\1\34\11\63\1\122\1\123\2\63\1\34\2\63\10\34"+
    "\3\63\1\62\22\34\2\63\2\34\1\63\1\124\1\125"+
    "\3\63\1\126\4\63\1\127\1\34\15\63\1\34\2\63"+
    "\10\34\3\63\1\62\22\34\2\63\2\34\1\63\1\34"+
    "\6\63\1\130\3\63\1\131\2\132\13\63\1\34\2\63"+
    "\10\34\3\63\1\62\27\34\2\133\1\34\1\134\14\34"+
    "\1\135\1\136\1\34\1\137\3\34\1\140\17\34\1\62"+
    "\22\34\2\63\2\34\1\63\1\133\1\141\1\63\1\142"+
    "\7\63\1\34\4\63\1\143\1\144\1\63\1\145\3\63"+
    "\1\146\1\63\1\34\2\63\10\34\3\63\1\62\22\34"+
    "\2\63\2\34\1\63\1\147\1\150\11\63\1\34\15\63"+
    "\1\34\2\63\10\34\3\63\1\62\22\34\2\63\2\34"+
    "\1\63\1\34\6\63\1\151\2\63\1\152\1\34\15\63"+
    "\1\34\2\63\10\34\3\63\1\62\22\34\2\63\2\34"+
    "\1\63\1\34\7\63\1\153\2\63\1\34\15\63\1\34"+
    "\2\63\10\34\3\63\1\62\22\34\2\63\2\34\1\63"+
    "\1\34\11\63\1\154\1\155\1\156\1\157\13\63\1\34"+
    "\2\63\10\34\3\63\1\62\22\34\2\63\2\34\1\63"+
    "\1\34\7\63\1\160\1\63\1\161\1\34\4\63\1\162"+
    "\10\63\1\34\2\63\10\34\3\63\1\62\22\34\2\63"+
    "\2\34\1\63\1\124\1\125\3\63\1\163\1\164\4\63"+
    "\1\34\1\63\1\165\13\63\1\34\2\63\10\34\3\63"+
    "\1\62\22\34\2\63\2\34\1\63\1\34\7\63\1\166"+
    "\2\63\1\34\15\63\1\34\2\63\10\34\3\63\1\62"+
    "\22\34\2\63\2\34\1\63\1\34\5\63\1\167\4\63"+
    "\1\34\15\63\1\34\2\63\10\34\3\63\1\62\22\34"+
    "\3\170\1\34\1\170\1\34\12\170\1\34\15\170\1\34"+
    "\2\170\1\34\1\170\4\34\1\171\1\34\3\170\1\62"+
    "\22\34\1\172\1\173\2\34\1\172\1\34\12\172\1\34"+
    "\15\172\1\34\2\172\10\34\3\173\1\172\76\34\1\62"+
    "\3\34\1\174\72\34\1\62\3\34\1\175\72\34\1\62"+
    "\3\34\1\176\72\34\1\62\3\34\1\177\72\34\1\62"+
    "\3\34\1\200\72\34\1\62\11\34\1\201\64\34\1\62"+
    "\3\34\1\202\72\34\1\62\13\34\1\203\5\34\43\204"+
    "\2\34\10\204\1\205\14\204\1\206\4\204\55\34\1\62"+
    "\17\34\1\207\1\34\43\61\2\34\32\61\2\34\1\210"+
    "\47\34\3\210\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\12\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\1\215\1\216"+
    "\2\34\1\215\1\34\12\215\1\34\15\215\1\34\2\215"+
    "\10\34\3\216\23\34\1\215\1\65\2\34\1\215\1\34"+
    "\12\215\1\34\15\215\1\34\2\215\10\34\3\65\1\66"+
    "\25\34\1\217\50\34\1\62\22\34\2\63\1\211\1\34"+
    "\1\63\1\34\12\63\1\34\5\63\1\220\7\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\13\34\1\221\44\34\1\62\22\34\2\63\1\211\1\34"+
    "\1\63\1\34\1\63\1\222\10\63\1\34\15\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\4\63\1\223"+
    "\5\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\4\63\1\224\5\63\1\34\15\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\6\63\1\225"+
    "\3\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\14\34\1\226\14\34\1\227"+
    "\26\34\1\62\22\34\2\63\1\211\1\34\1\63\1\34"+
    "\2\63\1\230\7\63\1\34\4\63\1\231\10\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\12\63\1\34"+
    "\4\63\1\232\10\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\35\34\1\227\22\34\1\62"+
    "\22\34\2\63\1\211\1\34\1\63\1\34\12\63\1\34"+
    "\10\63\1\231\4\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\5\63\1\233\4\63\1\34\5\63\1\103"+
    "\7\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\7\63\1\234\2\63\1\34\1\63\1\235\13\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\12\63\1\34"+
    "\7\63\1\236\5\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\10\63\1\237\1\63\1\34\15\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\3\63\1\240"+
    "\6\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\24\34\2\241\1\34\1\242"+
    "\30\34\1\62\22\34\2\63\1\211\1\34\1\63\1\34"+
    "\12\63\1\241\1\243\1\63\1\244\12\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\12\63\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\1\245\1\246\1\63"+
    "\1\213\15\34\1\214\4\34\2\63\1\211\1\34\1\63"+
    "\1\34\12\63\1\34\2\63\1\247\1\250\11\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\10\63\1\251"+
    "\1\63\1\34\2\63\1\252\12\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\6\63\1\253\3\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\12\63\1\254\1\233\14\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\7\63\1\255\2\63\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\12\63"+
    "\1\34\3\63\1\256\11\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\1\63\1\103\13\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\6\63"+
    "\1\121\3\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\10\63\1\257\1\63\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\33\34\1\260\24\34\1\62\22\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\6\63\1\252\6\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\14\34\1\261\43\34\1\62\37\34\1\262\1\34"+
    "\1\140\34\34\1\62\34\34\1\263\41\34\1\62\42\34"+
    "\2\264\32\34\1\62\27\34\2\265\45\34\1\62\44\34"+
    "\1\266\31\34\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\2\63\1\267\7\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\7\63\1\270\1\63"+
    "\1\146\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\4\63\1\271\5\63\1\34\15\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\12\63\1\264"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\265"+
    "\1\272\11\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\1\63\1\273\13\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\27\34\1\274\30\34\1\62\22\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\2\63\1\275\12\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\276\1\277"+
    "\11\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\12\63\1\254\1\233\1\300\13\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\12\63\1\34"+
    "\1\63\1\301\13\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\302\1\234\11\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\27\34"+
    "\1\303\30\34\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\12\63\1\34\2\63\1\304\12\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\12\63\1\34\14\63"+
    "\1\112\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\11\63\1\305\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\6\63\1\306\3\63\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\307\1\310"+
    "\11\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\12\63\1\34\7\63\1\311\5\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\312\1\34\12\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\313"+
    "\1\314\11\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\4\63\1\315\10\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\12\63"+
    "\1\34\6\63\1\316\6\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\172\2\34"+
    "\1\172\1\34\12\172\1\34\15\172\1\34\2\172\10\34"+
    "\4\172\22\34\1\172\1\317\2\34\1\172\1\34\12\172"+
    "\1\34\15\172\1\34\2\172\10\34\3\317\1\172\21\34"+
    "\2\204\1\320\40\204\2\34\5\204\3\320\1\205\14\204"+
    "\1\206\4\204\43\207\2\34\32\207\3\34\1\211\36\34"+
    "\1\212\1\211\11\34\1\62\21\34\43\212\2\34\1\321"+
    "\7\212\1\322\21\212\1\34\1\323\1\210\2\34\1\323"+
    "\1\34\12\323\1\34\15\323\1\34\2\323\10\34\3\210"+
    "\1\62\23\34\1\214\47\34\3\214\1\62\16\34\1\324"+
    "\3\34\2\215\2\34\1\215\1\34\12\215\1\34\15\215"+
    "\1\34\2\215\10\34\3\215\1\62\22\34\1\64\1\215"+
    "\2\34\1\64\1\34\12\64\1\34\15\64\1\34\2\64"+
    "\10\34\3\215\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\2\63\1\233\7\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\14\34"+
    "\1\101\43\34\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\2\63\1\103\7\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\5\63\1\325\4\63"+
    "\1\34\15\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\4\34\2\63\1\211\1\34\1\63"+
    "\1\34\1\63\1\326\10\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\4\63\1\327\5\63"+
    "\1\34\15\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\26\34\1\330\31\34\1\62\34\34"+
    "\1\331\41\34\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\12\63\1\34\1\63\1\332\13\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\4\63\1\333\5\63"+
    "\1\34\15\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\4\34\2\63\1\211\1\34\1\63"+
    "\1\34\11\63\1\126\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\7\63\1\103\2\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\1\63\1\103\10\63\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\7\63\1\334\2\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\1\63\1\112\10\63\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\7\63\1\335\2\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\7\63\1\336\2\63\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\14\34\1\337"+
    "\43\34\1\62\47\34\1\340\26\34\1\62\22\34\2\63"+
    "\1\211\1\34\1\63\1\34\2\63\1\341\7\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\12\63\1\34\4\63\1\342\10\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\12\63\1\34\15\63\1\34"+
    "\2\63\1\212\1\211\6\34\2\63\1\343\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\12\63"+
    "\1\34\15\63\1\34\2\63\1\212\1\211\6\34\1\344"+
    "\1\345\1\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\11\63\1\346\1\34\15\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\2\63\1\112"+
    "\7\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\347\1\34"+
    "\1\63\1\34\12\63\1\34\15\63\1\34\2\63\1\350"+
    "\1\347\6\34\3\63\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\7\63\1\351\2\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\21\34\1\101\36\34\1\62\22\34\2\63"+
    "\1\211\1\34\1\63\1\34\1\63\1\251\10\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\7\63\1\352\2\63\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\12\63\1\34\1\63\1\353"+
    "\13\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\6\34\1\260\36\34\1\354\1\260\11\34"+
    "\1\62\35\34\1\355\40\34\1\62\53\34\1\356\22\34"+
    "\1\62\35\34\1\357\40\34\1\62\32\34\1\360\43\34"+
    "\1\62\32\34\1\361\43\34\1\62\32\34\1\362\43\34"+
    "\1\62\22\34\2\63\1\211\1\34\1\63\1\34\5\63"+
    "\1\363\4\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\10\63\1\364\4\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\5\63"+
    "\1\365\4\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\2\63\1\366\7\63\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\2\63"+
    "\1\311\7\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\31\34\1\367\26\34"+
    "\1\62\22\34\2\63\1\211\1\34\1\63\1\34\12\63"+
    "\1\34\4\63\1\251\10\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\33\34\1\370\24\34"+
    "\1\62\22\34\2\63\1\211\1\34\1\63\1\34\12\63"+
    "\1\34\6\63\1\371\6\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\1\63\1\372\13\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\7\63"+
    "\1\311\2\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\13\34\1\101\44\34"+
    "\1\62\52\34\1\373\23\34\1\62\22\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\7\63\1\374\5\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\12\63"+
    "\1\34\10\63\1\375\4\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\15\63\1\376\1\112"+
    "\1\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\20\34\1\254\37\34\1\62\22\34\2\63\1\211\1\34"+
    "\1\63\1\34\6\63\1\233\3\63\1\34\15\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\6\63\1\377"+
    "\3\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\36\34\1\u0100\21\34\1\62"+
    "\22\34\2\63\1\211\1\34\1\63\1\34\12\63\1\34"+
    "\11\63\1\u0101\3\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\u0102\1\u0103\11\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\12\63\1\34\10\63"+
    "\1\112\4\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\4\34\1\172\1\u0104\2\34\1\172"+
    "\1\34\12\172\1\34\15\172\1\34\2\172\10\34\3\u0104"+
    "\1\172\21\34\2\212\1\u0105\40\212\2\34\1\321\4\212"+
    "\3\u0105\1\322\21\212\1\34\2\u0106\2\34\1\u0106\1\34"+
    "\12\u0106\1\34\15\u0106\1\34\2\u0106\10\34\3\u0106\1\62"+
    "\22\34\2\63\1\211\1\34\1\310\1\34\12\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\12\63\1\34\2\63\1\u0107\12\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\11\63\1\222\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\11\34\2\u0108\45\34\1\62\44\34\1\221\31\34"+
    "\1\62\22\34\2\63\1\211\1\34\1\63\1\u0108\1\u0109"+
    "\11\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\12\63\1\34\1\63\1\222\13\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\11\63\1\u010a"+
    "\1\34\15\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\4\34\2\63\1\211\1\34\1\63"+
    "\1\34\1\63\1\u010b\10\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\12\63\1\34\1\63"+
    "\1\u010c\13\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\21\34\1\u010d\36\34\1\62\32\34"+
    "\1\u010e\43\34\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\7\63\1\u010f\2\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\2\63\1\u0110\7\63"+
    "\1\34\15\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\4\34\2\63\1\211\1\34\1\63"+
    "\1\34\12\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\2\63\1\u0111\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\2\63\1\u0112\7\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\6\34\1\347\36\34\1\350\1\347\11\34"+
    "\1\62\21\34\43\u0113\2\34\1\u0114\7\u0113\1\u0115\21\u0113"+
    "\1\34\2\63\1\211\1\34\1\63\1\34\12\63\1\34"+
    "\1\63\1\125\13\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\12\63\1\34\10\63\1\u0116\4\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\7\63\1\u0117"+
    "\2\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\3\34\43\u0118\2\34\10\u0118"+
    "\1\u0119\21\u0118\20\34\1\u011a\34\34\1\62\26\34\1\u011b"+
    "\47\34\1\62\36\34\1\u011c\37\34\1\62\37\34\1\u011d"+
    "\36\34\1\62\46\34\1\u011e\27\34\1\62\22\34\2\63"+
    "\1\211\1\34\1\63\1\34\11\63\1\u011f\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\u0120\1\34\12\63"+
    "\1\34\15\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\4\34\2\63\1\211\1\34\1\63"+
    "\1\34\6\63\1\u0121\3\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\12\63\1\34\3\63"+
    "\1\u0122\11\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\14\34\1\376\43\34\1\62\26\34"+
    "\1\376\47\34\1\62\22\34\2\63\1\211\1\34\1\112"+
    "\1\34\12\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\5\63\1\112\7\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\23\34\1\u0123\34\34\1\62\22\34\2\63\1\211"+
    "\1\34\1\63\1\34\11\63\1\u0124\1\34\15\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\4\63\1\u0125"+
    "\5\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\u0126\1\u0127\11\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\23\34"+
    "\1\u0128\34\34\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\11\63\1\220\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\30\34\1\u0129"+
    "\27\34\1\62\22\34\2\63\1\211\1\34\1\63\1\34"+
    "\12\63\1\34\3\63\1\u012a\11\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\1\172"+
    "\1\u012b\2\34\1\172\1\34\12\172\1\34\15\172\1\34"+
    "\2\172\10\34\3\u012b\1\172\22\34\2\u0106\1\34\1\u012c"+
    "\1\u0106\1\34\12\u0106\1\34\15\u0106\1\34\2\u0106\1\u012d"+
    "\2\34\5\u012c\3\u0106\1\62\1\34\14\u012c\14\34\1\u012e"+
    "\44\34\1\62\22\34\2\63\1\211\1\34\1\63\1\34"+
    "\1\63\1\u012f\10\63\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\2\63"+
    "\1\211\1\34\1\63\1\34\3\63\1\u0130\6\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\12\63\1\u0131\1\u0132\14\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\15\63\1\34\1\63"+
    "\1\u0133\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\13\34\1\u0134\44\34\1\62\42\34\2\260\32\34\1\62"+
    "\22\34\2\63\1\211\1\34\1\63\1\34\1\63\1\u0135"+
    "\10\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\12\63\1\260\1\252\14\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\u0136\1\u0137\11\63\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\3\34\43\212\2\34\1\u0138\7\212\1\322"+
    "\23\212\1\u0105\40\212\2\34\1\u0138\4\212\3\u0105\1\322"+
    "\21\212\1\34\2\63\1\211\1\34\1\63\1\34\2\63"+
    "\1\u0139\7\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\3\63\1\112\6\63\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\50\34\1\u013a\7\34\1\62\23\34\1\210\42\34"+
    "\1\u013a\4\34\3\210\1\62\32\34\1\u013b\43\34\1\62"+
    "\50\34\1\u013c\25\34\1\62\33\34\1\u013d\42\34\1\62"+
    "\51\34\1\u013e\24\34\1\62\47\34\1\101\26\34\1\62"+
    "\22\34\2\63\1\211\1\34\1\63\1\34\2\63\1\u013f"+
    "\7\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\12\63\1\34\5\63\1\u0140\7\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\3\63\1\u0141"+
    "\6\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\4\34\2\63\1\211\1\34"+
    "\1\63\1\34\12\63\1\34\4\63\1\103\10\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\26\34\1\u0142\31\34\1\62\22\34\2\63\1\211\1\34"+
    "\1\63\1\34\12\63\1\34\1\63\1\u0143\13\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\2\63\1\211\1\34\1\63\1\34\1\63\1\252"+
    "\10\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\30\34\1\101\27\34\1\62"+
    "\22\34\2\63\1\211\1\34\1\63\1\34\12\63\1\34"+
    "\3\63\1\103\11\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\14\34\1\254\43\34\1\62"+
    "\36\34\1\u0144\37\34\1\62\22\34\2\63\1\211\1\34"+
    "\1\63\1\34\6\63\1\u0145\3\63\1\34\15\63\1\34"+
    "\2\63\1\212\1\211\6\34\3\63\1\213\15\34\1\214"+
    "\4\34\1\172\1\u0146\2\34\1\172\1\34\12\172\1\34"+
    "\15\172\1\34\2\172\10\34\3\u0146\1\172\22\34\1\u0147"+
    "\3\34\1\u0147\1\34\12\u0147\1\34\15\u0147\1\34\2\u0147"+
    "\13\34\1\62\21\34\1\u0148\1\u0149\3\u0148\1\u0149\1\u0148"+
    "\12\u0149\1\u0148\15\u0149\1\u0148\2\u0149\1\u0148\2\34\10\u0148"+
    "\1\u014a\21\u0148\24\34\1\101\30\34\1\62\22\34\2\63"+
    "\1\211\1\34\1\63\1\34\12\63\1\34\2\63\1\103"+
    "\12\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\u014b"+
    "\1\u014c\11\63\1\u013a\1\u014d\14\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\11\34\2\u014e"+
    "\6\34\1\u014f\36\34\1\62\22\34\2\63\1\211\1\34"+
    "\1\63\1\u014e\1\u0150\6\63\1\u0151\2\63\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\11\63"+
    "\1\u0152\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\21\34\1\u0153\36\34\1\62"+
    "\22\34\2\63\1\211\1\34\1\63\1\34\7\63\1\u0154"+
    "\2\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\16\34\1\u0155\41\34\1\62"+
    "\22\34\2\63\1\211\1\34\1\63\1\34\4\63\1\u0156"+
    "\5\63\1\34\15\63\1\34\2\63\1\212\1\211\6\34"+
    "\3\63\1\213\15\34\1\214\11\34\2\u0157\45\34\1\62"+
    "\42\34\2\u0158\32\34\1\62\37\34\1\u0159\36\34\1\62"+
    "\37\34\1\u015a\36\34\1\62\22\34\2\63\1\211\1\34"+
    "\1\63\1\u0157\1\u015b\11\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\12\63\1\u0158\1\u015c"+
    "\14\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\4\34\2\63\1\211\1\34\1\63\1\34"+
    "\7\63\1\u015d\2\63\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\13\34\1\330"+
    "\44\34\1\62\22\34\2\63\1\211\1\34\1\63\1\34"+
    "\1\63\1\332\10\63\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\21\34\1\260"+
    "\36\34\1\62\22\34\2\63\1\211\1\34\1\63\1\34"+
    "\7\63\1\252\2\63\1\34\15\63\1\34\2\63\1\212"+
    "\1\211\6\34\3\63\1\213\15\34\1\214\4\34\1\172"+
    "\1\u015e\2\34\1\172\1\34\12\172\1\34\15\172\1\34"+
    "\2\172\10\34\3\u015e\1\172\22\34\2\u015f\2\34\1\u015f"+
    "\1\34\12\u015f\1\34\15\u015f\1\34\2\u015f\10\34\3\u015f"+
    "\1\62\66\34\1\u0160\7\34\1\62\22\34\2\u015f\2\34"+
    "\1\u015f\1\34\12\u015f\1\34\15\u015f\1\34\2\u015f\3\34"+
    "\1\u0160\4\34\3\u015f\1\62\23\34\1\210\42\34\1\u0160"+
    "\4\34\3\210\1\62\31\34\1\u0161\44\34\1\62\22\34"+
    "\2\63\1\211\1\34\1\63\1\34\1\63\1\u0162\10\63"+
    "\1\34\15\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\36\34\1\u0163\21\34\1\62\22\34"+
    "\2\63\1\211\1\34\1\63\1\34\12\63\1\34\11\63"+
    "\1\u0164\3\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\4\34\2\63\1\211\1\34\1\63"+
    "\1\34\2\63\1\u0165\7\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\26\34"+
    "\1\376\31\34\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\12\63\1\34\1\63\1\112\13\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\13\34"+
    "\1\u013a\44\34\1\62\22\34\2\63\1\211\1\34\1\63"+
    "\1\34\1\63\1\u014d\10\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\16\34"+
    "\1\u0166\41\34\1\62\32\34\1\u0167\43\34\1\62\44\34"+
    "\1\260\31\34\1\62\44\34\1\u0168\31\34\1\62\22\34"+
    "\2\63\1\211\1\34\1\63\1\34\4\63\1\u0169\5\63"+
    "\1\34\15\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\4\34\2\63\1\211\1\34\1\63"+
    "\1\34\2\63\1\u016a\7\63\1\34\15\63\1\34\2\63"+
    "\1\212\1\211\6\34\3\63\1\213\15\34\1\214\4\34"+
    "\2\63\1\211\1\34\1\63\1\34\12\63\1\34\1\63"+
    "\1\252\13\63\1\34\2\63\1\212\1\211\6\34\3\63"+
    "\1\213\15\34\1\214\4\34\2\u015f\2\34\1\u015f\1\34"+
    "\12\u015f\1\34\15\u015f\1\34\2\u015f\1\u016b\7\34\3\u015f"+
    "\1\62\45\34\1\u014f\30\34\1\62\22\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\2\63\1\u0151\12\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\21\34\1\u013a\36\34\1\62\22\34\2\63\1\211"+
    "\1\34\1\63\1\34\7\63\1\u014d\2\63\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\2\63"+
    "\1\u016c\7\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\13\34\1\u016d\44\34"+
    "\1\62\37\34\1\u016e\36\34\1\62\44\34\1\u016f\31\34"+
    "\1\62\22\34\2\63\1\211\1\34\1\63\1\34\1\63"+
    "\1\u0170\10\63\1\34\15\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\7\63\1\u0171\2\63\1\34\15\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\3\34\43\u0148\2\34\10\u0148\1\u014a\21\u0148\1\34"+
    "\2\63\1\211\1\34\1\63\1\34\11\63\1\u0172\1\34"+
    "\15\63\1\34\2\63\1\212\1\211\6\34\3\63\1\213"+
    "\15\34\1\214\24\34\2\u014f\32\34\1\62\53\34\1\124"+
    "\22\34\1\62\34\34\1\u0173\41\34\1\62\22\34\2\63"+
    "\1\211\1\34\1\63\1\34\12\63\1\u014f\1\u0151\14\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\4\34\2\63\1\211\1\34\1\63\1\34\12\63"+
    "\1\34\10\63\1\125\4\63\1\34\2\63\1\212\1\211"+
    "\6\34\3\63\1\213\15\34\1\214\4\34\2\63\1\211"+
    "\1\34\1\63\1\34\12\63\1\34\3\63\1\306\11\63"+
    "\1\34\2\63\1\212\1\211\6\34\3\63\1\213\15\34"+
    "\1\214\26\34\1\u0174\31\34\1\62\21\34";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20097];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\32\1\1\0\25\1\1\0\3\1\2\0\1\1"+
    "\1\0\4\1\1\0\3\1\1\0\10\1\1\0\15\1"+
    "\1\0\1\1\6\0\6\1\1\0\5\1\1\0\12\1"+
    "\1\0\13\1\2\0\3\1\4\0\4\1\1\0\4\1"+
    "\2\0\11\1\2\0\11\1\1\0\3\1\7\0\5\1"+
    "\1\0\1\1\1\0\3\1\2\0\3\1\1\0\3\1"+
    "\1\0\6\1\2\0\4\1\2\0\6\1\1\0\6\1"+
    "\2\0\3\1\6\0\5\1\2\0\2\1\1\0\4\1"+
    "\1\0\1\1\1\0\5\1\1\0\4\1\2\0\4\1"+
    "\1\0\1\1\1\0\2\1\7\0\4\1\1\0\2\1"+
    "\1\0\1\1\2\0\2\1\3\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1\4\0\3\1\1\0\1\1"+
    "\1\0\2\1\5\0\2\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\4\0\6\1\1\0\1\1\1\0\2\1"+
    "\3\0\2\1\1\0\1\1\3\0\3\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int numero;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { numero=yyline; lexeme=yytext(); return ERROR;
            }
          case 53: break;
          case 2: 
            { numero=yyline; lexeme=yytext(); return VAR;
            }
          case 54: break;
          case 3: 
            { numero=yyline; lexeme=yytext(); return INT;
            }
          case 55: break;
          case 4: 
            { /*Ignore*/
            }
          case 56: break;
          case 5: 
            { numero=yyline; return COMILLAS;
            }
          case 57: break;
          case 6: 
            { numero=yyline; return PARENTESISI;
            }
          case 58: break;
          case 7: 
            { numero=yyline; return PARENTESISD;
            }
          case 59: break;
          case 8: 
            { numero=yyline; return DIRECTIVAS;
            }
          case 60: break;
          case 9: 
            { numero=yyline; return MODULO;
            }
          case 61: break;
          case 10: 
            { numero=yyline; return ANGLED;
            }
          case 62: break;
          case 11: 
            { numero=yyline; return ANGLEI;
            }
          case 63: break;
          case 12: 
            { numero=yyline; return PUNTO;
            }
          case 64: break;
          case 13: 
            { numero=yyline; return COMA;
            }
          case 65: break;
          case 14: 
            { numero=yyline; return INICIOB;
            }
          case 66: break;
          case 15: 
            { numero=yyline; return FINALB;
            }
          case 67: break;
          case 16: 
            { numero=yyline; lexeme=yytext(); return ASIGNACION;
            }
          case 68: break;
          case 17: 
            { numero=yyline; numero=yyline; return SUMA;
            }
          case 69: break;
          case 18: 
            { numero=yyline; return MULTIPLICACION;
            }
          case 70: break;
          case 19: 
            { numero=yyline; return RESTA;
            }
          case 71: break;
          case 20: 
            { numero=yyline; return DIVISION;
            }
          case 72: break;
          case 21: 
            { numero=yyline; return ASPERSON;
            }
          case 73: break;
          case 22: 
            { numero=yyline; return NOT;
            }
          case 74: break;
          case 23: 
            { numero=yyline; return COMILLAD;
            }
          case 75: break;
          case 24: 
            { numero=yyline; lexeme=yytext(); return PR;
            }
          case 76: break;
          case 25: 
            { numero=yyline; lexeme=yytext(); return EVENTO;
            }
          case 77: break;
          case 26: 
            { numero=yyline; lexeme=yytext(); return CONS;
            }
          case 78: break;
          case 27: 
            { numero=yyline; lexeme=yytext(); return HTML;
            }
          case 79: break;
          case 28: 
            { numero=yyline; lexeme=yytext(); return FLOAT;
            }
          case 80: break;
          case 29: 
            { numero=yyline; return COMPARACION;
            }
          case 81: break;
          case 30: 
            { numero=yyline; return SUMAM;
            }
          case 82: break;
          case 31: 
            { numero=yyline; return MULTIPLICACIONM;
            }
          case 83: break;
          case 32: 
            { numero=yyline; return RESTAM;
            }
          case 84: break;
          case 33: 
            { numero=yyline; return DIVISIONM;
            }
          case 85: break;
          case 34: 
            { numero=yyline; return AND;
            }
          case 86: break;
          case 35: 
            { numero=yyline; return DIFERENTE;
            }
          case 87: break;
          case 36: 
            { numero=yyline; return OR;
            }
          case 88: break;
          case 37: 
            { numero=yyline; lexeme=yytext(); return TEXTO;
            }
          case 89: break;
          case 38: 
            { numero=yyline; lexeme=yytext(); return COMENTARIO;
            }
          case 90: break;
          case 39: 
            { numero=yyline; lexeme=yytext(); return CARACTER;
            }
          case 91: break;
          case 40: 
            { numero=yyline; lexeme=yytext(); return LN2;
            }
          case 92: break;
          case 41: 
            { numero=yyline; lexeme=yytext(); return FUNCION;
            }
          case 93: break;
          case 42: 
            { numero=yyline; lexeme=yytext(); return ARREGLO;
            }
          case 94: break;
          case 43: 
            { numero=yyline; lexeme=yytext(); return LN10;
            }
          case 95: break;
          case 44: 
            { numero=yyline; lexeme=yytext(); return LOG2;
            }
          case 96: break;
          case 45: 
            { numero=yyline; lexeme=yytext(); return VAROBJETO;
            }
          case 97: break;
          case 46: 
            { numero=yyline;lexeme=yytext(); return PR;
            }
          case 98: break;
          case 47: 
            { numero=yyline; lexeme=yytext(); return LOG10;
            }
          case 99: break;
          case 48: 
            { numero=yyline; lexeme=yytext(); return OBJETO;
            }
          case 100: break;
          case 49: 
            { lexeme=yytext(); return PR;
            }
          case 101: break;
          case 50: 
            { numero=yyline; lexeme=yytext(); return LIB;
            }
          case 102: break;
          case 51: 
            { numero=yyline; lexeme=yytext(); return DOUBLE;
            }
          case 103: break;
          case 52: 
            { numero=yyline; lexeme=yytext(); return METOBJETO;
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
