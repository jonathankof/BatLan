/* The following code was generated by JFlex 1.6.1 */

package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Administardor/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\51\1\52\1\52\1\51\22\0\1\3\1\77\1\102"+
    "\2\0\1\55\1\76\1\103\1\50\1\53\1\73\1\72\1\65\1\74"+
    "\1\64\1\75\1\63\1\62\1\61\7\2\1\71\1\0\1\57\1\70"+
    "\1\56\1\0\1\54\1\1\1\42\2\1\1\1\1\41\2\1\1\40"+
    "\3\1\1\27\2\1\1\37\1\1\1\101\1\36\1\44\2\1\1\30"+
    "\3\1\1\25\1\0\1\26\1\60\1\47\1\0\1\16\1\4\1\22"+
    "\1\10\1\14\1\15\1\21\1\23\1\5\1\45\1\46\1\13\1\31"+
    "\1\6\1\11\1\32\1\43\1\20\1\17\1\7\1\12\1\33\1\35"+
    "\1\34\1\24\1\1\1\66\1\100\1\67\7\0\1\52\u1fa2\0\1\52"+
    "\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\27\2\1\5\1\0"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\1\1\27\1\30\1\0\2\2\2\1\1\0"+
    "\7\2\1\31\3\2\1\31\2\2\1\32\40\2\1\33"+
    "\1\34\2\2\2\0\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\0\1\50"+
    "\3\0\1\1\20\2\1\51\21\2\1\52\12\2\1\0"+
    "\1\36\1\44\4\0\1\52\1\1\1\31\10\2\1\52"+
    "\1\2\1\53\1\54\2\2\2\0\17\2\1\0\1\36"+
    "\1\44\2\0\1\52\1\1\1\0\6\2\1\55\1\2"+
    "\2\0\1\52\12\2\1\0\1\36\1\44\2\0\1\1"+
    "\1\31\5\2\1\56\6\2\1\0\1\36\1\44\2\0"+
    "\1\1\2\2\1\57\7\2\1\0\1\60\1\44\2\0"+
    "\1\1\5\2\1\0\1\44\2\0\1\1\4\2\1\0"+
    "\1\44\2\0\1\1\1\2\1\31\1\0\1\44\1\0"+
    "\2\31\1\2\2\0\1\31\1\44\1\31\1\1\1\0"+
    "\1\52\1\0\1\35\1\31\1\0\1\50\1\52\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\104\0\u0110\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\u072c\0\104\0\u0770\0\104\0\104\0\104"+
    "\0\u07b4\0\104\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\104\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\u0770\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\u0a5c\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0a5c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u0a5c\0\u0a5c\0\u1760\0\u17a4\0\u072c\0\u17e8\0\104\0\u182c"+
    "\0\104\0\104\0\104\0\104\0\104\0\u1870\0\104\0\104"+
    "\0\104\0\u09d4\0\u18b4\0\u09d4\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04"+
    "\0\u0a5c\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200"+
    "\0\u2244\0\u2288\0\u0a5c\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc"+
    "\0\u2640\0\u2684\0\u26c8\0\u270c\0\u26c8\0\u2750\0\u2794\0\u27d8"+
    "\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8"+
    "\0\u2a3c\0\u0a5c\0\u0a5c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90"+
    "\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0"+
    "\0\u3014\0\u3058\0\u309c\0\104\0\u30e0\0\u3124\0\u3168\0\u31ac"+
    "\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u0a5c\0\u3300\0\u3344\0\u3388"+
    "\0\u3344\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564"+
    "\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784"+
    "\0\u37c8\0\104\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\104"+
    "\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c"+
    "\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u0a5c\0\u3d18"+
    "\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3b3c"+
    "\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114"+
    "\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334"+
    "\0\u4378\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554"+
    "\0\u4598\0\u45dc\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4598\0\u4730"+
    "\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u46ec\0\u4884\0\u4884\0\u47b8"+
    "\0\u46a8\0\u48c8\0\u4840\0\u4840\0\u46a8\0\u48c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\22\1\3\2\2\1\23\1\3"+
    "\1\24\1\25\1\26\1\3\1\27\1\30\1\31\1\3"+
    "\1\32\2\3\1\33\1\34\2\3\1\35\1\5\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\3\4\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\3\1\62\1\63\27\36"+
    "\1\64\55\36\2\65\1\36\21\65\2\36\1\66\20\65"+
    "\11\36\3\65\15\36\1\65\3\36\1\67\1\4\1\36"+
    "\21\67\2\36\1\70\20\67\11\36\3\4\1\71\14\36"+
    "\1\67\3\36\2\65\1\36\1\72\1\73\2\65\1\74"+
    "\2\65\1\75\1\65\1\76\1\65\1\77\2\65\1\100"+
    "\2\65\2\36\1\66\20\65\11\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\36\11\65\1\101\7\65\2\36\1\66"+
    "\1\65\1\102\16\65\11\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\36\14\65\1\103\2\65\1\104\1\65\2\36"+
    "\1\66\20\65\11\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\36\5\65\1\105\2\65\1\106\10\65\2\36\1\66"+
    "\20\65\11\36\3\65\15\36\1\65\3\36\2\65\1\36"+
    "\2\65\1\107\16\65\2\36\1\66\2\65\1\110\15\65"+
    "\11\36\3\65\15\36\1\65\3\36\2\65\1\36\1\65"+
    "\1\111\1\112\2\65\1\113\2\65\1\114\10\65\2\36"+
    "\1\66\20\65\11\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\36\6\65\1\115\1\116\11\65\2\36\1\66\3\65"+
    "\1\117\1\120\13\65\11\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\36\5\65\1\121\4\65\1\122\6\65\2\36"+
    "\1\66\20\65\11\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\36\7\65\1\123\3\65\2\124\4\65\2\36\1\66"+
    "\20\65\11\36\3\65\15\36\1\65\3\36\2\65\1\36"+
    "\1\65\1\125\1\65\1\126\13\65\1\127\1\65\2\36"+
    "\1\66\13\65\1\130\4\65\11\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\36\1\65\1\131\17\65\2\36\1\66"+
    "\20\65\11\36\3\65\15\36\1\65\3\36\2\65\1\36"+
    "\7\65\1\132\2\65\1\133\6\65\2\36\1\66\20\65"+
    "\11\36\3\65\15\36\1\65\3\36\2\65\1\36\10\65"+
    "\1\134\10\65\2\36\1\66\20\65\11\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\36\13\65\1\135\5\65\2\36"+
    "\1\66\20\65\11\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\36\12\65\1\136\1\65\1\137\4\65\2\36\1\66"+
    "\20\65\11\36\3\65\15\36\1\65\3\36\2\65\1\36"+
    "\5\65\1\140\1\141\5\65\1\142\4\65\2\36\1\66"+
    "\20\65\11\36\3\65\15\36\1\65\3\36\2\65\1\36"+
    "\10\65\1\143\10\65\2\36\1\66\20\65\11\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\36\10\65\1\144\1\65"+
    "\1\145\4\65\1\146\1\65\2\36\1\66\20\65\11\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\36\3\65\1\147"+
    "\15\65\2\36\1\66\5\65\1\150\12\65\11\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\36\21\65\2\36\1\66"+
    "\10\65\1\151\7\65\11\36\3\65\15\36\1\152\3\36"+
    "\2\65\1\36\1\65\1\151\17\65\2\36\1\66\20\65"+
    "\11\36\3\65\15\36\1\65\3\36\2\65\1\36\17\65"+
    "\1\153\1\65\2\36\1\66\20\65\11\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\36\6\65\1\154\12\65\2\36"+
    "\1\66\20\65\11\36\3\65\15\36\1\65\3\36\24\155"+
    "\2\36\1\156\20\155\1\36\1\155\4\36\1\157\2\36"+
    "\3\155\15\36\1\155\4\36\1\160\24\36\1\64\31\36"+
    "\3\160\47\36\1\64\40\36\1\161\42\36\1\64\40\36"+
    "\1\162\42\36\1\64\40\36\1\163\42\36\1\64\40\36"+
    "\1\164\42\36\1\64\40\36\1\165\4\36\1\166\35\36"+
    "\1\64\46\36\1\167\34\36\1\64\40\36\1\170\42\36"+
    "\1\64\50\36\1\171\3\36\27\172\1\173\21\172\2\36"+
    "\27\172\1\174\1\172\17\36\1\175\7\36\1\64\55\36"+
    "\2\65\1\176\21\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\13\65"+
    "\1\135\5\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\67\1\36\21\67\2\36"+
    "\1\70\20\67\11\36\3\67\15\36\1\67\3\36\2\67"+
    "\1\36\13\67\1\200\5\67\2\36\1\70\20\67\11\36"+
    "\3\67\15\36\1\67\3\36\2\65\1\176\20\65\1\201"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\2\65\1\202\16\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\5\65\1\203\13\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\5\65\1\204\13\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\7\65\1\205\11\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\3\65\1\206\13\65\1\207\1\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\17\65\1\210\1\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\21\65\2\36\1\66\2\65\1\207\15\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\6\65"+
    "\1\211\11\65\1\101\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\10\65"+
    "\1\212\3\65\1\213\4\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\21\65\2\36\1\66\5\65\1\214\12\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\11\65"+
    "\1\215\7\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\4\65\1\216"+
    "\14\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\13\65\1\217\1\65"+
    "\1\220\3\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\21\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\1\221\1\222\1\65"+
    "\15\36\1\65\3\36\2\65\1\176\15\65\1\223\1\224"+
    "\2\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\11\65\1\225\3\65"+
    "\1\226\3\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\7\65\1\227"+
    "\11\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\13\65\1\211\5\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\10\65\1\230\10\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\16\65\1\231\2\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\14\65\1\101\4\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\7\65\1\116\11\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\11\65\1\232\7\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\21\65"+
    "\2\36\1\66\1\65\1\226\16\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\3\65\1\233"+
    "\15\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\12\65\1\130\6\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\5\65\1\234\13\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\14\65\1\235\4\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\15\65\1\236\3\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\1\65\1\237\17\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\13\65\1\211\1\240\4\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\14\65\1\241\4\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\15\65"+
    "\1\242\3\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\1\65\1\212"+
    "\17\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\21\65\2\36\1\66"+
    "\15\65\1\110\2\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\21\65\2\36\1\66\5\65"+
    "\1\243\12\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\1\244\20\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\1\65\1\245\17\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\17\65\1\246\1\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\12\65"+
    "\1\247\6\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\7\65\1\250"+
    "\11\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\1\65\1\251\17\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\10\65\1\252\10\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\1\65\1\253\17\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\14\65\1\254\4\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\21\65\2\36\1\66\1\65\1\255\16\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\16\155\1\256"+
    "\5\155\2\36\1\156\20\155\1\36\1\155\4\36\1\157"+
    "\2\36\3\155\15\36\1\155\4\36\1\257\24\36\1\64"+
    "\31\36\3\257\20\36\27\166\1\260\21\166\2\36\31\166"+
    "\17\172\1\261\7\172\1\173\21\172\2\36\27\172\1\174"+
    "\1\172\21\36\1\262\5\36\1\64\57\36\1\176\23\36"+
    "\1\64\20\36\1\177\1\176\32\36\27\263\1\264\21\263"+
    "\2\36\1\265\30\263\1\36\2\67\1\36\15\67\1\266"+
    "\3\67\2\36\1\70\20\67\11\36\3\67\15\36\1\67"+
    "\3\36\2\65\1\176\3\65\1\211\15\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\3\65\1\267\15\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\6\65\1\270\12\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\2\65\1\271\16\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\5\65"+
    "\1\272\13\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\14\65\1\273"+
    "\4\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\5\65\1\274\13\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\12\65\1\121\6\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\10\65\1\101\10\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\2\65\1\101\16\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\10\65\1\275\10\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\2\65\1\110\16\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\10\65"+
    "\1\276\10\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\10\65\1\277"+
    "\10\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\3\65\1\300\15\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\17\65\1\301\1\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\21\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\2\65\1\302\15\36\1\65\3\36\2\65"+
    "\1\176\21\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\1\303\1\304\1\65\15\36\1\65\3\36\2\65\1\176"+
    "\12\65\1\305\6\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\3\65"+
    "\1\110\15\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\306\21\65\2\36"+
    "\1\66\20\65\1\307\1\306\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\10\65\1\310\10\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\2\65\1\225\16\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\10\65\1\311\10\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\14\65\1\312\4\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\6\65"+
    "\1\313\12\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\6\65\1\314"+
    "\12\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\3\65\1\243\15\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\17\65\1\225\1\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\21\65\2\36\1\66\1\65\1\315"+
    "\16\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\14\65\1\316\4\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\10\65\1\243\10\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\21\65\2\36\1\66\1\317\17\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\7\65\1\320"+
    "\11\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\21\65\2\36\1\66"+
    "\3\65\1\321\14\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\1\65\1\322\17\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\21\65\2\36\1\66\2\65\1\323"+
    "\15\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\21\65\2\36\1\66\16\65\1\110\1\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\7\65\1\211\11\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\21\65\2\36\1\66\2\65\1\324\15\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\3\65"+
    "\1\325\15\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\10\65\1\326"+
    "\10\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\21\65\2\36\1\66"+
    "\2\65\1\110\15\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\20\155\1\327\3\155\2\36\1\156\20\155"+
    "\1\36\1\155\4\36\1\157\2\36\3\155\15\36\1\155"+
    "\4\36\1\330\24\36\1\64\31\36\3\330\20\36\17\166"+
    "\1\331\7\166\1\260\21\166\2\36\31\166\21\172\1\332"+
    "\5\172\1\173\21\172\2\36\27\172\1\174\1\172\27\36"+
    "\1\64\1\333\102\36\1\64\23\36\1\334\47\36\1\175"+
    "\7\36\1\64\23\36\1\334\31\36\2\67\1\36\21\67"+
    "\2\36\1\70\1\335\17\67\11\36\3\67\15\36\1\67"+
    "\3\36\2\65\1\176\21\65\1\336\1\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\1\251\20\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\15\65"+
    "\1\101\3\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\12\65\1\337"+
    "\6\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\1\65\1\204\17\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\14\65\1\337\4\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\12\65\1\340\6\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\2\65\1\341\16\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\14\65\1\342\4\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\10\65\1\343\10\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\3\65"+
    "\1\344\15\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\21\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\2\65\1\345\15\36"+
    "\1\65\3\36\2\65\1\176\3\65\1\346\15\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\5\36\1\306\23\36\1\64\20\36\1\307\1\306\32\36"+
    "\27\347\1\350\21\347\2\36\1\351\30\347\1\36\2\65"+
    "\1\176\14\65\1\151\4\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\21\65\2\36\1\66\2\65\1\337\15\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\10\65"+
    "\1\352\10\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\12\65\1\353"+
    "\6\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\7\65\1\354\11\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\1\110\20\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\20\65\1\110\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\12\65\1\355\6\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\1\65"+
    "\1\356\17\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\12\65\1\201"+
    "\6\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\16\65\1\357\2\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\5\65\1\360\13\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\21\65\2\36\1\66\12\65\1\361"+
    "\5\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\16\65\1\362\2\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\12\65\1\363\6\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\24\155\2\36"+
    "\1\156\1\364\17\155\1\36\1\155\4\36\1\157\2\36"+
    "\3\155\15\36\1\155\4\36\1\365\24\36\1\64\31\36"+
    "\3\365\20\36\21\166\1\366\5\166\1\260\21\166\2\36"+
    "\31\166\27\172\1\173\1\367\20\172\2\36\27\172\1\174"+
    "\1\172\16\36\1\370\10\36\1\64\55\36\2\67\1\36"+
    "\12\67\1\371\6\67\2\36\1\70\20\67\11\36\3\67"+
    "\15\36\1\67\30\36\1\372\1\64\55\36\2\65\1\176"+
    "\3\65\1\101\15\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\4\65"+
    "\1\373\14\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\13\65\1\374"+
    "\5\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\21\65\2\36\1\66"+
    "\17\65\1\375\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\2\65\1\376\16\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\13\65\1\226\5\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\1\65\1\377\17\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\31\36\1\64\23\36"+
    "\1\u0100\47\36\1\175\7\36\1\64\23\36\1\u0100\31\36"+
    "\2\65\1\176\4\65\1\110\14\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\3\65\1\u0101\15\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\4\65\1\u0102\14\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\14\65"+
    "\1\u0103\4\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\16\65\1\101"+
    "\2\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\7\65\1\u0104\11\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\2\65\1\226\16\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\20\65\1\u0105\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\17\65\1\101\1\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\4\65\1\u0106\14\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\15\155\1\u0107\6\155"+
    "\2\36\1\156\20\155\1\36\1\155\4\36\1\157\2\36"+
    "\3\155\15\36\1\155\4\36\1\u0108\24\36\1\64\31\36"+
    "\3\u0108\20\36\27\166\1\260\1\u0109\20\166\2\36\31\166"+
    "\16\172\1\u010a\10\172\1\173\21\172\2\36\27\172\1\174"+
    "\1\172\20\36\1\u010b\6\36\1\64\55\36\2\67\1\36"+
    "\14\67\1\u010c\4\67\2\36\1\70\20\67\11\36\3\67"+
    "\15\36\1\67\3\36\2\65\1\176\1\65\1\u010d\17\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\1\65\1\u010e\6\65\1\u010f"+
    "\10\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\12\65\1\u0110\6\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\10\65\1\u0111\10\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\5\65\1\u0112\13\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\1\65\1\u0113\17\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\10\65\1\u0114\10\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\2\65\1\u0115\16\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\10\65"+
    "\1\226\10\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\21\65\2\36"+
    "\1\66\6\65\1\u0116\11\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\13\65\1\243\5\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\17\155\1\u0117\4\155\2\36\1\156\20\155"+
    "\1\36\1\155\4\36\1\157\2\36\3\155\15\36\1\155"+
    "\4\36\1\u0118\24\36\1\64\31\36\3\u0118\20\36\16\166"+
    "\1\u0119\10\166\1\260\21\166\2\36\31\166\20\172\1\u011a"+
    "\6\172\1\173\21\172\2\36\27\172\1\174\1\172\6\36"+
    "\1\u011b\20\36\1\64\55\36\2\67\1\36\2\67\1\u011c"+
    "\16\67\2\36\1\70\20\67\11\36\3\67\15\36\1\67"+
    "\3\36\2\65\1\176\2\65\1\u011d\16\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\21\65\2\36\1\66\3\65\1\241\14\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\3\65\1\u011e\15\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\14\65\1\110\4\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\2\65"+
    "\1\243\16\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\5\65\1\u011f"+
    "\13\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\14\65\1\226\4\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\1\65\1\u0120\17\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\2\65\1\176\3\65\1\u0121\15\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\5\155\1\u0122\16\155\2\36\1\156\20\155\1\36\1\155"+
    "\4\36\1\157\2\36\3\155\15\36\1\155\2\36\20\166"+
    "\1\u0123\6\166\1\260\21\166\2\36\31\166\6\172\1\u0124"+
    "\20\172\1\173\21\172\2\36\27\172\1\174\1\172\5\36"+
    "\1\u0125\21\36\1\64\55\36\2\67\1\36\1\67\1\u0126"+
    "\17\67\2\36\1\70\20\67\11\36\3\67\15\36\1\67"+
    "\3\36\2\65\1\176\15\65\1\u010f\3\65\2\36\1\66"+
    "\20\65\1\177\1\176\7\36\3\65\15\36\1\65\3\36"+
    "\2\65\1\176\3\65\1\u0127\15\65\2\36\1\66\20\65"+
    "\1\177\1\176\7\36\3\65\15\36\1\65\3\36\2\65"+
    "\1\176\2\65\1\u0128\16\65\2\36\1\66\20\65\1\177"+
    "\1\176\7\36\3\65\15\36\1\65\3\36\2\65\1\176"+
    "\2\65\1\u0129\16\65\2\36\1\66\20\65\1\177\1\176"+
    "\7\36\3\65\15\36\1\65\3\36\2\65\1\176\10\65"+
    "\1\u012a\10\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\4\155\1\u012b\17\155\2\36"+
    "\1\156\20\155\1\36\1\155\4\36\1\157\2\36\3\155"+
    "\15\36\1\155\2\36\6\166\1\u012c\20\166\1\260\21\166"+
    "\2\36\31\166\5\172\1\u012d\21\172\1\173\21\172\2\36"+
    "\27\172\1\174\1\172\6\36\1\u012e\20\36\1\64\55\36"+
    "\2\67\1\36\2\67\1\u012f\16\67\2\36\1\70\20\67"+
    "\11\36\3\67\15\36\1\67\3\36\2\65\1\176\12\65"+
    "\1\u0130\6\65\2\36\1\66\20\65\1\177\1\176\7\36"+
    "\3\65\15\36\1\65\3\36\2\65\1\176\13\65\1\u010f"+
    "\5\65\2\36\1\66\20\65\1\177\1\176\7\36\3\65"+
    "\15\36\1\65\3\36\2\65\1\176\15\65\1\u0131\3\65"+
    "\2\36\1\66\20\65\1\177\1\176\7\36\3\65\15\36"+
    "\1\65\3\36\2\65\1\176\21\65\2\36\1\66\2\65"+
    "\1\151\15\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\3\36\5\155\1\u0132\16\155\2\36\1\156\20\155\1\36"+
    "\1\155\4\36\1\157\2\36\3\155\15\36\1\155\2\36"+
    "\5\166\1\u0133\21\166\1\260\21\166\2\36\31\166\6\172"+
    "\1\u0134\20\172\1\173\21\172\2\36\27\172\1\174\1\172"+
    "\21\36\1\u0135\5\36\1\64\55\36\2\67\1\36\15\67"+
    "\1\u0136\3\67\2\36\1\70\20\67\11\36\3\67\15\36"+
    "\1\67\3\36\2\65\1\176\16\65\1\250\2\65\2\36"+
    "\1\66\20\65\1\177\1\176\7\36\3\65\15\36\1\65"+
    "\2\36\1\0\2\u0137\1\u0138\21\u0137\2\0\21\u0137\1\u0139"+
    "\1\u0138\7\0\3\u0137\15\0\1\u0137\2\0\1\36\20\155"+
    "\1\u013a\3\155\2\36\1\156\20\155\1\36\1\155\4\36"+
    "\1\157\2\36\3\155\15\36\1\155\2\36\6\166\1\u013b"+
    "\20\166\1\260\21\166\2\36\31\166\21\172\1\u013c\5\172"+
    "\1\173\21\172\2\36\27\172\1\174\1\172\105\0\2\u013d"+
    "\1\0\21\u013d\2\0\21\u013d\11\0\3\u013d\15\0\1\u013d"+
    "\5\0\1\u0138\44\0\1\u0139\1\u0138\32\0\51\u013e\2\0"+
    "\1\u013f\30\u013e\1\0\24\u0140\2\0\21\u0140\1\0\1\u0140"+
    "\4\0\1\u0141\2\0\3\u0140\15\0\1\u0140\2\0\21\166"+
    "\1\u0142\5\166\1\260\21\166\2\36\31\166\51\u0143\2\0"+
    "\27\u0143\1\u0144\1\u0143\53\0\1\u0145\30\0\51\u0146\2\0"+
    "\31\u0146";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18700];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\34\1\1\0\25\1\1\0\4\1\1\0\63\1"+
    "\2\0\13\1\2\0\1\1\3\0\56\1\1\0\2\1"+
    "\4\0\21\1\2\0\17\1\1\0\2\1\2\0\2\1"+
    "\1\0\10\1\2\0\13\1\1\0\2\1\2\0\16\1"+
    "\1\0\2\1\2\0\13\1\1\0\2\1\2\0\6\1"+
    "\1\0\1\1\2\0\5\1\1\0\1\1\2\0\3\1"+
    "\1\0\1\1\1\0\1\11\2\1\2\0\4\1\1\0"+
    "\1\1\1\0\1\11\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 49: break;
          case 2: 
            { lexeme=yytext(); return VAR;
            }
          case 50: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 51: break;
          case 4: 
            { /*Ignore*/
            }
          case 52: break;
          case 5: 
            { return PARENTESISI;
            }
          case 53: break;
          case 6: 
            { return PARENTESISD;
            }
          case 54: break;
          case 7: 
            { return DIRECTIVAS;
            }
          case 55: break;
          case 8: 
            { return MODULO;
            }
          case 56: break;
          case 9: 
            { lexeme=yytext(); return ANGLED;
            }
          case 57: break;
          case 10: 
            { lexeme=yytext(); return ANGLEI;
            }
          case 58: break;
          case 11: 
            { lexeme=yytext(); return EXPO;
            }
          case 59: break;
          case 12: 
            { return PUNTO;
            }
          case 60: break;
          case 13: 
            { return COMA;
            }
          case 61: break;
          case 14: 
            { return INICIOB;
            }
          case 62: break;
          case 15: 
            { return FINALB;
            }
          case 63: break;
          case 16: 
            { lexeme=yytext(); return ASIGNACION;
            }
          case 64: break;
          case 17: 
            { return SUMA;
            }
          case 65: break;
          case 18: 
            { return MULTIPLICACION;
            }
          case 66: break;
          case 19: 
            { return RESTA;
            }
          case 67: break;
          case 20: 
            { return DIVISION;
            }
          case 68: break;
          case 21: 
            { return ASPERSON;
            }
          case 69: break;
          case 22: 
            { return NOT;
            }
          case 70: break;
          case 23: 
            { return COMILLAD;
            }
          case 71: break;
          case 24: 
            { return COMILLAS;
            }
          case 72: break;
          case 25: 
            { lexeme=yytext(); return PR;
            }
          case 73: break;
          case 26: 
            { lexeme=yytext(); return EVENTO;
            }
          case 74: break;
          case 27: 
            { lexeme=yytext(); return CONS;
            }
          case 75: break;
          case 28: 
            { return PR;
            }
          case 76: break;
          case 29: 
            { lexeme=yytext(); return HTML;
            }
          case 77: break;
          case 30: 
            { lexeme=yytext(); return FLOAT;
            }
          case 78: break;
          case 31: 
            { return COMPARACION;
            }
          case 79: break;
          case 32: 
            { return SUMAM;
            }
          case 80: break;
          case 33: 
            { return MULTIPLICACIONM;
            }
          case 81: break;
          case 34: 
            { return RESTAM;
            }
          case 82: break;
          case 35: 
            { return DIVISIONM;
            }
          case 83: break;
          case 36: 
            { lexeme=yytext(); return COMENTARIO;
            }
          case 84: break;
          case 37: 
            { return AND;
            }
          case 85: break;
          case 38: 
            { return DIFERENTE;
            }
          case 86: break;
          case 39: 
            { return OR;
            }
          case 87: break;
          case 40: 
            { lexeme=yytext(); return TEXTO;
            }
          case 88: break;
          case 41: 
            { lexeme=yytext(); return LN2;
            }
          case 89: break;
          case 42: 
            { lexeme=yytext(); return FUNCION;
            }
          case 90: break;
          case 43: 
            { lexeme=yytext(); return LN10;
            }
          case 91: break;
          case 44: 
            { lexeme=yytext(); return LOG2;
            }
          case 92: break;
          case 45: 
            { lexeme=yytext(); return LOG10;
            }
          case 93: break;
          case 46: 
            { lexeme=yytext(); return OBJETO;
            }
          case 94: break;
          case 47: 
            { lexeme=yytext(); return LIB;
            }
          case 95: break;
          case 48: 
            { lexeme=yytext(); return DOUBLE;
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
