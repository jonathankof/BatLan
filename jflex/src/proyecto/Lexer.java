/* The following code was generated by JFlex 1.6.1 */

package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Ricardo/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\43\1\44\1\44\1\43\22\0\1\3\1\70\1\71"+
    "\2\0\1\47\1\67\1\72\1\42\1\45\1\64\1\63\1\56\1\65"+
    "\1\55\1\66\1\54\1\53\1\52\7\2\1\62\1\0\1\51\1\61"+
    "\1\50\1\0\1\46\1\20\1\5\1\25\1\12\1\16\1\17\1\24"+
    "\1\26\1\7\1\36\1\40\1\15\1\30\1\10\1\13\1\32\1\35"+
    "\1\23\1\22\1\11\1\14\1\33\1\31\1\34\1\27\1\1\1\73"+
    "\1\0\1\74\1\0\1\41\1\0\1\20\1\5\1\25\1\12\1\16"+
    "\1\17\1\24\1\26\1\7\1\36\1\40\1\15\1\30\1\10\1\13"+
    "\1\32\1\35\1\23\1\22\1\11\1\14\1\33\1\31\1\34\1\27"+
    "\1\1\1\57\1\4\1\60\7\0\1\44\252\0\2\6\115\0\1\21"+
    "\u1ea8\0\1\44\1\44\u0100\0\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\2\1\1"+
    "\10\2\1\1\11\2\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\2\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\1"+
    "\1\0\1\30\1\2\1\0\4\2\1\0\2\2\1\31"+
    "\1\0\1\31\3\2\1\31\2\2\1\32\1\0\10\2"+
    "\2\33\3\2\1\0\1\2\6\0\6\2\1\0\5\2"+
    "\1\0\12\2\1\0\1\34\1\1\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\0\1\46"+
    "\5\0\1\2\1\0\4\2\2\0\11\2\2\0\2\2"+
    "\1\47\6\2\1\0\3\2\7\0\5\2\1\0\1\2"+
    "\1\0\3\2\2\0\3\2\1\0\1\2\1\50\1\2"+
    "\1\0\3\2\1\35\1\51\1\0\1\50\1\0\1\52"+
    "\3\2\2\0\5\2\1\50\1\0\1\50\1\2\1\53"+
    "\1\54\2\2\2\0\3\2\6\0\1\50\4\2\2\0"+
    "\2\2\1\0\2\2\1\32\1\2\1\0\1\2\1\0"+
    "\1\2\1\35\1\55\1\56\1\0\4\2\2\0\2\2"+
    "\1\57\1\2\1\0\1\50\2\2\5\0\4\2\1\0"+
    "\2\2\1\0\1\2\2\0\1\2\1\35\3\0\2\2"+
    "\1\0\2\2\1\0\1\2\1\0\1\2\1\60\1\61"+
    "\4\0\3\2\1\0\1\2\1\0\1\2\1\35\3\0"+
    "\1\2\1\60\1\0\1\62\1\2\1\62\1\2\1\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\63\1\55\1\64"+
    "\1\0\1\2\1\0\2\2\3\0\3\2\3\0\3\2"+
    "\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\75\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\75\0\75\0\75\0\75\0\75\0\u05f5"+
    "\0\u0632\0\75\0\75\0\75\0\u066f\0\75\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1"+
    "\0\u0632\0\75\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u0af6\0\75\0\u0b33\0\u0894\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0894\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\75\0\u0894"+
    "\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u05f5\0\75\0\u171d\0\u175a\0\75\0\75"+
    "\0\75\0\75\0\75\0\u1797\0\75\0\75\0\u081a\0\u081a"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67"+
    "\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f"+
    "\0\u1d8c\0\u1dc9\0\u0894\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2"+
    "\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u0894\0\u265d"+
    "\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\75\0\u27cb\0\u27cb"+
    "\0\u2808\0\75\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976"+
    "\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e"+
    "\0\u0894\0\u0894\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc"+
    "\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\75"+
    "\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f"+
    "\0\u309c\0\u30d9\0\u3116\0\75\0\u3153\0\u3190\0\u31cd\0\u320a"+
    "\0\u3247\0\u3284\0\u32c1\0\u0894\0\u32fe\0\u333b\0\u3378\0\u33b5"+
    "\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u0894\0\u3523\0\u3560"+
    "\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b"+
    "\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u38f3"+
    "\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb"+
    "\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3"+
    "\0\u3d00\0\75\0\u0894\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31"+
    "\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc\0\u4019"+
    "\0\u4056\0\u4093\0\u40d0\0\u0894\0\u410d\0\75\0\u414a\0\u0894"+
    "\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5\0\u4332"+
    "\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u3fdc\0\u4463\0\75\0\u44a0"+
    "\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e\0\u464b\0\u4688"+
    "\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9\0\u47f6\0\u4833\0\u4870"+
    "\0\u48ad\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\3\1\12\1\13\1\3\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\3\1\24\1\25\1\3"+
    "\1\26\1\27\1\30\1\31\2\3\1\32\1\2\2\3"+
    "\1\33\1\5\1\0\1\34\1\35\1\36\1\37\1\40"+
    "\3\4\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\2\2"+
    "\76\0\2\57\2\0\1\57\1\0\12\57\1\0\15\57"+
    "\1\0\2\57\10\0\3\57\21\0\1\60\1\4\2\0"+
    "\1\60\1\0\12\60\1\0\15\60\1\0\2\60\10\0"+
    "\3\4\1\61\23\0\1\62\71\0\2\57\2\0\1\63"+
    "\1\64\1\65\2\57\1\66\2\57\1\67\1\57\1\70"+
    "\1\57\1\71\1\72\2\57\1\73\11\57\1\0\2\57"+
    "\10\0\3\57\37\0\1\74\10\0\1\75\45\0\2\57"+
    "\2\0\1\57\1\0\10\57\1\76\1\57\1\0\6\57"+
    "\1\77\6\57\1\0\2\57\10\0\3\57\21\0\2\57"+
    "\2\0\1\57\1\0\12\57\1\0\1\57\1\100\2\57"+
    "\1\101\10\57\1\0\2\57\10\0\3\57\21\0\2\57"+
    "\2\0\1\57\1\0\4\57\1\102\2\57\1\103\2\57"+
    "\1\0\15\57\1\0\2\57\10\0\3\57\21\0\2\57"+
    "\2\0\1\57\1\0\1\57\1\104\10\57\1\0\10\57"+
    "\1\105\4\57\1\0\2\57\10\0\3\57\21\0\2\57"+
    "\2\0\1\57\1\106\1\107\1\110\2\57\1\111\2\57"+
    "\1\112\2\57\1\0\15\57\1\0\2\57\10\0\3\57"+
    "\21\0\2\57\2\0\1\57\1\0\5\57\1\113\1\114"+
    "\3\57\1\0\11\57\1\115\1\116\2\57\1\0\2\57"+
    "\10\0\3\57\21\0\2\57\2\0\1\57\1\117\1\120"+
    "\3\57\1\121\4\57\1\122\1\0\15\57\1\0\2\57"+
    "\10\0\3\57\21\0\2\57\2\0\1\57\1\0\6\57"+
    "\1\123\3\57\1\124\2\125\13\57\1\0\2\57\10\0"+
    "\3\57\26\0\2\126\1\0\1\127\14\0\1\130\1\131"+
    "\1\0\1\132\3\0\1\133\40\0\2\57\2\0\1\57"+
    "\1\126\1\134\1\57\1\135\7\57\1\0\4\57\1\136"+
    "\1\137\1\57\1\140\3\57\1\141\1\57\1\0\2\57"+
    "\10\0\3\57\21\0\2\57\2\0\1\57\1\142\1\143"+
    "\11\57\1\0\15\57\1\0\2\57\10\0\3\57\21\0"+
    "\2\57\2\0\1\57\1\0\6\57\1\144\2\57\1\145"+
    "\1\0\15\57\1\0\2\57\10\0\3\57\21\0\2\57"+
    "\2\0\1\57\1\0\7\57\1\146\2\57\1\0\15\57"+
    "\1\0\2\57\10\0\3\57\21\0\2\57\2\0\1\57"+
    "\1\0\11\57\1\147\1\150\1\151\1\152\13\57\1\0"+
    "\2\57\10\0\3\57\21\0\2\57\2\0\1\57\1\0"+
    "\7\57\1\153\1\57\1\154\1\0\4\57\1\155\10\57"+
    "\1\0\2\57\10\0\3\57\21\0\2\57\2\0\1\57"+
    "\1\117\1\120\3\57\1\156\1\157\4\57\1\0\1\57"+
    "\1\160\13\57\1\0\2\57\10\0\3\57\21\0\2\57"+
    "\2\0\1\57\1\0\7\57\1\161\2\57\1\0\15\57"+
    "\1\0\2\57\10\0\3\57\21\0\2\57\2\0\1\57"+
    "\1\0\5\57\1\162\4\57\1\0\15\57\1\0\2\57"+
    "\10\0\3\57\21\0\3\163\1\0\1\163\1\0\12\163"+
    "\1\0\15\163\1\0\2\163\1\0\1\163\4\0\1\164"+
    "\1\0\3\163\21\0\1\165\1\166\2\0\1\165\1\0"+
    "\12\165\1\0\15\165\1\0\2\165\10\0\3\166\1\165"+
    "\100\0\1\167\74\0\1\170\74\0\1\171\74\0\1\172"+
    "\74\0\1\173\4\0\1\174\75\0\1\175\66\0\1\176"+
    "\13\0\43\177\2\0\24\177\1\200\3\177\1\0\1\201"+
    "\3\0\1\201\1\0\12\201\1\0\15\201\1\0\2\201"+
    "\34\0\2\57\1\202\1\0\1\57\1\0\12\57\1\0"+
    "\15\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\2\0\2\60\2\0\1\60\1\0\12\60"+
    "\1\0\15\60\1\0\2\60\10\0\3\60\21\0\2\57"+
    "\1\202\1\0\1\57\1\0\12\57\1\0\5\57\1\206"+
    "\7\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\11\0\1\207\65\0\2\57\1\202\1\0"+
    "\1\57\1\0\1\57\1\210\10\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\4\57\1\211"+
    "\5\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\4\57\1\212\5\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\6\57\1\213"+
    "\3\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\12\0\1\214\14\0\1\215"+
    "\47\0\2\57\1\202\1\0\1\57\1\0\2\57\1\216"+
    "\7\57\1\0\4\57\1\217\10\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\0\12\57\1\0\4\57\1\220"+
    "\10\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\33\0\1\215\43\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\0\10\57\1\217\4\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\5\57\1\221"+
    "\4\57\1\0\5\57\1\76\7\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\0\7\57\1\222\2\57\1\0"+
    "\1\57\1\223\13\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\0\7\57\1\224\5\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\10\57\1\225"+
    "\1\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\3\57\1\226\6\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\22\0\2\227\1\0\1\230\51\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\227\1\231\1\57\1\232\12\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\1\233"+
    "\1\234\1\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\12\57\1\0\2\57\1\235\1\236"+
    "\11\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\2\0\2\57\1\202\1\0\1\57\1\0"+
    "\10\57\1\237\1\57\1\0\2\57\1\240\12\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\6\57\1\241"+
    "\3\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\242\1\221\14\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\7\57\1\243\2\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\12\57\1\0\3\57\1\244\11\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\1\57"+
    "\1\76\13\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\6\57\1\114\3\57\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\10\57\1\245\1\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\31\0\1\246\45\0\2\57\1\202"+
    "\1\0\1\57\1\0\12\57\1\0\6\57\1\240\6\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\12\0\1\247\101\0\1\250\1\0\1\133\67\0"+
    "\1\251\102\0\2\252\60\0\2\253\110\0\1\254\52\0"+
    "\2\57\1\202\1\0\1\57\1\0\2\57\1\255\7\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\7\57\1\256\1\57\1\141\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\4\57\1\257"+
    "\5\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\252\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\253\1\260\11\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\1\57\1\261\13\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\25\0\1\262\51\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\2\57"+
    "\1\263\12\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\264\1\265\11\57\1\0\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\0\12\57\1\242\1\221\1\266"+
    "\13\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\2\0\2\57\1\202\1\0\1\57\1\0"+
    "\12\57\1\0\1\57\1\267\13\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\270\1\222\11\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\25\0\1\271\51\0\2\57\1\202\1\0\1\57"+
    "\1\0\12\57\1\0\2\57\1\272\12\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\14\57"+
    "\1\105\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\2\0\2\57\1\202\1\0\1\57\1\0"+
    "\11\57\1\273\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\6\57\1\274\3\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\275\1\276"+
    "\11\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\0\7\57\1\277\5\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\300\1\0\12\57\1\0"+
    "\15\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\2\0\2\57\1\202\1\0\1\57\1\301"+
    "\1\302\11\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\12\57\1\0\4\57\1\303\10\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\6\57\1\304\6\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\165\2\0"+
    "\1\165\1\0\12\165\1\0\15\165\1\0\2\165\10\0"+
    "\4\165\20\0\1\165\1\305\2\0\1\165\1\0\12\165"+
    "\1\0\15\165\1\0\2\165\10\0\3\305\1\165\17\0"+
    "\43\174\2\0\30\174\72\0\1\306\5\0\1\202\36\0"+
    "\1\203\1\202\31\0\43\307\2\0\1\310\27\307\1\0"+
    "\1\311\3\0\1\311\1\0\12\311\1\0\15\311\1\0"+
    "\2\311\35\0\1\205\47\0\3\205\17\0\1\312\1\0"+
    "\2\57\1\202\1\0\1\57\1\0\2\57\1\221\7\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\12\0\1\74\64\0\2\57\1\202"+
    "\1\0\1\57\1\0\2\57\1\76\7\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\5\57"+
    "\1\313\4\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\1\57\1\314\10\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\4\57"+
    "\1\315\5\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\24\0\1\316\64\0"+
    "\1\317\62\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\1\57\1\320\13\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\4\57\1\321\5\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\11\57"+
    "\1\121\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\7\57\1\76\2\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\1\57\1\76"+
    "\10\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\7\57\1\322\2\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\1\57\1\105"+
    "\10\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\7\57\1\323\2\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\7\57\1\324"+
    "\2\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\12\0\1\325\111\0\1\326"+
    "\47\0\2\57\1\202\1\0\1\57\1\0\2\57\1\327"+
    "\7\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\0\4\57\1\330\10\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\12\57\1\0"+
    "\15\57\1\0\2\57\1\203\1\202\6\0\2\57\1\331"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\12\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\1\332\1\333\1\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\11\57\1\334\1\0"+
    "\15\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\2\0\2\57\1\202\1\0\1\57\1\0"+
    "\2\57\1\105\7\57\1\0\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\335\1\0\1\57\1\0\12\57\1\0\15\57\1\0"+
    "\2\57\1\336\1\335\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\7\57\1\337"+
    "\2\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\17\0\1\74\57\0\2\57"+
    "\1\202\1\0\1\57\1\0\1\57\1\237\10\57\1\0"+
    "\15\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\2\0\2\57\1\202\1\0\1\57\1\0"+
    "\7\57\1\340\2\57\1\0\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\0\12\57\1\0\1\57\1\341"+
    "\13\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\4\0\1\246\36\0\1\342\1\246\45\0"+
    "\1\343\112\0\1\344\56\0\1\345\71\0\1\346\74\0"+
    "\1\347\74\0\1\350\64\0\2\57\1\202\1\0\1\57"+
    "\1\0\5\57\1\351\4\57\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\10\57"+
    "\1\352\4\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\5\57\1\353\4\57\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\2\57\1\354\7\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\2\57\1\277\7\57\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\27\0"+
    "\1\355\47\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\4\57\1\237\10\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\31\0\1\356\45\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\6\57"+
    "\1\357\6\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\12\57\1\0\1\57\1\360\13\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\7\57\1\277\2\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\11\0\1\74\115\0\1\361\44\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\7\57"+
    "\1\362\5\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\12\57\1\0\10\57\1\363\4\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\15\57"+
    "\1\364\1\105\1\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\16\0\1\242\60\0\2\57\1\202\1\0"+
    "\1\57\1\0\6\57\1\221\3\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\6\57\1\365"+
    "\3\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\34\0\1\366\42\0\2\57"+
    "\1\202\1\0\1\57\1\0\12\57\1\0\11\57\1\367"+
    "\3\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\2\0\2\57\1\202\1\0\1\57\1\370"+
    "\1\371\11\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\12\57\1\0\10\57\1\105\4\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\1\165\1\372\2\0\1\165\1\0\12\165"+
    "\1\0\15\165\1\0\2\165\10\0\3\372\1\165\64\0"+
    "\1\350\30\0\2\373\2\0\1\373\1\0\12\373\1\0"+
    "\15\373\1\0\2\373\10\0\3\373\21\0\2\57\1\202"+
    "\1\0\1\276\1\0\12\57\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\2\57"+
    "\1\374\12\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\11\57\1\210\1\0\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\7\0\2\375"+
    "\110\0\1\207\52\0\2\57\1\202\1\0\1\57\1\375"+
    "\1\376\11\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\12\57\1\0\1\57\1\210\13\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\11\57"+
    "\1\377\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\1\57\1\u0100\10\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\12\57\1\0"+
    "\1\57\1\u0101\13\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\17\0\1\u0102\67\0\1\u0103"+
    "\64\0\2\57\1\202\1\0\1\57\1\0\7\57\1\u0104"+
    "\2\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\2\57\1\u0105\7\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\12\57\1\0"+
    "\15\57\1\0\2\57\1\203\1\202\6\0\2\57\1\u0106"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\2\57\1\u0107\7\57\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\4\0"+
    "\1\335\36\0\1\336\1\335\31\0\43\u0108\2\0\1\u0109"+
    "\27\u0108\1\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\1\57\1\120\13\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\12\57\1\0\10\57\1\u010a\4\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\7\57"+
    "\1\u010b\2\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\1\0\43\u0108\2\0"+
    "\30\u0108\20\0\1\u010c\61\0\1\u010d\104\0\1\u010e\75\0"+
    "\1\u010f\103\0\1\u0110\50\0\2\57\1\202\1\0\1\57"+
    "\1\0\11\57\1\u0111\1\0\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\u0112\1\0\12\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\6\57\1\u0113"+
    "\3\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\0\3\57\1\u0114\11\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\12\0\1\364\70\0\1\364\70\0\2\57\1\202\1\0"+
    "\1\105\1\0\12\57\1\0\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\0\12\57\1\0\5\57\1\105"+
    "\7\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\21\0\1\u0115\55\0\2\57\1\202\1\0"+
    "\1\57\1\0\11\57\1\u0116\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\4\57\1\u0117\5\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\u0118\1\u0119\11\57\1\0\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\21\0\1\u011a"+
    "\55\0\2\57\1\202\1\0\1\57\1\0\11\57\1\206"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\26\0\1\u011b\50\0\2\57\1\202"+
    "\1\0\1\57\1\0\12\57\1\0\3\57\1\u011c\11\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\1\165\1\u011d\2\0\1\165\1\0\12\165"+
    "\1\0\15\165\1\0\2\165\10\0\3\u011d\1\165\20\0"+
    "\2\373\1\0\1\u011e\1\373\1\0\12\373\1\0\15\373"+
    "\1\0\2\373\1\u011f\7\0\3\373\4\0\1\u011e\1\0"+
    "\2\u011e\1\0\1\u011e\16\0\1\u0120\65\0\2\57\1\202"+
    "\1\0\1\57\1\0\1\57\1\u0121\10\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\3\57"+
    "\1\u0122\6\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\12\57\1\u0123\1\u0124\14\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\12\57\1\0"+
    "\15\57\1\0\1\57\1\u0125\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\11\0\1\u0126\105\0\2\246\53\0"+
    "\2\57\1\202\1\0\1\57\1\0\1\57\1\u0127\10\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\12\57\1\246\1\240\14\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\u0128\1\u0129\11\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\46\0\1\u012a\30\0\2\57\1\202\1\0\1\57"+
    "\1\0\2\57\1\u012b\7\57\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\0\3\57\1\105\6\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\12\0\1\u012c\112\0\1\u012d\57\0"+
    "\1\u012e\112\0\1\u012f\72\0\1\74\47\0\2\57\1\202"+
    "\1\0\1\57\1\0\2\57\1\u0130\7\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\5\57\1\u0131\7\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\3\57\1\u0132\6\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\4\57\1\76\10\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\24\0\1\u0133\52\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\1\57"+
    "\1\u0134\13\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\2\0\2\57\1\202\1\0\1\57"+
    "\1\0\1\57\1\240\10\57\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\26\0"+
    "\1\74\50\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\3\57\1\76\11\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\12\0\1\242\100\0"+
    "\1\u0135\60\0\2\57\1\202\1\0\1\57\1\0\6\57"+
    "\1\u0136\3\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\1\165\1\u0137"+
    "\2\0\1\165\1\0\12\165\1\0\15\165\1\0\2\165"+
    "\10\0\3\u0137\1\165\20\0\1\u0138\3\0\1\u0138\1\0"+
    "\12\u0138\1\0\15\u0138\1\0\2\u0138\33\0\43\u0139\2\0"+
    "\30\u0139\24\0\1\74\51\0\2\57\1\202\1\0\1\57"+
    "\1\0\12\57\1\0\2\57\1\76\12\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\2\0"+
    "\2\57\1\202\1\0\1\57\1\u013a\1\u013b\11\57\1\u012a"+
    "\1\u013c\14\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\7\0\2\u013d\6\0\1\u013e\57\0"+
    "\2\57\1\202\1\0\1\57\1\u013d\1\u013f\6\57\1\u0140"+
    "\2\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\11\57\1\u0141\1\0\15\57\1\0\2\57"+
    "\1\203\1\202\6\0\3\57\1\204\15\0\1\205\17\0"+
    "\1\u0142\57\0\2\57\1\202\1\0\1\57\1\0\7\57"+
    "\1\u0143\2\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\14\0\1\u0144\62\0"+
    "\2\57\1\202\1\0\1\57\1\0\4\57\1\u0145\5\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\7\0\2\u0146\106\0\2\u0147\70\0"+
    "\1\u0148\74\0\1\u0149\57\0\2\57\1\202\1\0\1\57"+
    "\1\u0146\1\u014a\11\57\1\0\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\0\12\57\1\u0147\1\u014b\14\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\7\57"+
    "\1\u014c\2\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\11\0\1\316\65\0"+
    "\2\57\1\202\1\0\1\57\1\0\1\57\1\320\10\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\17\0\1\246\57\0\2\57\1\202"+
    "\1\0\1\57\1\0\7\57\1\240\2\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\1\165\1\u014d\2\0\1\165\1\0\12\165"+
    "\1\0\15\165\1\0\2\165\10\0\3\u014d\1\165\20\0"+
    "\2\u014e\2\0\1\u014e\1\0\12\u014e\1\0\15\u014e\1\0"+
    "\2\u014e\10\0\3\u014e\65\0\1\u014f\37\0\1\u0150\65\0"+
    "\2\57\1\202\1\0\1\57\1\0\1\57\1\u0151\10\57"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\34\0\1\u0152\42\0\2\57\1\202"+
    "\1\0\1\57\1\0\12\57\1\0\11\57\1\u0153\3\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\2\57"+
    "\1\u0154\7\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\24\0\1\364\52\0"+
    "\2\57\1\202\1\0\1\57\1\0\12\57\1\0\1\57"+
    "\1\105\13\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\11\0\1\u012a\65\0\2\57\1\202"+
    "\1\0\1\57\1\0\1\57\1\u013c\10\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\14\0\1\u0155\72\0\1\u0156\106\0\1\246\74\0"+
    "\1\u0157\52\0\2\57\1\202\1\0\1\57\1\0\4\57"+
    "\1\u0158\5\57\1\0\15\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\57\1\202"+
    "\1\0\1\57\1\0\2\57\1\u0159\7\57\1\0\15\57"+
    "\1\0\2\57\1\203\1\202\6\0\3\57\1\204\15\0"+
    "\1\205\2\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\0\1\57\1\240\13\57\1\0\2\57\1\203\1\202"+
    "\6\0\3\57\1\204\15\0\1\205\2\0\2\u014e\2\0"+
    "\1\u014e\1\0\12\u014e\1\0\15\u014e\1\0\2\u014e\1\u011f"+
    "\7\0\3\u014e\44\0\1\u013e\51\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\0\2\57\1\u0140\12\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\17\0\1\u012a\57\0\2\57\1\202\1\0\1\57\1\0"+
    "\7\57\1\u013c\2\57\1\0\15\57\1\0\2\57\1\203"+
    "\1\202\6\0\3\57\1\204\15\0\1\205\2\0\2\57"+
    "\1\202\1\0\1\57\1\0\2\57\1\u015a\7\57\1\0"+
    "\15\57\1\0\2\57\1\203\1\202\6\0\3\57\1\204"+
    "\15\0\1\205\11\0\1\u015b\102\0\1\u015c\101\0\1\u015d"+
    "\52\0\2\57\1\202\1\0\1\57\1\0\1\57\1\u015e"+
    "\10\57\1\0\15\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\7\57\1\u015f\2\57\1\0\15\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\11\57\1\u0160"+
    "\1\0\15\57\1\0\2\57\1\203\1\202\6\0\3\57"+
    "\1\204\15\0\1\205\22\0\2\u013e\104\0\1\117\55\0"+
    "\1\u0161\62\0\2\57\1\202\1\0\1\57\1\0\12\57"+
    "\1\u013e\1\u0140\14\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\2\0\2\57\1\202\1\0"+
    "\1\57\1\0\12\57\1\0\10\57\1\120\4\57\1\0"+
    "\2\57\1\203\1\202\6\0\3\57\1\204\15\0\1\205"+
    "\2\0\2\57\1\202\1\0\1\57\1\0\12\57\1\0"+
    "\3\57\1\274\11\57\1\0\2\57\1\203\1\202\6\0"+
    "\3\57\1\204\15\0\1\205\24\0\1\u0162\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18666];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\25\1\5\11\2\1\3\11"+
    "\1\1\1\11\12\1\1\0\1\11\1\1\1\0\4\1"+
    "\1\0\2\1\1\11\1\0\10\1\1\0\10\1\1\11"+
    "\4\1\1\0\1\1\6\0\6\1\1\0\5\1\1\0"+
    "\12\1\1\0\1\11\2\1\5\11\1\1\2\11\1\0"+
    "\1\1\5\0\1\1\1\0\4\1\2\0\11\1\2\0"+
    "\11\1\1\0\3\1\7\0\5\1\1\0\1\1\1\0"+
    "\3\1\2\0\3\1\1\0\3\1\1\0\4\1\1\11"+
    "\1\0\1\1\1\0\1\11\3\1\2\0\6\1\1\0"+
    "\6\1\2\0\3\1\6\0\1\11\4\1\2\0\2\1"+
    "\1\0\2\1\1\11\1\1\1\0\1\1\1\0\4\1"+
    "\1\0\4\1\2\0\4\1\1\0\3\1\5\0\4\1"+
    "\1\0\2\1\1\0\1\1\2\0\2\1\3\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\4\0\3\1\1\0\1\1\1\0\2\1\3\0\2\1"+
    "\1\0\1\11\3\1\1\0\1\1\1\0\1\1\4\0"+
    "\5\1\1\11\1\0\1\1\1\0\2\1\3\0\3\1"+
    "\3\0\3\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int numero;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { numero=yyline; lexeme=yytext(); return ERROR;
            }
          case 53: break;
          case 2: 
            { numero=yyline; lexeme=yytext(); return VAR;
            }
          case 54: break;
          case 3: 
            { numero=yyline; lexeme=yytext(); return INT;
            }
          case 55: break;
          case 4: 
            { /*Ignore*/
            }
          case 56: break;
          case 5: 
            { numero=yyline; return PARENTESISI;
            }
          case 57: break;
          case 6: 
            { numero=yyline; return PARENTESISD;
            }
          case 58: break;
          case 7: 
            { numero=yyline; return DIRECTIVAS;
            }
          case 59: break;
          case 8: 
            { numero=yyline; return MODULO;
            }
          case 60: break;
          case 9: 
            { numero=yyline; lexeme=yytext(); return ANGLED;
            }
          case 61: break;
          case 10: 
            { numero=yyline; lexeme=yytext(); return ANGLEI;
            }
          case 62: break;
          case 11: 
            { numero=yyline; return PUNTO;
            }
          case 63: break;
          case 12: 
            { numero=yyline; return COMA;
            }
          case 64: break;
          case 13: 
            { numero=yyline; return INICIOB;
            }
          case 65: break;
          case 14: 
            { numero=yyline; return FINALB;
            }
          case 66: break;
          case 15: 
            { numero=yyline; lexeme=yytext(); return ASIGNACION;
            }
          case 67: break;
          case 16: 
            { numero=yyline; numero=yyline; return SUMA;
            }
          case 68: break;
          case 17: 
            { numero=yyline; return MULTIPLICACION;
            }
          case 69: break;
          case 18: 
            { numero=yyline; return RESTA;
            }
          case 70: break;
          case 19: 
            { numero=yyline; return DIVISION;
            }
          case 71: break;
          case 20: 
            { numero=yyline; return ASPERSON;
            }
          case 72: break;
          case 21: 
            { numero=yyline; return NOT;
            }
          case 73: break;
          case 22: 
            { numero=yyline; return COMILLAD;
            }
          case 74: break;
          case 23: 
            { numero=yyline; return COMILLAS;
            }
          case 75: break;
          case 24: 
            { numero=yyline; return OR;
            }
          case 76: break;
          case 25: 
            { numero=yyline; lexeme=yytext(); return PR;
            }
          case 77: break;
          case 26: 
            { numero=yyline; lexeme=yytext(); return EVENTO;
            }
          case 78: break;
          case 27: 
            { numero=yyline; lexeme=yytext(); return CONS;
            }
          case 79: break;
          case 28: 
            { numero=yyline; lexeme=yytext(); return HTML;
            }
          case 80: break;
          case 29: 
            { numero=yyline; lexeme=yytext(); return FLOAT;
            }
          case 81: break;
          case 30: 
            { numero=yyline; return COMPARACION;
            }
          case 82: break;
          case 31: 
            { numero=yyline; return SUMAM;
            }
          case 83: break;
          case 32: 
            { numero=yyline; return MULTIPLICACIONM;
            }
          case 84: break;
          case 33: 
            { numero=yyline; return RESTAM;
            }
          case 85: break;
          case 34: 
            { numero=yyline; return DIVISIONM;
            }
          case 86: break;
          case 35: 
            { numero=yyline; lexeme=yytext(); return COMENTARIO;
            }
          case 87: break;
          case 36: 
            { numero=yyline; return AND;
            }
          case 88: break;
          case 37: 
            { numero=yyline; return DIFERENTE;
            }
          case 89: break;
          case 38: 
            { numero=yyline; lexeme=yytext(); return TEXTO;
            }
          case 90: break;
          case 39: 
            { numero=yyline; lexeme=yytext(); return LN2;
            }
          case 91: break;
          case 40: 
            { numero=yyline; lexeme=yytext(); return FUNCION;
            }
          case 92: break;
          case 41: 
            { numero=yyline; lexeme=yytext(); return CARACTER;
            }
          case 93: break;
          case 42: 
            { numero=yyline; lexeme=yytext(); return ARREGLO;
            }
          case 94: break;
          case 43: 
            { numero=yyline; lexeme=yytext(); return LN10;
            }
          case 95: break;
          case 44: 
            { numero=yyline; lexeme=yytext(); return LOG2;
            }
          case 96: break;
          case 45: 
            { numero=yyline; lexeme=yytext(); return VAROBJETO;
            }
          case 97: break;
          case 46: 
            { numero=yyline;lexeme=yytext(); return PR;
            }
          case 98: break;
          case 47: 
            { numero=yyline; lexeme=yytext(); return LOG10;
            }
          case 99: break;
          case 48: 
            { numero=yyline; lexeme=yytext(); return OBJETO;
            }
          case 100: break;
          case 49: 
            { lexeme=yytext(); return PR;
            }
          case 101: break;
          case 50: 
            { numero=yyline; lexeme=yytext(); return LIB;
            }
          case 102: break;
          case 51: 
            { numero=yyline; lexeme=yytext(); return DOUBLE;
            }
          case 103: break;
          case 52: 
            { numero=yyline; lexeme=yytext(); return METOBJETO;
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
