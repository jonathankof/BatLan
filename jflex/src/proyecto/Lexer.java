/* The following code was generated by JFlex 1.6.1 */

package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Administardor/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\42\1\43\1\43\1\42\22\0\1\3\1\70\1\72"+
    "\2\0\1\46\1\67\1\73\1\41\1\44\1\64\1\63\1\56\1\65"+
    "\1\55\1\66\1\54\1\53\1\52\7\2\1\62\1\0\1\50\1\61"+
    "\1\47\1\0\1\45\1\17\1\4\1\24\1\11\1\15\1\16\1\23"+
    "\1\25\1\6\1\35\1\37\1\14\1\27\1\7\1\12\1\31\1\34"+
    "\1\22\1\21\1\10\1\13\1\32\1\30\1\33\1\26\1\1\1\74"+
    "\1\0\1\75\1\51\1\40\1\0\1\17\1\4\1\24\1\11\1\15"+
    "\1\16\1\23\1\25\1\6\1\35\1\37\1\14\1\27\1\7\1\12"+
    "\1\31\1\34\1\22\1\21\1\10\1\13\1\32\1\30\1\33\1\26"+
    "\1\1\1\57\1\71\1\60\7\0\1\43\252\0\2\5\115\0\1\20"+
    "\u1ea8\0\1\43\1\43\u0100\0\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\1\10\2"+
    "\1\1\11\2\1\5\1\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\1\1\27\1\30"+
    "\1\0\2\2\2\1\1\0\1\2\1\0\4\2\1\0"+
    "\2\2\1\31\1\0\1\31\3\2\1\31\2\2\1\32"+
    "\1\0\10\2\2\33\3\2\1\0\1\2\6\0\6\2"+
    "\1\0\5\2\1\0\12\2\2\0\1\34\1\1\1\35"+
    "\1\1\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\0\1\47\3\0\1\1\1\2\1\0"+
    "\4\2\2\0\11\2\2\0\2\2\1\50\6\2\1\0"+
    "\3\2\7\0\5\2\1\0\1\2\1\0\3\2\2\0"+
    "\3\2\1\0\1\2\1\51\1\2\1\0\3\2\1\0"+
    "\1\35\1\1\1\43\3\0\1\51\1\52\1\1\2\31"+
    "\3\2\2\0\5\2\1\51\1\0\1\51\1\2\1\53"+
    "\1\54\2\2\2\0\3\2\6\0\1\51\4\2\2\0"+
    "\2\2\1\0\2\2\1\32\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\35\1\1\1\43\1\0\1\31\1\2"+
    "\3\0\1\2\1\55\1\2\2\0\4\2\2\0\2\2"+
    "\1\56\1\2\2\0\1\51\2\2\5\0\4\2\2\32"+
    "\1\0\2\2\1\0\1\2\2\0\1\2\1\31\1\35"+
    "\1\31\1\43\1\31\1\1\1\0\1\51\1\52\1\0"+
    "\2\2\1\0\2\2\1\0\1\2\1\0\1\2\1\57"+
    "\1\60\4\0\3\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\34\1\35\1\1\1\31\1\0\1\47\1\51\1\0"+
    "\1\2\1\0\1\61\1\2\1\61\1\2\1\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\62\1\43\1\0\1\2"+
    "\1\0\1\2\3\0\3\2\3\0\3\2\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\76\0\76\0\76\0\76\0\76\0\76\0\u05d0"+
    "\0\76\0\u060e\0\76\0\76\0\76\0\u064c\0\76\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\76"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u060e\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\76"+
    "\0\u0bde\0\u08b8\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u08b8\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\76\0\u08b8\0\u0fbe\0\u0ffc\0\u103a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u05d0\0\u17fa"+
    "\0\76\0\u1838\0\u1876\0\u18b4\0\76\0\76\0\76\0\76"+
    "\0\76\0\u18f2\0\76\0\76\0\76\0\u083c\0\u1930\0\u083c"+
    "\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20"+
    "\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u08b8\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2"+
    "\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2"+
    "\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492"+
    "\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u08b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24"+
    "\0\u2a62\0\u2aa0\0\u2a62\0\76\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98"+
    "\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88"+
    "\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u08b8\0\u08b8\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec"+
    "\0\u312a\0\u3168\0\u31a6\0\u31e4\0\76\0\u3222\0\u3260\0\u329e"+
    "\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e"+
    "\0\76\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640"+
    "\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u2b5a\0\u3776\0\u37b4\0\u37f2"+
    "\0\u3830\0\u08b8\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4"+
    "\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u08b8\0\u3b18\0\u3b56"+
    "\0\u3b94\0\u3b56\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u087a\0\u08f6\0\u3e7c"+
    "\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c"+
    "\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u3738\0\u41a2\0\u41a2\0\u2b1c"+
    "\0\u41e0\0\u421e\0\u425c\0\u429a\0\u42d8\0\u4316\0\u4354\0\u4392"+
    "\0\u43d0\0\u440e\0\76\0\u08b8\0\u444c\0\u448a\0\u44c8\0\u4506"+
    "\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a\0\u46b8\0\u406c"+
    "\0\u2b1c\0\u46f6\0\u40e8\0\u4734\0\u4164\0\u4164\0\u2b1c\0\u4772"+
    "\0\u47b0\0\u47ee\0\76\0\u482c\0\u08b8\0\u486a\0\u48a8\0\u48e6"+
    "\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6"+
    "\0\u4b14\0\u46f6\0\u4734\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a"+
    "\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a"+
    "\0\u4e78\0\u4eb6\0\u4ef4\0\u4f32\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\3\1\23\1\24\1\3\1\25"+
    "\1\26\1\27\1\30\2\3\1\31\1\2\2\3\1\32"+
    "\1\5\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\3\4\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\2\2\4\33\1\61\72\33\2\62\1\33\1\63\1\33"+
    "\12\62\1\33\15\62\1\33\2\62\11\33\3\62\22\33"+
    "\1\64\1\4\1\33\1\65\1\33\12\64\1\33\15\64"+
    "\1\33\2\64\11\33\3\4\1\66\21\33\2\62\1\33"+
    "\1\67\1\70\1\71\2\62\1\72\2\62\1\73\1\62"+
    "\1\74\1\62\1\75\1\76\2\62\1\77\11\62\1\33"+
    "\2\62\11\33\3\62\25\33\1\61\11\33\1\100\10\33"+
    "\1\101\47\33\2\62\1\33\1\63\1\33\10\62\1\102"+
    "\1\62\1\33\6\62\1\103\6\62\1\33\2\62\11\33"+
    "\3\62\22\33\2\62\1\33\1\63\1\33\12\62\1\33"+
    "\1\62\1\104\2\62\1\105\10\62\1\33\2\62\11\33"+
    "\3\62\22\33\2\62\1\33\1\63\1\33\4\62\1\106"+
    "\2\62\1\107\2\62\1\33\15\62\1\33\2\62\11\33"+
    "\3\62\22\33\2\62\1\33\1\63\1\33\1\62\1\110"+
    "\10\62\1\33\10\62\1\111\4\62\1\33\2\62\11\33"+
    "\3\62\22\33\2\62\1\33\1\63\1\112\1\113\1\114"+
    "\2\62\1\115\2\62\1\116\2\62\1\33\15\62\1\33"+
    "\2\62\11\33\3\62\22\33\2\62\1\33\1\63\1\33"+
    "\5\62\1\117\1\120\3\62\1\33\11\62\1\121\1\122"+
    "\2\62\1\33\2\62\11\33\3\62\22\33\2\62\1\33"+
    "\1\63\1\123\1\124\3\62\1\125\4\62\1\126\1\33"+
    "\15\62\1\33\2\62\11\33\3\62\22\33\2\62\1\33"+
    "\1\63\1\33\6\62\1\127\3\62\1\130\2\131\13\62"+
    "\1\33\2\62\11\33\3\62\25\33\1\61\2\132\1\33"+
    "\1\133\14\33\1\134\1\135\1\33\1\136\3\33\1\137"+
    "\42\33\2\62\1\33\1\63\1\132\1\140\1\62\1\141"+
    "\7\62\1\33\4\62\1\142\1\143\1\62\1\144\3\62"+
    "\1\145\1\62\1\33\2\62\11\33\3\62\22\33\2\62"+
    "\1\33\1\63\1\146\1\147\11\62\1\33\15\62\1\33"+
    "\2\62\11\33\3\62\22\33\2\62\1\33\1\63\1\33"+
    "\6\62\1\150\2\62\1\151\1\33\15\62\1\33\2\62"+
    "\11\33\3\62\22\33\2\62\1\33\1\63\1\33\7\62"+
    "\1\152\2\62\1\33\15\62\1\33\2\62\11\33\3\62"+
    "\22\33\2\62\1\33\1\63\1\33\11\62\1\153\1\154"+
    "\1\155\1\156\13\62\1\33\2\62\11\33\3\62\22\33"+
    "\2\62\1\33\1\63\1\33\7\62\1\157\1\62\1\160"+
    "\1\33\4\62\1\161\10\62\1\33\2\62\11\33\3\62"+
    "\22\33\2\62\1\33\1\63\1\123\1\124\3\62\1\162"+
    "\1\163\4\62\1\33\1\62\1\164\13\62\1\33\2\62"+
    "\11\33\3\62\22\33\2\62\1\33\1\63\1\33\7\62"+
    "\1\165\2\62\1\33\15\62\1\33\2\62\11\33\3\62"+
    "\22\33\2\62\1\33\1\63\1\33\5\62\1\166\4\62"+
    "\1\33\15\62\1\33\2\62\11\33\3\62\22\33\3\167"+
    "\1\170\1\33\12\167\1\33\15\167\1\33\2\167\1\33"+
    "\1\167\4\33\1\171\2\33\3\167\22\33\1\172\1\173"+
    "\1\33\1\174\1\33\12\172\1\33\15\172\1\33\2\172"+
    "\11\33\3\173\1\172\24\33\1\61\54\33\1\175\20\33"+
    "\1\61\54\33\1\176\20\33\1\61\54\33\1\177\20\33"+
    "\1\61\54\33\1\200\20\33\1\61\54\33\1\201\4\33"+
    "\1\202\13\33\1\61\62\33\1\203\12\33\1\61\54\33"+
    "\1\204\20\33\1\61\64\33\1\205\4\33\4\206\1\207"+
    "\35\206\2\33\26\206\1\210\3\206\4\33\1\61\2\70"+
    "\70\33\2\62\1\211\1\63\1\33\12\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\70\1\71\11\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\64\1\33\1\65\1\33\12\64\1\33"+
    "\15\64\1\33\2\64\11\33\3\64\22\33\2\64\1\33"+
    "\1\65\1\70\1\214\11\64\1\33\15\64\1\33\2\64"+
    "\11\33\3\64\22\33\2\62\1\211\1\63\1\70\1\71"+
    "\11\62\1\33\5\62\1\215\7\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\5\33\1\61\2\33"+
    "\1\216\67\33\2\62\1\211\1\63\1\33\1\62\1\217"+
    "\10\62\1\33\15\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\4\62\1\220\5\62\1\33\15\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\2\33\2\62\1\211"+
    "\1\63\1\33\4\62\1\221\5\62\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\6\62\1\222\3\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\5\33\1\61\3\33\1\223\14\33\1\224\51\33"+
    "\2\62\1\211\1\63\1\33\2\62\1\225\7\62\1\33"+
    "\4\62\1\226\10\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\12\62\1\33\4\62\1\227\10\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\5\33\1\61\24\33"+
    "\1\224\45\33\2\62\1\211\1\63\1\33\12\62\1\33"+
    "\10\62\1\226\4\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\5\62\1\230\4\62\1\33\5\62\1\102\7\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\7\62\1\231\2\62\1\33"+
    "\1\62\1\232\13\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\12\62\1\33\7\62\1\233\5\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\2\33\2\62\1\211"+
    "\1\63\1\33\10\62\1\234\1\62\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\3\62\1\235\6\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\5\33\1\61\13\33\2\236\1\33\1\237\53\33"+
    "\2\62\1\211\1\63\1\33\12\62\1\236\1\240\1\62"+
    "\1\241\12\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\12\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\1\242"+
    "\1\243\1\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\12\62\1\33\2\62\1\244\1\245\11\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\10\62\1\246\1\62\1\33"+
    "\2\62\1\247\12\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\6\62\1\250\3\62\1\33\15\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\2\33\2\62\1\211"+
    "\1\63\1\33\12\62\1\251\1\230\14\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\7\62\1\252\2\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\33\3\62"+
    "\1\253\11\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\12\62"+
    "\1\33\1\62\1\102\13\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\6\62\1\120\3\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\10\62\1\254\1\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\5\33\1\61\22\33\1\255\47\33\2\62\1\211\1\63"+
    "\1\33\12\62\1\33\6\62\1\247\6\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\5\33\1\61"+
    "\3\33\1\256\71\33\1\61\10\33\1\257\1\33\1\137"+
    "\62\33\1\61\5\33\1\260\67\33\1\61\13\33\2\261"+
    "\60\33\1\61\2\262\73\33\1\61\15\33\1\263\54\33"+
    "\2\62\1\211\1\63\1\33\2\62\1\264\7\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\7\62\1\265"+
    "\1\62\1\145\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\4\62\1\266\5\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\12\62\1\261\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\262\1\267\11\62\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\12\62\1\33\1\62\1\270"+
    "\13\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\5\33\1\61\16\33\1\271\53\33\2\62\1\211"+
    "\1\63\1\33\12\62\1\33\2\62\1\272\12\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\273\1\274\11\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\251\1\230"+
    "\1\275\13\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\12\62"+
    "\1\33\1\62\1\276\13\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\277\1\231\11\62\1\33\15\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\5\33\1\61\16\33"+
    "\1\300\53\33\2\62\1\211\1\63\1\33\12\62\1\33"+
    "\2\62\1\301\12\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\12\62\1\33\14\62\1\111\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\11\62\1\302\1\33\15\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\2\33\2\62\1\211"+
    "\1\63\1\33\6\62\1\303\3\62\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\304\1\305\11\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\33\7\62"+
    "\1\306\5\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\307\1\33\12\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\310\1\311"+
    "\11\62\1\33\15\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\12\62\1\33\4\62\1\312\10\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\2\33\2\62\1\211"+
    "\1\63\1\33\12\62\1\33\6\62\1\313\6\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\3\167\1\170\1\70\1\314\11\167\1\33\15\167\1\33"+
    "\2\167\1\33\1\167\4\33\1\171\2\33\3\167\22\33"+
    "\2\172\1\33\1\174\1\33\12\172\1\33\15\172\1\33"+
    "\2\172\11\33\4\172\21\33\1\172\1\315\1\33\1\174"+
    "\1\33\12\172\1\33\15\172\1\33\2\172\11\33\3\315"+
    "\1\172\21\33\2\172\1\33\1\174\1\70\1\316\11\172"+
    "\1\33\15\172\1\33\2\172\11\33\4\172\20\33\4\202"+
    "\1\317\35\202\2\33\32\202\4\206\1\207\2\320\33\206"+
    "\2\33\26\206\1\210\3\206\3\33\1\211\1\61\34\33"+
    "\1\212\1\211\33\33\4\321\1\322\35\321\2\33\1\323"+
    "\31\321\2\33\1\213\1\33\1\61\45\33\3\213\20\33"+
    "\1\324\1\33\2\64\1\33\1\65\1\33\1\64\1\325"+
    "\10\64\1\33\15\64\1\33\2\64\11\33\3\64\22\33"+
    "\2\62\1\211\1\63\1\33\2\62\1\230\7\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\5\33\1\61\3\33\1\326\66\33\2\62\1\211"+
    "\1\63\1\33\2\62\1\327\7\62\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\5\62\1\330\4\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\1\62\1\331"+
    "\10\62\1\33\15\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\4\62\1\332\5\62\1\33\15\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\5\33\1\61\15\33"+
    "\1\333\57\33\1\61\5\33\1\334\64\33\2\62\1\211"+
    "\1\63\1\33\12\62\1\33\1\62\1\335\13\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\4\62\1\336\5\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\11\62\1\125"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\7\62"+
    "\1\102\2\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\1\62\1\102\10\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\7\62\1\337\2\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\1\62\1\111\10\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\7\62"+
    "\1\340\2\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\7\62\1\341\2\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\5\33\1\61"+
    "\3\33\1\342\71\33\1\61\20\33\1\343\51\33\2\62"+
    "\1\211\1\63\1\33\2\62\1\344\7\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\33\4\62"+
    "\1\345\10\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\12\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\2\62"+
    "\1\346\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\12\62\1\33\15\62\1\33\2\62\1\212\1\211\7\33"+
    "\1\347\1\350\1\62\17\33\1\213\2\33\2\62\1\211"+
    "\1\63\1\33\11\62\1\351\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\2\62\1\111\7\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\352\1\63\1\33\12\62\1\33\15\62"+
    "\1\33\2\62\1\353\1\352\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\7\62\1\354\2\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\5\33\1\61\10\33\1\100\61\33\2\62"+
    "\1\211\1\63\1\33\1\62\1\246\10\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\7\62\1\355\2\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\12\62"+
    "\1\33\1\62\1\356\13\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\4\33\1\255\1\61\34\33"+
    "\1\357\1\255\37\33\1\61\6\33\1\360\66\33\1\61"+
    "\24\33\1\361\50\33\1\61\6\33\1\362\66\33\1\61"+
    "\3\33\1\363\71\33\1\61\3\33\1\364\71\33\1\61"+
    "\3\33\1\365\66\33\2\62\1\211\1\63\1\33\5\62"+
    "\1\366\4\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\12\62\1\33\10\62\1\367\4\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\5\62\1\370\4\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\2\62\1\371\7\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\2\62"+
    "\1\306\7\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\5\33\1\61\20\33\1\372"+
    "\51\33\2\62\1\211\1\63\1\33\12\62\1\33\4\62"+
    "\1\246\10\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\5\33\1\61\22\33\1\373\47\33\2\62"+
    "\1\211\1\63\1\33\12\62\1\33\6\62\1\374\6\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\33\1\62"+
    "\1\375\13\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\7\62"+
    "\1\306\2\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\5\33\1\61\2\33\1\100"+
    "\72\33\1\61\23\33\1\376\46\33\2\62\1\211\1\63"+
    "\1\33\12\62\1\33\7\62\1\377\5\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\12\62\1\33\10\62\1\u0100\4\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\33\15\62"+
    "\1\u0101\1\111\1\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\5\33\1\61\7\33\1\251\62\33\2\62\1\211"+
    "\1\63\1\33\6\62\1\230\3\62\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\70\1\71\5\62\1\u0102\3\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\5\33\1\61\25\33\1\u0103\44\33\2\62"+
    "\1\211\1\63\1\33\12\62\1\33\11\62\1\u0104\3\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\u0105\1\u0106\11\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\12\62\1\33"+
    "\10\62\1\111\4\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\3\167\1\170\1\33\1\167"+
    "\1\u0107\10\167\1\33\15\167\1\33\2\167\1\33\1\167"+
    "\4\33\1\171\2\33\3\167\22\33\1\172\1\u0108\1\33"+
    "\1\174\1\33\12\172\1\33\15\172\1\33\2\172\11\33"+
    "\3\u0108\1\172\21\33\2\172\1\33\1\174\1\33\1\172"+
    "\1\u0109\10\172\1\33\15\172\1\33\2\172\11\33\4\172"+
    "\20\33\4\202\1\317\2\u010a\33\202\2\33\32\202\4\206"+
    "\1\207\2\206\1\u010b\32\206\2\33\26\206\1\210\3\206"+
    "\4\33\1\61\37\33\1\365\35\33\1\61\2\70\35\33"+
    "\1\365\32\33\2\64\1\33\1\65\1\33\2\64\1\u010c"+
    "\7\64\1\33\15\64\1\33\2\64\11\33\3\64\21\33"+
    "\77\0\2\u010d\1\u010e\1\u010d\1\0\12\u010d\1\0\15\u010d"+
    "\1\0\2\u010d\1\u010f\1\u010e\7\0\3\u010d\17\0\1\u0110"+
    "\1\0\1\33\2\62\1\211\1\u0111\1\33\12\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\12\62\1\33"+
    "\2\62\1\u0112\12\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\11\62\1\u0113\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\5\33\1\61\2\u0114\73\33"+
    "\1\61\15\33\1\u0115\54\33\2\62\1\211\1\63\1\u0114"+
    "\1\u0116\11\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\12\62\1\33\1\62\1\u0113\13\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\11\62\1\u0117\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\1\62\1\u0118\10\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\12\62\1\33"+
    "\1\62\1\u0119\13\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\5\33\1\61\10\33\1\u011a\64\33"+
    "\1\61\3\33\1\u011b\66\33\2\62\1\211\1\63\1\33"+
    "\7\62\1\u011c\2\62\1\33\15\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\2\33\2\62\1\211"+
    "\1\63\1\33\2\62\1\u011d\7\62\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\12\62\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\2\62\1\u011e\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\2\62\1\u011f\7\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\4\33\1\352\1\61\34\33\1\353\1\352"+
    "\33\33\4\u0120\1\u0121\35\u0120\2\33\1\u0122\31\u0120\1\33"+
    "\2\62\1\211\1\63\1\33\12\62\1\33\1\62\1\124"+
    "\13\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\12\62\1\33"+
    "\10\62\1\u0123\4\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\2\33\2\62\1\211\1\63\1\33"+
    "\7\62\1\u0124\2\62\1\33\15\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\1\33\4\u0120\1\u0121"+
    "\35\u0120\2\33\32\u0120\4\33\1\61\12\33\1\u0125\62\33"+
    "\1\u0126\75\33\1\61\7\33\1\u0127\65\33\1\61\10\33"+
    "\1\u0128\64\33\1\61\17\33\1\u0129\52\33\2\62\1\211"+
    "\1\63\1\33\11\62\1\u012a\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\u012b\1\33\12\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\6\62\1\u012c\3\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\33\3\62"+
    "\1\u012d\11\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\5\33\1\61\3\33\1\u0101\71\33\1\u012e"+
    "\72\33\2\62\1\211\1\u012f\1\33\12\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\33\5\62"+
    "\1\111\7\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\5\33\1\61\12\33\1\u0130\57\33\2\62"+
    "\1\211\1\63\1\33\11\62\1\u0131\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\4\62\1\u0132\5\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\u0133\1\u0134\11\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\5\33\1\61\12\33\1\u0135\57\33\2\62"+
    "\1\211\1\63\1\33\11\62\1\215\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\5\33"+
    "\1\61\17\33\1\u0136\52\33\2\62\1\211\1\63\1\33"+
    "\12\62\1\33\3\62\1\u0137\11\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\2\33\3\167\1\170"+
    "\1\33\2\167\1\u0138\7\167\1\33\15\167\1\33\2\167"+
    "\1\33\1\167\4\33\1\171\2\33\3\167\22\33\1\172"+
    "\1\u0139\1\33\1\174\1\33\12\172\1\33\15\172\1\33"+
    "\2\172\11\33\3\u0139\1\172\21\33\2\172\1\33\1\174"+
    "\1\33\2\172\1\u013a\7\172\1\33\15\172\1\33\2\172"+
    "\11\33\4\172\20\33\4\202\1\317\2\202\1\u013b\32\202"+
    "\2\33\32\202\4\206\1\207\3\206\1\u013c\31\206\2\33"+
    "\26\206\1\210\3\206\1\0\2\u013d\1\0\1\u013d\1\0"+
    "\12\u013d\1\0\15\u013d\1\0\2\u013d\11\0\3\u013d\24\0"+
    "\1\u010e\35\0\1\u010f\1\u010e\33\0\42\u013e\2\0\1\u013f"+
    "\31\u013e\2\0\1\u0110\47\0\3\u0110\20\0\1\u0140\1\33"+
    "\2\62\1\211\1\63\1\70\1\71\5\62\1\230\3\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\2\62"+
    "\1\102\7\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\5\33\1\61\2\33\1\u0141"+
    "\72\33\1\61\3\33\1\100\66\33\2\62\1\211\1\63"+
    "\1\33\1\62\1\u0142\10\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\3\62\1\u0143\6\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\u0144\1\u0145"+
    "\14\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\12\62\1\33"+
    "\15\62\1\33\1\62\1\u0146\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\5\33\1\61\2\33\1\u0147\72\33\1\61"+
    "\13\33\2\255\55\33\2\62\1\211\1\63\1\33\1\62"+
    "\1\u0148\10\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\12\62\1\255\1\247\14\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\2\33\2\62\1\211"+
    "\1\63\1\u0149\1\u014a\11\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\5\33\1\61"+
    "\37\33\1\u014b\35\33\1\61\2\70\35\33\1\u014b\32\33"+
    "\2\62\1\211\1\63\1\33\2\62\1\u014c\7\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\3\62\1\111"+
    "\6\62\1\33\15\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\5\33\1\61\3\33\1\u014d\71\33"+
    "\1\61\2\70\17\33\1\u014e\53\33\1\61\4\33\1\u014f"+
    "\70\33\1\61\22\33\1\u0150\52\33\1\61\20\33\1\100"+
    "\51\33\2\62\1\211\1\63\1\33\2\62\1\u0151\7\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\70\1\71"+
    "\11\62\1\33\5\62\1\u0152\7\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\2\33\2\62\1\211"+
    "\1\63\1\33\3\62\1\u0153\6\62\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\12\62\1\33\4\62\1\102"+
    "\10\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\5\33\1\61\15\33\1\u0154\54\33\2\62\1\211"+
    "\1\63\1\33\12\62\1\33\1\62\1\u0155\13\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\2\33"+
    "\2\62\1\211\1\63\1\33\1\62\1\247\10\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\5\33\1\61\17\33\1\100\52\33\2\62\1\211"+
    "\1\63\1\33\12\62\1\33\3\62\1\102\11\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\5\33"+
    "\1\61\3\33\1\251\71\33\1\61\7\33\1\u0156\62\33"+
    "\2\62\1\211\1\63\1\33\6\62\1\u0157\3\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\1\33\1\0\4\u0158\1\0\12\u0158\1\0\15\u0158"+
    "\1\0\2\u0158\1\0\1\u0158\4\0\1\u0159\2\0\3\u0158"+
    "\21\0\1\33\1\172\1\u015a\1\33\1\174\1\33\12\172"+
    "\1\33\15\172\1\33\2\172\11\33\3\u015a\1\172\20\33"+
    "\1\0\2\u015b\1\0\1\u015b\1\0\12\u015b\1\0\15\u015b"+
    "\1\0\2\u015b\11\0\4\u015b\20\0\4\202\1\317\3\202"+
    "\1\u015c\31\202\2\33\32\202\42\u015d\2\0\26\u015d\1\u015e"+
    "\3\u015d\44\0\1\u015f\31\0\4\33\1\61\16\33\1\100"+
    "\53\33\2\62\1\211\1\63\1\33\12\62\1\33\2\62"+
    "\1\102\12\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\u0160\1\u0161"+
    "\11\62\1\365\1\306\14\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\5\33\1\61\2\u0162\6\33"+
    "\1\u0163\61\33\2\62\1\211\1\63\1\u0162\1\u0164\6\62"+
    "\1\u0165\2\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\11\62\1\u0166\1\33\15\62\1\33\2\62\1\212"+
    "\1\211\7\33\3\62\17\33\1\213\5\33\1\61\10\33"+
    "\1\u0167\61\33\2\62\1\211\1\63\1\33\7\62\1\u0168"+
    "\2\62\1\33\15\62\1\33\2\62\1\212\1\211\7\33"+
    "\3\62\17\33\1\213\5\33\1\61\5\33\1\u0169\64\33"+
    "\2\62\1\211\1\63\1\33\4\62\1\u016a\5\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\5\33\1\61\2\u016b\73\33\1\61\13\33\2\u016c"+
    "\60\33\1\61\10\33\1\u016d\64\33\1\61\10\33\1\u016e"+
    "\61\33\2\62\1\211\1\63\1\u016b\1\u016f\11\62\1\33"+
    "\15\62\1\33\2\62\1\212\1\211\7\33\3\62\17\33"+
    "\1\213\2\33\2\62\1\211\1\63\1\33\12\62\1\u016c"+
    "\1\u0170\14\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\2\33\2\62\1\211\1\63\1\33\7\62"+
    "\1\u0171\2\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\5\33\1\61\2\33\1\333"+
    "\67\33\2\62\1\211\1\63\1\33\1\62\1\335\10\62"+
    "\1\33\15\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\5\33\1\61\10\33\1\255\61\33\2\62"+
    "\1\211\1\63\1\33\7\62\1\247\2\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\1\172\1\u0172\1\33\1\174\1\33\12\172\1\33"+
    "\15\172\1\33\2\172\11\33\3\u0172\1\172\20\33\42\u0173"+
    "\2\0\32\u0173\4\33\1\61\2\33\1\u0174\67\33\2\62"+
    "\1\211\1\63\1\33\1\62\1\u0175\10\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\5\33\1\61\25\33\1\u0176\44\33\2\62\1\211\1\63"+
    "\1\33\12\62\1\33\11\62\1\276\3\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\2\62\1\u0177\7\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\5\33\1\61\15\33\1\u0101\54\33\2\62\1\211\1\63"+
    "\1\33\12\62\1\33\1\62\1\111\13\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\5\33\1\61"+
    "\2\33\1\365\67\33\2\62\1\211\1\63\1\33\1\62"+
    "\1\306\10\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\5\33\1\61\5\33\1\u0178"+
    "\67\33\1\61\3\33\1\u0179\71\33\1\61\15\33\1\255"+
    "\57\33\1\61\15\33\1\u017a\54\33\2\62\1\211\1\63"+
    "\1\33\4\62\1\u017b\5\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\2\62\1\u017c\7\62\1\33\15\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\2\33\2\62\1\211\1\63\1\33\12\62\1\33\1\62"+
    "\1\247\13\62\1\33\2\62\1\212\1\211\7\33\3\62"+
    "\17\33\1\213\5\33\1\61\16\33\1\u0163\53\33\2\62"+
    "\1\211\1\63\1\33\12\62\1\33\2\62\1\u0165\12\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\5\33\1\61\10\33\1\365\61\33\2\62\1\211\1\63"+
    "\1\33\2\62\1\u017d\7\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\5\33\1\61"+
    "\2\33\1\u017e\72\33\1\61\10\33\1\u017f\64\33\1\61"+
    "\15\33\1\u0180\54\33\2\62\1\211\1\63\1\33\1\62"+
    "\1\u0181\10\62\1\33\15\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\7\62\1\u0182\2\62\1\33\15\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\11\62\1\u0183\1\33\15\62\1\33"+
    "\2\62\1\212\1\211\7\33\3\62\17\33\1\213\5\33"+
    "\1\61\13\33\2\u0163\60\33\1\61\24\33\1\123\50\33"+
    "\1\61\5\33\1\u0184\64\33\2\62\1\211\1\63\1\33"+
    "\12\62\1\u0163\1\u0165\14\62\1\33\2\62\1\212\1\211"+
    "\7\33\3\62\17\33\1\213\2\33\2\62\1\211\1\63"+
    "\1\33\12\62\1\33\10\62\1\124\4\62\1\33\2\62"+
    "\1\212\1\211\7\33\3\62\17\33\1\213\2\33\2\62"+
    "\1\211\1\63\1\33\12\62\1\33\3\62\1\303\11\62"+
    "\1\33\2\62\1\212\1\211\7\33\3\62\17\33\1\213"+
    "\5\33\1\61\15\33\1\u0185\53\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20336];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\31\1\1\0\25\1\1\0\4\1\1\0\1\1"+
    "\1\0\4\1\1\0\3\1\1\0\10\1\1\0\15\1"+
    "\1\0\1\1\6\0\6\1\1\0\5\1\1\0\12\1"+
    "\2\0\15\1\2\0\1\1\3\0\2\1\1\0\4\1"+
    "\2\0\11\1\2\0\11\1\1\0\3\1\7\0\5\1"+
    "\1\0\1\1\1\0\3\1\2\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\3\0\3\1\1\11\4\1"+
    "\2\0\6\1\1\0\6\1\2\0\3\1\6\0\5\1"+
    "\2\0\2\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\3\0\3\1\2\0\4\1"+
    "\2\0\4\1\2\0\3\1\5\0\6\1\1\0\2\1"+
    "\1\0\1\1\2\0\7\1\1\0\1\1\1\11\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\3\1\4\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\1\11\3\1"+
    "\1\0\1\1\1\11\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\4\0\5\1\1\0\1\1\1\0"+
    "\1\1\3\0\3\1\3\0\3\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int numero;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { numero=yyline; lexeme=yytext(); return ERROR;
            }
          case 51: break;
          case 2: 
            { numero=yyline; lexeme=yytext(); return VAR;
            }
          case 52: break;
          case 3: 
            { numero=yyline; lexeme=yytext(); return INT;
            }
          case 53: break;
          case 4: 
            { /*Ignore*/
            }
          case 54: break;
          case 5: 
            { numero=yyline; return PARENTESISI;
            }
          case 55: break;
          case 6: 
            { numero=yyline; return PARENTESISD;
            }
          case 56: break;
          case 7: 
            { numero=yyline; return DIRECTIVAS;
            }
          case 57: break;
          case 8: 
            { numero=yyline; return MODULO;
            }
          case 58: break;
          case 9: 
            { numero=yyline; lexeme=yytext(); return ANGLED;
            }
          case 59: break;
          case 10: 
            { numero=yyline; lexeme=yytext(); return ANGLEI;
            }
          case 60: break;
          case 11: 
            { numero=yyline; lexeme=yytext(); return EXPO;
            }
          case 61: break;
          case 12: 
            { numero=yyline; return PUNTO;
            }
          case 62: break;
          case 13: 
            { numero=yyline; return COMA;
            }
          case 63: break;
          case 14: 
            { numero=yyline; return INICIOB;
            }
          case 64: break;
          case 15: 
            { numero=yyline; return FINALB;
            }
          case 65: break;
          case 16: 
            { numero=yyline; lexeme=yytext(); return ASIGNACION;
            }
          case 66: break;
          case 17: 
            { numero=yyline; numero=yyline; return SUMA;
            }
          case 67: break;
          case 18: 
            { numero=yyline; return MULTIPLICACION;
            }
          case 68: break;
          case 19: 
            { numero=yyline; return RESTA;
            }
          case 69: break;
          case 20: 
            { numero=yyline; return DIVISION;
            }
          case 70: break;
          case 21: 
            { numero=yyline; return ASPERSON;
            }
          case 71: break;
          case 22: 
            { numero=yyline; return NOT;
            }
          case 72: break;
          case 23: 
            { numero=yyline; return COMILLAD;
            }
          case 73: break;
          case 24: 
            { numero=yyline; return COMILLAS;
            }
          case 74: break;
          case 25: 
            { numero=yyline; lexeme=yytext(); return PR;
            }
          case 75: break;
          case 26: 
            { numero=yyline; lexeme=yytext(); return EVENTO;
            }
          case 76: break;
          case 27: 
            { numero=yyline; lexeme=yytext(); return CONS;
            }
          case 77: break;
          case 28: 
            { numero=yyline; lexeme=yytext(); return HTML;
            }
          case 78: break;
          case 29: 
            { numero=yyline; lexeme=yytext(); return FLOAT;
            }
          case 79: break;
          case 30: 
            { numero=yyline; return COMPARACION;
            }
          case 80: break;
          case 31: 
            { numero=yyline; return SUMAM;
            }
          case 81: break;
          case 32: 
            { numero=yyline; return MULTIPLICACIONM;
            }
          case 82: break;
          case 33: 
            { numero=yyline; return RESTAM;
            }
          case 83: break;
          case 34: 
            { numero=yyline; return DIVISIONM;
            }
          case 84: break;
          case 35: 
            { numero=yyline; lexeme=yytext(); return COMENTARIO;
            }
          case 85: break;
          case 36: 
            { numero=yyline; return AND;
            }
          case 86: break;
          case 37: 
            { numero=yyline; return DIFERENTE;
            }
          case 87: break;
          case 38: 
            { numero=yyline; return OR;
            }
          case 88: break;
          case 39: 
            { numero=yyline; lexeme=yytext(); return TEXTO;
            }
          case 89: break;
          case 40: 
            { numero=yyline; lexeme=yytext(); return LN2;
            }
          case 90: break;
          case 41: 
            { numero=yyline; lexeme=yytext(); return FUNCION;
            }
          case 91: break;
          case 42: 
            { numero=yyline; lexeme=yytext(); return ARREGLO;
            }
          case 92: break;
          case 43: 
            { numero=yyline; lexeme=yytext(); return LN10;
            }
          case 93: break;
          case 44: 
            { numero=yyline; lexeme=yytext(); return LOG2;
            }
          case 94: break;
          case 45: 
            { numero=yyline;lexeme=yytext(); return PR;
            }
          case 95: break;
          case 46: 
            { numero=yyline; lexeme=yytext(); return LOG10;
            }
          case 96: break;
          case 47: 
            { numero=yyline; lexeme=yytext(); return OBJETO;
            }
          case 97: break;
          case 48: 
            { lexeme=yytext(); return PR;
            }
          case 98: break;
          case 49: 
            { numero=yyline; lexeme=yytext(); return LIB;
            }
          case 99: break;
          case 50: 
            { numero=yyline; lexeme=yytext(); return DOUBLE;
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
