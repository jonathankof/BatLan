/* The following code was generated by JFlex 1.6.1 */

<<<<<<< HEAD
package proyecto;
import static proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Administardor/Documents/GitHub/BatLan/jflex/src/proyecto/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\50\1\51\1\51\1\50\22\0\1\3\1\71\1\76"+
    "\2\0\1\54\1\70\1\77\1\47\1\52\1\66\1\65\1\60\1\67"+
    "\1\57\1\72\12\2\1\64\1\0\1\56\1\63\1\55\1\0\1\53"+
    "\1\1\1\34\3\1\1\31\2\1\1\30\3\1\1\35\2\1\1\27"+
    "\1\1\1\75\1\32\1\43\2\1\1\36\3\1\1\25\1\0\1\26"+
    "\1\73\1\46\1\0\1\16\1\4\1\22\1\10\1\14\1\15\1\21"+
    "\1\23\1\5\1\44\1\45\1\13\1\37\1\6\1\11\1\33\1\1"+
    "\1\20\1\17\1\7\1\12\1\40\1\42\1\41\1\24\1\1\1\61"+
    "\1\74\1\62\7\0\1\51\u1fa2\0\1\51\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\27\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\2"+
    "\1\27\1\2\1\30\1\31\2\3\1\0\1\2\1\32"+
    "\7\3\1\33\3\3\1\33\2\3\1\34\21\3\1\35"+
    "\15\3\1\0\1\36\1\37\1\40\1\0\1\41\1\42"+
    "\1\4\1\43\1\44\1\45\1\46\1\47\1\0\1\50"+
    "\2\0\1\51\50\3\1\0\1\52\1\33\10\3\1\52"+
    "\1\3\2\0\7\3\1\52\10\3\1\52\1\0\6\3"+
    "\1\0\1\52\12\3\1\33\4\3\1\53\10\3\1\54"+
    "\15\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\100\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\100\0\100\0\100\0\100"+
    "\0\100\0\u06c0\0\u0700\0\100\0\100\0\100\0\u0740\0\100"+
    "\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\100\0\u0900"+
    "\0\u0940\0\100\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0700\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0980\0\u0c40"+
    "\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0980\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000"+
    "\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u0980"+
    "\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0"+
    "\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u06c0\0\100\0\100"+
    "\0\100\0\u1540\0\100\0\100\0\u1580\0\100\0\100\0\100"+
    "\0\100\0\100\0\u0940\0\u0940\0\u15c0\0\u1600\0\u0a00\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840"+
    "\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40"+
    "\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040"+
    "\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200"+
    "\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400"+
    "\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u0980\0\u2580\0\u25c0"+
    "\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\100\0\u2780"+
    "\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2940"+
    "\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40"+
    "\0\u2b80\0\u2bc0\0\100\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\100"+
    "\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u0980\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080"+
    "\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\22\1\3\2\2\1\23\1\3"+
    "\1\24\1\25\1\26\1\3\1\27\1\3\1\30\1\31"+
    "\1\3\1\32\1\33\1\34\2\3\1\35\1\5\1\0"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\3\1\61\1\62\101\0\1\63"+
    "\1\64\1\0\21\63\2\0\20\63\10\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\66\1\4\1\0\21\66"+
    "\2\0\20\66\10\0\1\67\15\0\1\66\3\0\1\63"+
    "\1\64\1\0\1\70\1\71\2\63\1\72\2\63\1\73"+
    "\1\63\1\74\1\63\1\75\2\63\1\76\2\63\2\0"+
    "\20\63\10\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\0\11\63\1\77\7\63\2\0\10\63"+
    "\1\100\7\63\10\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\0\14\63\1\101\2\63\1\102"+
    "\1\63\2\0\20\63\10\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\0\5\63\1\103\2\63"+
    "\1\104\10\63\2\0\20\63\10\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\0\2\63\1\105"+
    "\16\63\2\0\4\63\1\106\13\63\10\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\0\1\63"+
    "\1\107\6\63\1\110\10\63\2\0\20\63\10\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\0"+
    "\6\63\1\111\1\112\11\63\2\0\11\63\1\113\1\114"+
    "\5\63\10\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\0\5\63\1\115\4\63\1\116\6\63"+
    "\2\0\20\63\10\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\0\7\63\1\117\3\63\2\120"+
    "\4\63\2\0\20\63\10\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\0\1\63\1\121\1\63"+
    "\1\122\13\63\1\123\1\63\2\0\20\63\10\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\0"+
    "\1\63\1\124\17\63\2\0\20\63\10\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\0\7\63"+
    "\1\125\2\63\1\126\6\63\2\0\20\63\10\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\0"+
    "\10\63\1\127\10\63\2\0\20\63\10\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\0\21\63"+
    "\2\0\1\63\1\77\16\63\10\0\1\65\4\0\1\65"+
    "\10\0\1\130\3\0\1\63\1\64\1\0\1\63\1\77"+
    "\17\63\2\0\20\63\10\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\0\3\63\1\131\15\63"+
    "\2\0\13\63\1\132\4\63\10\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\0\6\63\1\133"+
    "\5\63\1\134\4\63\2\0\20\63\10\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\0\13\63"+
    "\1\135\5\63\2\0\20\63\10\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\0\12\63\1\136"+
    "\1\63\1\137\4\63\2\0\20\63\10\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\0\10\63"+
    "\1\140\10\63\2\0\20\63\10\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\0\10\63\1\141"+
    "\1\63\1\142\4\63\1\143\1\63\2\0\20\63\10\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\0\17\63\1\144\1\63\2\0\20\63\10\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\0"+
    "\6\63\1\145\12\63\2\0\20\63\10\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\24\146\2\0\20\146\1\0"+
    "\1\146\4\0\1\147\17\0\1\146\4\0\1\67\160\0"+
    "\1\150\77\0\1\151\15\0\24\152\2\0\20\152\1\0"+
    "\1\152\12\0\1\153\2\0\1\154\6\0\1\152\4\0"+
    "\1\155\54\0\1\67\3\0\1\156\104\0\1\157\72\0"+
    "\1\160\77\0\1\161\110\0\1\162\3\0\50\163\2\0"+
    "\24\163\1\164\1\163\1\0\1\63\1\64\1\165\21\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\2\64\1\165\21\64\2\0\20\64"+
    "\1\166\1\165\24\0\1\64\3\0\1\167\2\0\21\167"+
    "\2\0\20\167\26\0\1\167\3\0\2\66\1\0\21\66"+
    "\2\0\20\66\26\0\1\66\3\0\1\63\1\64\1\165"+
    "\20\63\1\170\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\2\63\1\171\16\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\5\63\1\172\13\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\5\63\1\173\13\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\7\63\1\174\11\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\3\63\1\175\13\63\1\176"+
    "\1\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\17\63"+
    "\1\177\1\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\21\63\2\0\4\63\1\176\13\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\6\63\1\200\11\63\1\77\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\10\63\1\201\3\63\1\202\4\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\21\63\2\0"+
    "\13\63\1\203\4\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\11\63"+
    "\1\204\7\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\4\63\1\205\14\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\13\63\1\206\1\63\1\207\3\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\11\63\1\210\3\63\1\211"+
    "\3\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\7\63"+
    "\1\212\11\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\13\63\1\200\5\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\10\63\1\213\10\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\16\63\1\214\2\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\14\63\1\77\4\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\7\63\1\112\11\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\11\63\1\215\7\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\21\63\2\0"+
    "\10\63\1\211\7\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\3\63"+
    "\1\216\15\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\12\63\1\217\6\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\5\63\1\220\13\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\15\63\1\221\3\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\1\63\1\222\17\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\13\63\1\200\1\223\4\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\14\63\1\224"+
    "\4\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\10\63"+
    "\1\225\10\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\1\63\1\226\17\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\1\227\20\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\1\63\1\230\17\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\15\63\1\231\3\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\1\63\1\201\17\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\21\63\2\0\15\63\1\106"+
    "\2\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\17\63\1\232\1\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\12\63\1\233"+
    "\6\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\7\63"+
    "\1\234\11\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\1\63\1\235\17\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\14\63\1\236\4\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\21\63\2\0\10\63\1\237\7\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\24\152\2\0\20\152\1\0\1\152\15\0\1\154\6\0"+
    "\1\152\4\0\1\155\54\0\1\67\23\0\1\165\43\0"+
    "\1\166\1\165\27\0\50\240\2\0\1\241\25\240\1\0"+
    "\1\63\1\64\1\165\3\63\1\200\15\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\3\63\1\242\15\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\6\63\1\243\12\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\2\63\1\244"+
    "\16\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\5\63"+
    "\1\245\13\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\14\63\1\246\4\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\5\63\1\247\13\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\12\63\1\115\6\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\10\63\1\77\10\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\2\63\1\77\16\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\10\63\1\250\10\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\2\63\1\106"+
    "\16\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\10\63"+
    "\1\251\10\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\10\63\1\252\10\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\3\63\1\253\15\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\17\63\1\254\1\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\3\63\1\106\15\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\255\21\63\2\0\20\63\1\256"+
    "\1\255\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\10\63\1\115\10\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\2\63\1\210\16\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\10\63\1\257\10\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\14\63\1\260"+
    "\4\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\6\63"+
    "\1\261\12\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\14\63\1\262\4\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\6\63\1\263\12\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\17\63\1\210\1\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\21\63\2\0\10\63\1\264\7\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\14\63\1\265\4\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\10\63\1\266\10\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\21\63\2\0"+
    "\4\63\1\267\13\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\3\63"+
    "\1\270\15\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\7\63\1\271\11\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\21\63\2\0\11\63\1\272\6\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\21\63\2\0\7\63\1\273\10\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\1\63\1\274\17\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\21\63\2\0\4\63\1\275"+
    "\13\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\21\63\2\0\16\63"+
    "\1\106\1\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\7\63\1\200"+
    "\11\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\10\63"+
    "\1\276\10\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\21\63\2\0\4\63\1\106\13\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\54\0\1\277\26\0"+
    "\1\63\1\64\1\165\21\63\1\300\1\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\1\235\20\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\15\63\1\77\3\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\12\63\1\301\6\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\1\63\1\173\17\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\14\63\1\301"+
    "\4\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\12\63"+
    "\1\302\6\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\2\63\1\303\16\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\14\63\1\304\4\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\10\63\1\305\10\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\3\63\1\306\15\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\5\0\1\255\43\0\1\256\1\255\27\0\50\307\2\0"+
    "\1\310\25\307\1\0\1\63\1\64\1\165\21\63\2\0"+
    "\4\63\1\301\13\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\10\63"+
    "\1\311\10\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\12\63\1\312\6\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\3\63\1\266\15\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\7\63\1\313\11\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\1\106\20\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\20\63\1\106\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\21\63\2\0\5\63\1\314\12\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\16\63\1\315\2\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\1\63\1\316\17\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\12\63\1\170"+
    "\6\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\12\63"+
    "\1\317\6\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\16\63\1\320\2\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\5\63\1\321\13\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\12\63\1\322\6\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\30\0"+
    "\1\323\52\0\1\63\1\64\1\165\3\63\1\77\15\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\4\63\1\324"+
    "\14\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\13\63"+
    "\1\325\5\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\21\63\2\0\17\63\1\326\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\2\63\1\327\16\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\13\63\1\211\5\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\54\0\1\330"+
    "\26\0\1\63\1\64\1\165\4\63\1\106\14\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\3\63\1\331\15\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\4\63\1\332"+
    "\14\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\20\63"+
    "\1\333\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\17\63"+
    "\1\77\1\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\16\63\1\77\2\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\14\63\1\334\4\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\7\63\1\335\11\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\2\63\1\211\16\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\4\63\1\336\14\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\1\63\1\337\17\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\1\63\1\340"+
    "\6\63\1\341\10\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\12\63\1\342\6\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\10\63\1\343\10\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\1\63\1\344\17\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\10\63\1\345\10\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\21\63\2\0\3\63"+
    "\1\346\14\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\2\63\1\246"+
    "\16\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\10\63"+
    "\1\211\10\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\13\63\1\266\5\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\2\63\1\347\16\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\21\63\2\0\11\63\1\224\6\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\3\63\1\350\15\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\14\63\1\106\4\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\5\63\1\351\13\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\14\63\1\211"+
    "\4\63\2\0\20\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\3\63"+
    "\1\352\15\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\3\0\1\63\1\64\1\165"+
    "\15\63\1\341\3\63\2\0\20\63\1\166\1\165\6\0"+
    "\1\65\4\0\1\65\10\0\1\63\3\0\1\63\1\64"+
    "\1\165\3\63\1\353\15\63\2\0\20\63\1\166\1\165"+
    "\6\0\1\65\4\0\1\65\10\0\1\63\3\0\1\63"+
    "\1\64\1\165\2\63\1\354\16\63\2\0\20\63\1\166"+
    "\1\165\6\0\1\65\4\0\1\65\10\0\1\63\3\0"+
    "\1\63\1\64\1\165\10\63\1\355\10\63\2\0\20\63"+
    "\1\166\1\165\6\0\1\65\4\0\1\65\10\0\1\63"+
    "\3\0\1\63\1\64\1\165\12\63\1\356\6\63\2\0"+
    "\20\63\1\166\1\165\6\0\1\65\4\0\1\65\10\0"+
    "\1\63\3\0\1\63\1\64\1\165\13\63\1\341\5\63"+
    "\2\0\20\63\1\166\1\165\6\0\1\65\4\0\1\65"+
    "\10\0\1\63\3\0\1\63\1\64\1\165\21\63\2\0"+
    "\4\63\1\77\13\63\1\166\1\165\6\0\1\65\4\0"+
    "\1\65\10\0\1\63\3\0\1\63\1\64\1\165\16\63"+
    "\1\234\2\63\2\0\20\63\1\166\1\165\6\0\1\65"+
    "\4\0\1\65\10\0\1\63\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12864];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\27\1\5\11\2\1\3\11"+
    "\1\1\1\11\6\1\1\11\2\1\1\11\2\1\1\0"+
    "\60\1\1\0\3\11\1\0\2\11\1\1\5\11\1\0"+
    "\1\1\2\0\51\1\1\0\14\1\2\0\20\1\1\11"+
    "\1\0\6\1\1\0\13\1\1\11\4\1\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return DIVISION;
            }
          case 45: break;
          case 2: 
            { lexeme=yytext(); return ERROR;
            }
          case 46: break;
          case 3: 
            { lexeme=yytext(); return VAR;
            }
          case 47: break;
          case 4: 
            { lexeme=yytext(); return INT;
            }
          case 48: break;
          case 5: 
            { /*Ignore*/
            }
          case 49: break;
          case 6: 
            { return PARENTESISI;
            }
          case 50: break;
          case 7: 
            { return PARENTESISD;
            }
          case 51: break;
          case 8: 
            { return DIRECTIVAS;
            }
          case 52: break;
          case 9: 
            { return MODULO;
            }
          case 53: break;
          case 10: 
            { lexeme=yytext(); return ANGLED;
            }
          case 54: break;
          case 11: 
            { lexeme=yytext(); return ANGLEI;
            }
          case 55: break;
          case 12: 
            { return PUNTO;
            }
          case 56: break;
          case 13: 
            { return COMA;
            }
          case 57: break;
          case 14: 
            { return INICIOB;
            }
          case 58: break;
          case 15: 
            { return FINALB;
            }
          case 59: break;
          case 16: 
            { return ASIGNACION;
            }
          case 60: break;
          case 17: 
            { return DOSP;
            }
          case 61: break;
          case 18: 
            { return SUMA;
            }
          case 62: break;
          case 19: 
            { return MULTIPLICACION;
            }
          case 63: break;
          case 20: 
            { return RESTA;
            }
          case 64: break;
          case 21: 
            { return ASPERSON;
            }
          case 65: break;
          case 22: 
            { return NOT;
            }
          case 66: break;
          case 23: 
            { return POW;
            }
          case 67: break;
          case 24: 
            { return COMILLAD;
            }
          case 68: break;
          case 25: 
            { return COMILLAS;
            }
          case 69: break;
          case 26: 
            { lexeme=yytext(); return FLOAT;
            }
          case 70: break;
          case 27: 
            { lexeme=yytext(); return PR;
            }
          case 71: break;
          case 28: 
            { lexeme=yytext(); return EVENTO;
            }
          case 72: break;
          case 29: 
            { return PR;
            }
          case 73: break;
          case 30: 
            { lexeme=yytext(); return HTML;
            }
          case 74: break;
          case 31: 
            { return COMPARACION;
            }
          case 75: break;
          case 32: 
            { return SUMAM;
            }
          case 76: break;
          case 33: 
            { return MULTIPLICACIONM;
            }
          case 77: break;
          case 34: 
            { lexeme=yytext(); return COMENTARIO;
            }
          case 78: break;
          case 35: 
            { return RESTAM;
            }
          case 79: break;
          case 36: 
            { return AND;
            }
          case 80: break;
          case 37: 
            { return DIFERENTE;
            }
          case 81: break;
          case 38: 
            { return DIVISIONM;
            }
          case 82: break;
          case 39: 
            { return OR;
            }
          case 83: break;
          case 40: 
            { lexeme=yytext(); return TEXTO;
            }
          case 84: break;
          case 41: 
            { lexeme=yytext(); return OPERA;
            }
          case 85: break;
          case 42: 
            { lexeme=yytext(); return FUNCION;
            }
          case 86: break;
          case 43: 
            { lexeme=yytext(); return OBJETO;
            }
          case 87: break;
          case 44: 
            { lexeme=yytext(); return LIB;
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
